// Code generated by ent, DO NOT EDIT.

package policydecision

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/testifysec/judge/judge-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldLTE(FieldID, id))
}

// SubjectName applies equality check predicate on the "subject_name" field. It's identical to SubjectNameEQ.
func SubjectName(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldEQ(FieldSubjectName, v))
}

// DigestID applies equality check predicate on the "digest_id" field. It's identical to DigestIDEQ.
func DigestID(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldEQ(FieldDigestID, v))
}

// SubjectNameEQ applies the EQ predicate on the "subject_name" field.
func SubjectNameEQ(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldEQ(FieldSubjectName, v))
}

// SubjectNameNEQ applies the NEQ predicate on the "subject_name" field.
func SubjectNameNEQ(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldNEQ(FieldSubjectName, v))
}

// SubjectNameIn applies the In predicate on the "subject_name" field.
func SubjectNameIn(vs ...string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldIn(FieldSubjectName, vs...))
}

// SubjectNameNotIn applies the NotIn predicate on the "subject_name" field.
func SubjectNameNotIn(vs ...string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldNotIn(FieldSubjectName, vs...))
}

// SubjectNameGT applies the GT predicate on the "subject_name" field.
func SubjectNameGT(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldGT(FieldSubjectName, v))
}

// SubjectNameGTE applies the GTE predicate on the "subject_name" field.
func SubjectNameGTE(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldGTE(FieldSubjectName, v))
}

// SubjectNameLT applies the LT predicate on the "subject_name" field.
func SubjectNameLT(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldLT(FieldSubjectName, v))
}

// SubjectNameLTE applies the LTE predicate on the "subject_name" field.
func SubjectNameLTE(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldLTE(FieldSubjectName, v))
}

// SubjectNameContains applies the Contains predicate on the "subject_name" field.
func SubjectNameContains(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldContains(FieldSubjectName, v))
}

// SubjectNameHasPrefix applies the HasPrefix predicate on the "subject_name" field.
func SubjectNameHasPrefix(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldHasPrefix(FieldSubjectName, v))
}

// SubjectNameHasSuffix applies the HasSuffix predicate on the "subject_name" field.
func SubjectNameHasSuffix(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldHasSuffix(FieldSubjectName, v))
}

// SubjectNameEqualFold applies the EqualFold predicate on the "subject_name" field.
func SubjectNameEqualFold(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldEqualFold(FieldSubjectName, v))
}

// SubjectNameContainsFold applies the ContainsFold predicate on the "subject_name" field.
func SubjectNameContainsFold(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldContainsFold(FieldSubjectName, v))
}

// DigestIDEQ applies the EQ predicate on the "digest_id" field.
func DigestIDEQ(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldEQ(FieldDigestID, v))
}

// DigestIDNEQ applies the NEQ predicate on the "digest_id" field.
func DigestIDNEQ(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldNEQ(FieldDigestID, v))
}

// DigestIDIn applies the In predicate on the "digest_id" field.
func DigestIDIn(vs ...string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldIn(FieldDigestID, vs...))
}

// DigestIDNotIn applies the NotIn predicate on the "digest_id" field.
func DigestIDNotIn(vs ...string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldNotIn(FieldDigestID, vs...))
}

// DigestIDGT applies the GT predicate on the "digest_id" field.
func DigestIDGT(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldGT(FieldDigestID, v))
}

// DigestIDGTE applies the GTE predicate on the "digest_id" field.
func DigestIDGTE(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldGTE(FieldDigestID, v))
}

// DigestIDLT applies the LT predicate on the "digest_id" field.
func DigestIDLT(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldLT(FieldDigestID, v))
}

// DigestIDLTE applies the LTE predicate on the "digest_id" field.
func DigestIDLTE(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldLTE(FieldDigestID, v))
}

// DigestIDContains applies the Contains predicate on the "digest_id" field.
func DigestIDContains(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldContains(FieldDigestID, v))
}

// DigestIDHasPrefix applies the HasPrefix predicate on the "digest_id" field.
func DigestIDHasPrefix(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldHasPrefix(FieldDigestID, v))
}

// DigestIDHasSuffix applies the HasSuffix predicate on the "digest_id" field.
func DigestIDHasSuffix(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldHasSuffix(FieldDigestID, v))
}

// DigestIDEqualFold applies the EqualFold predicate on the "digest_id" field.
func DigestIDEqualFold(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldEqualFold(FieldDigestID, v))
}

// DigestIDContainsFold applies the ContainsFold predicate on the "digest_id" field.
func DigestIDContainsFold(v string) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldContainsFold(FieldDigestID, v))
}

// DecisionEQ applies the EQ predicate on the "decision" field.
func DecisionEQ(v Decision) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldEQ(FieldDecision, v))
}

// DecisionNEQ applies the NEQ predicate on the "decision" field.
func DecisionNEQ(v Decision) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldNEQ(FieldDecision, v))
}

// DecisionIn applies the In predicate on the "decision" field.
func DecisionIn(vs ...Decision) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldIn(FieldDecision, vs...))
}

// DecisionNotIn applies the NotIn predicate on the "decision" field.
func DecisionNotIn(vs ...Decision) predicate.PolicyDecision {
	return predicate.PolicyDecision(sql.FieldNotIn(FieldDecision, vs...))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.PolicyDecision {
	return predicate.PolicyDecision(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProjectTable, ProjectPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.PolicyDecision {
	return predicate.PolicyDecision(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectInverseTable, ProjectFieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProjectTable, ProjectPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PolicyDecision) predicate.PolicyDecision {
	return predicate.PolicyDecision(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PolicyDecision) predicate.PolicyDecision {
	return predicate.PolicyDecision(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PolicyDecision) predicate.PolicyDecision {
	return predicate.PolicyDecision(func(s *sql.Selector) {
		p(s.Not())
	})
}
