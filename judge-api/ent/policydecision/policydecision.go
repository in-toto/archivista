// Code generated by ent, DO NOT EDIT.

package policydecision

import (
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the policydecision type in the database.
	Label = "policy_decision"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSubjectName holds the string denoting the subject_name field in the database.
	FieldSubjectName = "subject_name"
	// FieldDigestID holds the string denoting the digest_id field in the database.
	FieldDigestID = "digest_id"
	// FieldDecision holds the string denoting the decision field in the database.
	FieldDecision = "decision"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// ProjectFieldID holds the string denoting the ID field of the Project.
	ProjectFieldID = "oid"
	// Table holds the table name of the policydecision in the database.
	Table = "policy_decisions"
	// ProjectTable is the table that holds the project relation/edge. The primary key declared below.
	ProjectTable = "project_policy_decisions"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
)

// Columns holds all SQL columns for policydecision fields.
var Columns = []string{
	FieldID,
	FieldSubjectName,
	FieldDigestID,
	FieldDecision,
}

var (
	// ProjectPrimaryKey and ProjectColumn2 are the table columns denoting the
	// primary key for the project relation (M2M).
	ProjectPrimaryKey = []string{"project_id", "policy_decision_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SubjectNameValidator is a validator for the "subject_name" field. It is called by the builders before save.
	SubjectNameValidator func(string) error
	// DigestIDValidator is a validator for the "digest_id" field. It is called by the builders before save.
	DigestIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Decision defines the type for the "decision" enum field.
type Decision string

// DecisionDenied is the default value of the Decision enum.
const DefaultDecision = DecisionDenied

// Decision values.
const (
	DecisionAllowed Decision = "allowed"
	DecisionDenied  Decision = "denied"
	DecisionSkipped Decision = "skipped"
)

func (d Decision) String() string {
	return string(d)
}

// DecisionValidator is a validator for the "decision" field enum values. It is called by the builders before save.
func DecisionValidator(d Decision) error {
	switch d {
	case DecisionAllowed, DecisionDenied, DecisionSkipped:
		return nil
	default:
		return fmt.Errorf("policydecision: invalid enum value for decision field: %q", d)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Decision) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Decision) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Decision(str)
	if err := DecisionValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Decision", str)
	}
	return nil
}
