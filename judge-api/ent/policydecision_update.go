// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/testifysec/judge/judge-api/ent/policydecision"
	"github.com/testifysec/judge/judge-api/ent/predicate"
	"github.com/testifysec/judge/judge-api/ent/project"
)

// PolicyDecisionUpdate is the builder for updating PolicyDecision entities.
type PolicyDecisionUpdate struct {
	config
	hooks    []Hook
	mutation *PolicyDecisionMutation
}

// Where appends a list predicates to the PolicyDecisionUpdate builder.
func (pdu *PolicyDecisionUpdate) Where(ps ...predicate.PolicyDecision) *PolicyDecisionUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetSubjectName sets the "subject_name" field.
func (pdu *PolicyDecisionUpdate) SetSubjectName(s string) *PolicyDecisionUpdate {
	pdu.mutation.SetSubjectName(s)
	return pdu
}

// SetDigestID sets the "digest_id" field.
func (pdu *PolicyDecisionUpdate) SetDigestID(s string) *PolicyDecisionUpdate {
	pdu.mutation.SetDigestID(s)
	return pdu
}

// SetDecision sets the "decision" field.
func (pdu *PolicyDecisionUpdate) SetDecision(po policydecision.Decision) *PolicyDecisionUpdate {
	pdu.mutation.SetDecision(po)
	return pdu
}

// SetNillableDecision sets the "decision" field if the given value is not nil.
func (pdu *PolicyDecisionUpdate) SetNillableDecision(po *policydecision.Decision) *PolicyDecisionUpdate {
	if po != nil {
		pdu.SetDecision(*po)
	}
	return pdu
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (pdu *PolicyDecisionUpdate) AddProjectIDs(ids ...uuid.UUID) *PolicyDecisionUpdate {
	pdu.mutation.AddProjectIDs(ids...)
	return pdu
}

// AddProject adds the "project" edges to the Project entity.
func (pdu *PolicyDecisionUpdate) AddProject(p ...*Project) *PolicyDecisionUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pdu.AddProjectIDs(ids...)
}

// Mutation returns the PolicyDecisionMutation object of the builder.
func (pdu *PolicyDecisionUpdate) Mutation() *PolicyDecisionMutation {
	return pdu.mutation
}

// ClearProject clears all "project" edges to the Project entity.
func (pdu *PolicyDecisionUpdate) ClearProject() *PolicyDecisionUpdate {
	pdu.mutation.ClearProject()
	return pdu
}

// RemoveProjectIDs removes the "project" edge to Project entities by IDs.
func (pdu *PolicyDecisionUpdate) RemoveProjectIDs(ids ...uuid.UUID) *PolicyDecisionUpdate {
	pdu.mutation.RemoveProjectIDs(ids...)
	return pdu
}

// RemoveProject removes "project" edges to Project entities.
func (pdu *PolicyDecisionUpdate) RemoveProject(p ...*Project) *PolicyDecisionUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pdu.RemoveProjectIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *PolicyDecisionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PolicyDecisionMutation](ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *PolicyDecisionUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *PolicyDecisionUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *PolicyDecisionUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdu *PolicyDecisionUpdate) check() error {
	if v, ok := pdu.mutation.SubjectName(); ok {
		if err := policydecision.SubjectNameValidator(v); err != nil {
			return &ValidationError{Name: "subject_name", err: fmt.Errorf(`ent: validator failed for field "PolicyDecision.subject_name": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.DigestID(); ok {
		if err := policydecision.DigestIDValidator(v); err != nil {
			return &ValidationError{Name: "digest_id", err: fmt.Errorf(`ent: validator failed for field "PolicyDecision.digest_id": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.Decision(); ok {
		if err := policydecision.DecisionValidator(v); err != nil {
			return &ValidationError{Name: "decision", err: fmt.Errorf(`ent: validator failed for field "PolicyDecision.decision": %w`, err)}
		}
	}
	return nil
}

func (pdu *PolicyDecisionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(policydecision.Table, policydecision.Columns, sqlgraph.NewFieldSpec(policydecision.FieldID, field.TypeUUID))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.SubjectName(); ok {
		_spec.SetField(policydecision.FieldSubjectName, field.TypeString, value)
	}
	if value, ok := pdu.mutation.DigestID(); ok {
		_spec.SetField(policydecision.FieldDigestID, field.TypeString, value)
	}
	if value, ok := pdu.mutation.Decision(); ok {
		_spec.SetField(policydecision.FieldDecision, field.TypeEnum, value)
	}
	if pdu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   policydecision.ProjectTable,
			Columns: policydecision.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.RemovedProjectIDs(); len(nodes) > 0 && !pdu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   policydecision.ProjectTable,
			Columns: policydecision.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   policydecision.ProjectTable,
			Columns: policydecision.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{policydecision.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// PolicyDecisionUpdateOne is the builder for updating a single PolicyDecision entity.
type PolicyDecisionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PolicyDecisionMutation
}

// SetSubjectName sets the "subject_name" field.
func (pduo *PolicyDecisionUpdateOne) SetSubjectName(s string) *PolicyDecisionUpdateOne {
	pduo.mutation.SetSubjectName(s)
	return pduo
}

// SetDigestID sets the "digest_id" field.
func (pduo *PolicyDecisionUpdateOne) SetDigestID(s string) *PolicyDecisionUpdateOne {
	pduo.mutation.SetDigestID(s)
	return pduo
}

// SetDecision sets the "decision" field.
func (pduo *PolicyDecisionUpdateOne) SetDecision(po policydecision.Decision) *PolicyDecisionUpdateOne {
	pduo.mutation.SetDecision(po)
	return pduo
}

// SetNillableDecision sets the "decision" field if the given value is not nil.
func (pduo *PolicyDecisionUpdateOne) SetNillableDecision(po *policydecision.Decision) *PolicyDecisionUpdateOne {
	if po != nil {
		pduo.SetDecision(*po)
	}
	return pduo
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (pduo *PolicyDecisionUpdateOne) AddProjectIDs(ids ...uuid.UUID) *PolicyDecisionUpdateOne {
	pduo.mutation.AddProjectIDs(ids...)
	return pduo
}

// AddProject adds the "project" edges to the Project entity.
func (pduo *PolicyDecisionUpdateOne) AddProject(p ...*Project) *PolicyDecisionUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pduo.AddProjectIDs(ids...)
}

// Mutation returns the PolicyDecisionMutation object of the builder.
func (pduo *PolicyDecisionUpdateOne) Mutation() *PolicyDecisionMutation {
	return pduo.mutation
}

// ClearProject clears all "project" edges to the Project entity.
func (pduo *PolicyDecisionUpdateOne) ClearProject() *PolicyDecisionUpdateOne {
	pduo.mutation.ClearProject()
	return pduo
}

// RemoveProjectIDs removes the "project" edge to Project entities by IDs.
func (pduo *PolicyDecisionUpdateOne) RemoveProjectIDs(ids ...uuid.UUID) *PolicyDecisionUpdateOne {
	pduo.mutation.RemoveProjectIDs(ids...)
	return pduo
}

// RemoveProject removes "project" edges to Project entities.
func (pduo *PolicyDecisionUpdateOne) RemoveProject(p ...*Project) *PolicyDecisionUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pduo.RemoveProjectIDs(ids...)
}

// Where appends a list predicates to the PolicyDecisionUpdate builder.
func (pduo *PolicyDecisionUpdateOne) Where(ps ...predicate.PolicyDecision) *PolicyDecisionUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *PolicyDecisionUpdateOne) Select(field string, fields ...string) *PolicyDecisionUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated PolicyDecision entity.
func (pduo *PolicyDecisionUpdateOne) Save(ctx context.Context) (*PolicyDecision, error) {
	return withHooks[*PolicyDecision, PolicyDecisionMutation](ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *PolicyDecisionUpdateOne) SaveX(ctx context.Context) *PolicyDecision {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *PolicyDecisionUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *PolicyDecisionUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pduo *PolicyDecisionUpdateOne) check() error {
	if v, ok := pduo.mutation.SubjectName(); ok {
		if err := policydecision.SubjectNameValidator(v); err != nil {
			return &ValidationError{Name: "subject_name", err: fmt.Errorf(`ent: validator failed for field "PolicyDecision.subject_name": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.DigestID(); ok {
		if err := policydecision.DigestIDValidator(v); err != nil {
			return &ValidationError{Name: "digest_id", err: fmt.Errorf(`ent: validator failed for field "PolicyDecision.digest_id": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.Decision(); ok {
		if err := policydecision.DecisionValidator(v); err != nil {
			return &ValidationError{Name: "decision", err: fmt.Errorf(`ent: validator failed for field "PolicyDecision.decision": %w`, err)}
		}
	}
	return nil
}

func (pduo *PolicyDecisionUpdateOne) sqlSave(ctx context.Context) (_node *PolicyDecision, err error) {
	if err := pduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(policydecision.Table, policydecision.Columns, sqlgraph.NewFieldSpec(policydecision.FieldID, field.TypeUUID))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PolicyDecision.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, policydecision.FieldID)
		for _, f := range fields {
			if !policydecision.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != policydecision.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.SubjectName(); ok {
		_spec.SetField(policydecision.FieldSubjectName, field.TypeString, value)
	}
	if value, ok := pduo.mutation.DigestID(); ok {
		_spec.SetField(policydecision.FieldDigestID, field.TypeString, value)
	}
	if value, ok := pduo.mutation.Decision(); ok {
		_spec.SetField(policydecision.FieldDecision, field.TypeEnum, value)
	}
	if pduo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   policydecision.ProjectTable,
			Columns: policydecision.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.RemovedProjectIDs(); len(nodes) > 0 && !pduo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   policydecision.ProjectTable,
			Columns: policydecision.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   policydecision.ProjectTable,
			Columns: policydecision.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PolicyDecision{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{policydecision.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
