// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/testifysec/judge/judge-api/ent/policydecision"
	"github.com/testifysec/judge/judge-api/ent/project"
)

// PolicyDecisionCreate is the builder for creating a PolicyDecision entity.
type PolicyDecisionCreate struct {
	config
	mutation *PolicyDecisionMutation
	hooks    []Hook
}

// SetSubjectName sets the "subject_name" field.
func (pdc *PolicyDecisionCreate) SetSubjectName(s string) *PolicyDecisionCreate {
	pdc.mutation.SetSubjectName(s)
	return pdc
}

// SetDigestID sets the "digest_id" field.
func (pdc *PolicyDecisionCreate) SetDigestID(s string) *PolicyDecisionCreate {
	pdc.mutation.SetDigestID(s)
	return pdc
}

// SetDecision sets the "decision" field.
func (pdc *PolicyDecisionCreate) SetDecision(po policydecision.Decision) *PolicyDecisionCreate {
	pdc.mutation.SetDecision(po)
	return pdc
}

// SetNillableDecision sets the "decision" field if the given value is not nil.
func (pdc *PolicyDecisionCreate) SetNillableDecision(po *policydecision.Decision) *PolicyDecisionCreate {
	if po != nil {
		pdc.SetDecision(*po)
	}
	return pdc
}

// SetID sets the "id" field.
func (pdc *PolicyDecisionCreate) SetID(u uuid.UUID) *PolicyDecisionCreate {
	pdc.mutation.SetID(u)
	return pdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pdc *PolicyDecisionCreate) SetNillableID(u *uuid.UUID) *PolicyDecisionCreate {
	if u != nil {
		pdc.SetID(*u)
	}
	return pdc
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (pdc *PolicyDecisionCreate) AddProjectIDs(ids ...uuid.UUID) *PolicyDecisionCreate {
	pdc.mutation.AddProjectIDs(ids...)
	return pdc
}

// AddProject adds the "project" edges to the Project entity.
func (pdc *PolicyDecisionCreate) AddProject(p ...*Project) *PolicyDecisionCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pdc.AddProjectIDs(ids...)
}

// Mutation returns the PolicyDecisionMutation object of the builder.
func (pdc *PolicyDecisionCreate) Mutation() *PolicyDecisionMutation {
	return pdc.mutation
}

// Save creates the PolicyDecision in the database.
func (pdc *PolicyDecisionCreate) Save(ctx context.Context) (*PolicyDecision, error) {
	pdc.defaults()
	return withHooks[*PolicyDecision, PolicyDecisionMutation](ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *PolicyDecisionCreate) SaveX(ctx context.Context) *PolicyDecision {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *PolicyDecisionCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *PolicyDecisionCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdc *PolicyDecisionCreate) defaults() {
	if _, ok := pdc.mutation.Decision(); !ok {
		v := policydecision.DefaultDecision
		pdc.mutation.SetDecision(v)
	}
	if _, ok := pdc.mutation.ID(); !ok {
		v := policydecision.DefaultID()
		pdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdc *PolicyDecisionCreate) check() error {
	if _, ok := pdc.mutation.SubjectName(); !ok {
		return &ValidationError{Name: "subject_name", err: errors.New(`ent: missing required field "PolicyDecision.subject_name"`)}
	}
	if v, ok := pdc.mutation.SubjectName(); ok {
		if err := policydecision.SubjectNameValidator(v); err != nil {
			return &ValidationError{Name: "subject_name", err: fmt.Errorf(`ent: validator failed for field "PolicyDecision.subject_name": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.DigestID(); !ok {
		return &ValidationError{Name: "digest_id", err: errors.New(`ent: missing required field "PolicyDecision.digest_id"`)}
	}
	if v, ok := pdc.mutation.DigestID(); ok {
		if err := policydecision.DigestIDValidator(v); err != nil {
			return &ValidationError{Name: "digest_id", err: fmt.Errorf(`ent: validator failed for field "PolicyDecision.digest_id": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.Decision(); !ok {
		return &ValidationError{Name: "decision", err: errors.New(`ent: missing required field "PolicyDecision.decision"`)}
	}
	if v, ok := pdc.mutation.Decision(); ok {
		if err := policydecision.DecisionValidator(v); err != nil {
			return &ValidationError{Name: "decision", err: fmt.Errorf(`ent: validator failed for field "PolicyDecision.decision": %w`, err)}
		}
	}
	return nil
}

func (pdc *PolicyDecisionCreate) sqlSave(ctx context.Context) (*PolicyDecision, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *PolicyDecisionCreate) createSpec() (*PolicyDecision, *sqlgraph.CreateSpec) {
	var (
		_node = &PolicyDecision{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(policydecision.Table, sqlgraph.NewFieldSpec(policydecision.FieldID, field.TypeUUID))
	)
	if id, ok := pdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pdc.mutation.SubjectName(); ok {
		_spec.SetField(policydecision.FieldSubjectName, field.TypeString, value)
		_node.SubjectName = value
	}
	if value, ok := pdc.mutation.DigestID(); ok {
		_spec.SetField(policydecision.FieldDigestID, field.TypeString, value)
		_node.DigestID = value
	}
	if value, ok := pdc.mutation.Decision(); ok {
		_spec.SetField(policydecision.FieldDecision, field.TypeEnum, value)
		_node.Decision = value
	}
	if nodes := pdc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   policydecision.ProjectTable,
			Columns: policydecision.ProjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PolicyDecisionCreateBulk is the builder for creating many PolicyDecision entities in bulk.
type PolicyDecisionCreateBulk struct {
	config
	builders []*PolicyDecisionCreate
}

// Save creates the PolicyDecision entities in the database.
func (pdcb *PolicyDecisionCreateBulk) Save(ctx context.Context) ([]*PolicyDecision, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*PolicyDecision, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PolicyDecisionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *PolicyDecisionCreateBulk) SaveX(ctx context.Context) []*PolicyDecision {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *PolicyDecisionCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *PolicyDecisionCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
