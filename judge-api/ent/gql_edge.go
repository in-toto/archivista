// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (pr *Project) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := pr.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryTenant().Only(ctx)
	}
	return result, err
}

func (pr *Project) CreatedBy(ctx context.Context) (*User, error) {
	result, err := pr.Edges.CreatedByOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryCreatedBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Project) ModifiedBy(ctx context.Context) (*User, error) {
	result, err := pr.Edges.ModifiedByOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryModifiedBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tenant) CreatedBy(ctx context.Context) (*User, error) {
	result, err := t.Edges.CreatedByOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryCreatedBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tenant) ModifiedBy(ctx context.Context) (*User, error) {
	result, err := t.Edges.ModifiedByOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryModifiedBy().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tenant) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryUsers().All(ctx)
	}
	return result, err
}

func (t *Tenant) Parent(ctx context.Context) (*Tenant, error) {
	result, err := t.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tenant) Children(ctx context.Context) (result []*Tenant, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedChildren(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ChildrenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryChildren().All(ctx)
	}
	return result, err
}

func (u *User) Tenant(ctx context.Context) (result []*Tenant, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedTenant(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.TenantOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryTenant().All(ctx)
	}
	return result, err
}
