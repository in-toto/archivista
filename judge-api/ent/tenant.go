// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/testifysec/judge/judge-api/ent/tenant"
	"github.com/testifysec/judge/judge-api/ent/user"
)

// Tenant is the model entity for the Tenant schema.
type Tenant struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Type holds the value of the "type" field.
	Type tenant.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TenantQuery when eager-loading is set.
	Edges              TenantEdges `json:"edges"`
	tenant_created_by  *uuid.UUID
	tenant_modified_by *uuid.UUID
	tenant_children    *uuid.UUID
}

// TenantEdges holds the relations/edges for other nodes in the graph.
type TenantEdges struct {
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"created_by,omitempty"`
	// ModifiedBy holds the value of the modified_by edge.
	ModifiedBy *User `json:"modified_by,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Tenant `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Tenant `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedUsers    map[string][]*User
	namedChildren map[string][]*Tenant
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenantEdges) CreatedByOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.CreatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreatedBy, nil
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// ModifiedByOrErr returns the ModifiedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenantEdges) ModifiedByOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.ModifiedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.ModifiedBy, nil
	}
	return nil, &NotLoadedError{edge: "modified_by"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenantEdges) ParentOrErr() (*Tenant, error) {
	if e.loadedTypes[3] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) ChildrenOrErr() ([]*Tenant, error) {
	if e.loadedTypes[4] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tenant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenant.FieldName, tenant.FieldDescription, tenant.FieldType:
			values[i] = new(sql.NullString)
		case tenant.FieldCreatedAt, tenant.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case tenant.FieldID:
			values[i] = new(uuid.UUID)
		case tenant.ForeignKeys[0]: // tenant_created_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case tenant.ForeignKeys[1]: // tenant_modified_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case tenant.ForeignKeys[2]: // tenant_children
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tenant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tenant fields.
func (t *Tenant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenant.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case tenant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tenant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case tenant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case tenant.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case tenant.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = tenant.Type(value.String)
			}
		case tenant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_created_by", values[i])
			} else if value.Valid {
				t.tenant_created_by = new(uuid.UUID)
				*t.tenant_created_by = *value.S.(*uuid.UUID)
			}
		case tenant.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_modified_by", values[i])
			} else if value.Valid {
				t.tenant_modified_by = new(uuid.UUID)
				*t.tenant_modified_by = *value.S.(*uuid.UUID)
			}
		case tenant.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_children", values[i])
			} else if value.Valid {
				t.tenant_children = new(uuid.UUID)
				*t.tenant_children = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryCreatedBy queries the "created_by" edge of the Tenant entity.
func (t *Tenant) QueryCreatedBy() *UserQuery {
	return NewTenantClient(t.config).QueryCreatedBy(t)
}

// QueryModifiedBy queries the "modified_by" edge of the Tenant entity.
func (t *Tenant) QueryModifiedBy() *UserQuery {
	return NewTenantClient(t.config).QueryModifiedBy(t)
}

// QueryUsers queries the "users" edge of the Tenant entity.
func (t *Tenant) QueryUsers() *UserQuery {
	return NewTenantClient(t.config).QueryUsers(t)
}

// QueryParent queries the "parent" edge of the Tenant entity.
func (t *Tenant) QueryParent() *TenantQuery {
	return NewTenantClient(t.config).QueryParent(t)
}

// QueryChildren queries the "children" edge of the Tenant entity.
func (t *Tenant) QueryChildren() *TenantQuery {
	return NewTenantClient(t.config).QueryChildren(t)
}

// Update returns a builder for updating this Tenant.
// Note that you need to call Tenant.Unwrap() before calling this method if this Tenant
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tenant) Update() *TenantUpdateOne {
	return NewTenantClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tenant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tenant) Unwrap() *Tenant {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tenant is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tenant) String() string {
	var builder strings.Builder
	builder.WriteString("Tenant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", t.Type))
	builder.WriteByte(')')
	return builder.String()
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Tenant) NamedUsers(name string) ([]*User, error) {
	if t.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Tenant) appendNamedUsers(name string, edges ...*User) {
	if t.Edges.namedUsers == nil {
		t.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		t.Edges.namedUsers[name] = []*User{}
	} else {
		t.Edges.namedUsers[name] = append(t.Edges.namedUsers[name], edges...)
	}
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Tenant) NamedChildren(name string) ([]*Tenant, error) {
	if t.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Tenant) appendNamedChildren(name string, edges ...*Tenant) {
	if t.Edges.namedChildren == nil {
		t.Edges.namedChildren = make(map[string][]*Tenant)
	}
	if len(edges) == 0 {
		t.Edges.namedChildren[name] = []*Tenant{}
	} else {
		t.Edges.namedChildren[name] = append(t.Edges.namedChildren[name], edges...)
	}
}

// Tenants is a parsable slice of Tenant.
type Tenants []*Tenant
