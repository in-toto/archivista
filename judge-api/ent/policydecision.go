// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/testifysec/judge/judge-api/ent/policydecision"
)

// PolicyDecision is the model entity for the PolicyDecision schema.
type PolicyDecision struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SubjectName holds the value of the "subject_name" field.
	SubjectName string `json:"subject_name,omitempty"`
	// DigestID holds the value of the "digest_id" field.
	DigestID string `json:"digest_id,omitempty"`
	// Decision holds the value of the "decision" field.
	Decision policydecision.Decision `json:"decision,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PolicyDecisionQuery when eager-loading is set.
	Edges PolicyDecisionEdges `json:"edges"`
}

// PolicyDecisionEdges holds the relations/edges for other nodes in the graph.
type PolicyDecisionEdges struct {
	// Project holds the value of the project edge.
	Project []*Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedProject map[string][]*Project
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading.
func (e PolicyDecisionEdges) ProjectOrErr() ([]*Project, error) {
	if e.loadedTypes[0] {
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PolicyDecision) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case policydecision.FieldSubjectName, policydecision.FieldDigestID, policydecision.FieldDecision:
			values[i] = new(sql.NullString)
		case policydecision.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PolicyDecision", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PolicyDecision fields.
func (pd *PolicyDecision) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case policydecision.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pd.ID = *value
			}
		case policydecision.FieldSubjectName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_name", values[i])
			} else if value.Valid {
				pd.SubjectName = value.String
			}
		case policydecision.FieldDigestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field digest_id", values[i])
			} else if value.Valid {
				pd.DigestID = value.String
			}
		case policydecision.FieldDecision:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field decision", values[i])
			} else if value.Valid {
				pd.Decision = policydecision.Decision(value.String)
			}
		}
	}
	return nil
}

// QueryProject queries the "project" edge of the PolicyDecision entity.
func (pd *PolicyDecision) QueryProject() *ProjectQuery {
	return NewPolicyDecisionClient(pd.config).QueryProject(pd)
}

// Update returns a builder for updating this PolicyDecision.
// Note that you need to call PolicyDecision.Unwrap() before calling this method if this PolicyDecision
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *PolicyDecision) Update() *PolicyDecisionUpdateOne {
	return NewPolicyDecisionClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the PolicyDecision entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *PolicyDecision) Unwrap() *PolicyDecision {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: PolicyDecision is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *PolicyDecision) String() string {
	var builder strings.Builder
	builder.WriteString("PolicyDecision(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("subject_name=")
	builder.WriteString(pd.SubjectName)
	builder.WriteString(", ")
	builder.WriteString("digest_id=")
	builder.WriteString(pd.DigestID)
	builder.WriteString(", ")
	builder.WriteString("decision=")
	builder.WriteString(fmt.Sprintf("%v", pd.Decision))
	builder.WriteByte(')')
	return builder.String()
}

// NamedProject returns the Project named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pd *PolicyDecision) NamedProject(name string) ([]*Project, error) {
	if pd.Edges.namedProject == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pd.Edges.namedProject[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pd *PolicyDecision) appendNamedProject(name string, edges ...*Project) {
	if pd.Edges.namedProject == nil {
		pd.Edges.namedProject = make(map[string][]*Project)
	}
	if len(edges) == 0 {
		pd.Edges.namedProject[name] = []*Project{}
	} else {
		pd.Edges.namedProject[name] = append(pd.Edges.namedProject[name], edges...)
	}
}

// PolicyDecisions is a parsable slice of PolicyDecision.
type PolicyDecisions []*PolicyDecision
