// Code generated by ent, DO NOT EDIT.

package user

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIdentityID holds the string denoting the identity_id field in the database.
	FieldIdentityID = "identity_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// TenantFieldID holds the string denoting the ID field of the Tenant.
	TenantFieldID = "oid"
	// Table holds the table name of the user in the database.
	Table = "users"
	// TenantTable is the table that holds the tenant relation/edge. The primary key declared below.
	TenantTable = "tenant_users"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldIdentityID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// TenantPrimaryKey and TenantColumn2 are the table columns denoting the
	// primary key for the tenant relation (M2M).
	TenantPrimaryKey = []string{"tenant_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IdentityIDValidator is a validator for the "identity_id" field. It is called by the builders before save.
	IdentityIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
