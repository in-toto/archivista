directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/testifysec/judge/judge-api/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type PolicyDecision implements Node {
  id: ID!
  subjectName: String!
  digestID: String!
  decision: PolicyDecisionDecision!
  project: [Project!]
}
"""PolicyDecisionDecision is enum for the field decision"""
enum PolicyDecisionDecision @goModel(model: "github.com/testifysec/judge/judge-api/ent/policydecision.Decision") {
  allowed
  denied
  skipped
}
"""
PolicyDecisionWhereInput is used for filtering PolicyDecision objects.
Input was generated by ent.
"""
input PolicyDecisionWhereInput {
  not: PolicyDecisionWhereInput
  and: [PolicyDecisionWhereInput!]
  or: [PolicyDecisionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """subject_name field predicates"""
  subjectName: String
  subjectNameNEQ: String
  subjectNameIn: [String!]
  subjectNameNotIn: [String!]
  subjectNameGT: String
  subjectNameGTE: String
  subjectNameLT: String
  subjectNameLTE: String
  subjectNameContains: String
  subjectNameHasPrefix: String
  subjectNameHasSuffix: String
  subjectNameEqualFold: String
  subjectNameContainsFold: String
  """digest_id field predicates"""
  digestID: String
  digestIDNEQ: String
  digestIDIn: [String!]
  digestIDNotIn: [String!]
  digestIDGT: String
  digestIDGTE: String
  digestIDLT: String
  digestIDLTE: String
  digestIDContains: String
  digestIDHasPrefix: String
  digestIDHasSuffix: String
  digestIDEqualFold: String
  digestIDContainsFold: String
  """decision field predicates"""
  decision: PolicyDecisionDecision
  decisionNEQ: PolicyDecisionDecision
  decisionIn: [PolicyDecisionDecision!]
  decisionNotIn: [PolicyDecisionDecision!]
  """project edge predicates"""
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
}
type Project implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  repoID: String!
  name: String!
  projecturl: String!
  tenant: Tenant!
  createdBy: User
  modifiedBy: User
  policyDecisions: [PolicyDecision!]
  parent: Project
  children: [Project!]
}
"""
ProjectWhereInput is used for filtering Project objects.
Input was generated by ent.
"""
input ProjectWhereInput {
  not: ProjectWhereInput
  and: [ProjectWhereInput!]
  or: [ProjectWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """repo_id field predicates"""
  repoID: String
  repoIDNEQ: String
  repoIDIn: [String!]
  repoIDNotIn: [String!]
  repoIDGT: String
  repoIDGTE: String
  repoIDLT: String
  repoIDLTE: String
  repoIDContains: String
  repoIDHasPrefix: String
  repoIDHasSuffix: String
  repoIDEqualFold: String
  repoIDContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """projecturl field predicates"""
  projecturl: String
  projecturlNEQ: String
  projecturlIn: [String!]
  projecturlNotIn: [String!]
  projecturlGT: String
  projecturlGTE: String
  projecturlLT: String
  projecturlLTE: String
  projecturlContains: String
  projecturlHasPrefix: String
  projecturlHasSuffix: String
  projecturlEqualFold: String
  projecturlContainsFold: String
  """tenant edge predicates"""
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """created_by edge predicates"""
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
  """modified_by edge predicates"""
  hasModifiedBy: Boolean
  hasModifiedByWith: [UserWhereInput!]
  """policy_decisions edge predicates"""
  hasPolicyDecisions: Boolean
  hasPolicyDecisionsWith: [PolicyDecisionWhereInput!]
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [ProjectWhereInput!]
  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [ProjectWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  projects: [Project!]!
}
type Tenant implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  description: String!
  type: TenantType!
  createdBy: User
  modifiedBy: User
  users: [User!]
  parent: Tenant
  children: [Tenant!]
}
"""TenantType is enum for the field type"""
enum TenantType @goModel(model: "github.com/testifysec/judge/judge-api/ent/tenant.Type") {
  ROOT
  ORG
  TEAM
}
"""
TenantWhereInput is used for filtering Tenant objects.
Input was generated by ent.
"""
input TenantWhereInput {
  not: TenantWhereInput
  and: [TenantWhereInput!]
  or: [TenantWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """type field predicates"""
  type: TenantType
  typeNEQ: TenantType
  typeIn: [TenantType!]
  typeNotIn: [TenantType!]
  """created_by edge predicates"""
  hasCreatedBy: Boolean
  hasCreatedByWith: [UserWhereInput!]
  """modified_by edge predicates"""
  hasModifiedBy: Boolean
  hasModifiedByWith: [UserWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [TenantWhereInput!]
  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [TenantWhereInput!]
}
"""The builtin Time type"""
scalar Time
type User implements Node {
  id: ID!
  identityID: String!
  createdAt: Time!
  updatedAt: Time!
  tenant: [Tenant!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """identity_id field predicates"""
  identityID: String
  identityIDNEQ: String
  identityIDIn: [String!]
  identityIDNotIn: [String!]
  identityIDGT: String
  identityIDGTE: String
  identityIDLT: String
  identityIDLTE: String
  identityIDContains: String
  identityIDHasPrefix: String
  identityIDHasSuffix: String
  identityIDEqualFold: String
  identityIDContainsFold: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """tenant edge predicates"""
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
}
