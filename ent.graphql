directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Attestation implements Node {
  id: ID!
  type: String!
  omnitrail: Omnitrail
  attestationCollection: AttestationCollection!
}
type AttestationCollection implements Node {
  id: ID!
  name: String!
  attestations: [Attestation!]
  statement: Statement!
}
"""
AttestationCollectionWhereInput is used for filtering AttestationCollection objects.
Input was generated by ent.
"""
input AttestationCollectionWhereInput {
  not: AttestationCollectionWhereInput
  and: [AttestationCollectionWhereInput!]
  or: [AttestationCollectionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  attestations edge predicates
  """
  hasAttestations: Boolean
  hasAttestationsWith: [AttestationWhereInput!]
  """
  statement edge predicates
  """
  hasStatement: Boolean
  hasStatementWith: [StatementWhereInput!]
}
type AttestationPolicy implements Node {
  id: ID!
  name: String!
  statement: Statement
}
"""
A connection to a list of items.
"""
type AttestationPolicyConnection {
  """
  A list of edges.
  """
  edges: [AttestationPolicyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AttestationPolicyEdge {
  """
  The item at the end of the edge.
  """
  node: AttestationPolicy
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
AttestationPolicyWhereInput is used for filtering AttestationPolicy objects.
Input was generated by ent.
"""
input AttestationPolicyWhereInput {
  not: AttestationPolicyWhereInput
  and: [AttestationPolicyWhereInput!]
  or: [AttestationPolicyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  statement edge predicates
  """
  hasStatement: Boolean
  hasStatementWith: [StatementWhereInput!]
}
"""
AttestationWhereInput is used for filtering Attestation objects.
Input was generated by ent.
"""
input AttestationWhereInput {
  not: AttestationWhereInput
  and: [AttestationWhereInput!]
  or: [AttestationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  type field predicates
  """
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """
  omnitrail edge predicates
  """
  hasOmnitrail: Boolean
  hasOmnitrailWith: [OmnitrailWhereInput!]
  """
  attestation_collection edge predicates
  """
  hasAttestationCollection: Boolean
  hasAttestationCollectionWith: [AttestationCollectionWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Dsse implements Node {
  id: ID!
  gitoidSha256: String!
  payloadType: String!
  statement: Statement
  signatures: [Signature!]
  payloadDigests: [PayloadDigest!]
}
"""
A connection to a list of items.
"""
type DsseConnection {
  """
  A list of edges.
  """
  edges: [DsseEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DsseEdge {
  """
  The item at the end of the edge.
  """
  node: Dsse
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DsseWhereInput is used for filtering Dsse objects.
Input was generated by ent.
"""
input DsseWhereInput {
  not: DsseWhereInput
  and: [DsseWhereInput!]
  or: [DsseWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  gitoid_sha256 field predicates
  """
  gitoidSha256: String
  gitoidSha256NEQ: String
  gitoidSha256In: [String!]
  gitoidSha256NotIn: [String!]
  gitoidSha256GT: String
  gitoidSha256GTE: String
  gitoidSha256LT: String
  gitoidSha256LTE: String
  gitoidSha256Contains: String
  gitoidSha256HasPrefix: String
  gitoidSha256HasSuffix: String
  gitoidSha256EqualFold: String
  gitoidSha256ContainsFold: String
  """
  payload_type field predicates
  """
  payloadType: String
  payloadTypeNEQ: String
  payloadTypeIn: [String!]
  payloadTypeNotIn: [String!]
  payloadTypeGT: String
  payloadTypeGTE: String
  payloadTypeLT: String
  payloadTypeLTE: String
  payloadTypeContains: String
  payloadTypeHasPrefix: String
  payloadTypeHasSuffix: String
  payloadTypeEqualFold: String
  payloadTypeContainsFold: String
  """
  statement edge predicates
  """
  hasStatement: Boolean
  hasStatementWith: [StatementWhereInput!]
  """
  signatures edge predicates
  """
  hasSignatures: Boolean
  hasSignaturesWith: [SignatureWhereInput!]
  """
  payload_digests edge predicates
  """
  hasPayloadDigests: Boolean
  hasPayloadDigestsWith: [PayloadDigestWhereInput!]
}
type Mapping implements Node {
  id: ID!
  path: String!
  type: String!
  sha1: String!
  sha256: String!
  gitoidsha1: String! @goField(name: "GitoidSha1", forceResolver: false)
  gitoidsha256: String! @goField(name: "GitoidSha256", forceResolver: false)
  posix: [Posix!]
  omnitrail: Omnitrail!
}
"""
MappingWhereInput is used for filtering Mapping objects.
Input was generated by ent.
"""
input MappingWhereInput {
  not: MappingWhereInput
  and: [MappingWhereInput!]
  or: [MappingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  path field predicates
  """
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathEqualFold: String
  pathContainsFold: String
  """
  type field predicates
  """
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """
  sha1 field predicates
  """
  sha1: String
  sha1NEQ: String
  sha1In: [String!]
  sha1NotIn: [String!]
  sha1GT: String
  sha1GTE: String
  sha1LT: String
  sha1LTE: String
  sha1Contains: String
  sha1HasPrefix: String
  sha1HasSuffix: String
  sha1EqualFold: String
  sha1ContainsFold: String
  """
  sha256 field predicates
  """
  sha256: String
  sha256NEQ: String
  sha256In: [String!]
  sha256NotIn: [String!]
  sha256GT: String
  sha256GTE: String
  sha256LT: String
  sha256LTE: String
  sha256Contains: String
  sha256HasPrefix: String
  sha256HasSuffix: String
  sha256EqualFold: String
  sha256ContainsFold: String
  """
  gitoidSha1 field predicates
  """
  gitoidsha1: String
  gitoidsha1NEQ: String
  gitoidsha1In: [String!]
  gitoidsha1NotIn: [String!]
  gitoidsha1GT: String
  gitoidsha1GTE: String
  gitoidsha1LT: String
  gitoidsha1LTE: String
  gitoidsha1Contains: String
  gitoidsha1HasPrefix: String
  gitoidsha1HasSuffix: String
  gitoidsha1EqualFold: String
  gitoidsha1ContainsFold: String
  """
  gitoidSha256 field predicates
  """
  gitoidsha256: String
  gitoidsha256NEQ: String
  gitoidsha256In: [String!]
  gitoidsha256NotIn: [String!]
  gitoidsha256GT: String
  gitoidsha256GTE: String
  gitoidsha256LT: String
  gitoidsha256LTE: String
  gitoidsha256Contains: String
  gitoidsha256HasPrefix: String
  gitoidsha256HasSuffix: String
  gitoidsha256EqualFold: String
  gitoidsha256ContainsFold: String
  """
  posix edge predicates
  """
  hasPosix: Boolean
  hasPosixWith: [PosixWhereInput!]
  """
  omnitrail edge predicates
  """
  hasOmnitrail: Boolean
  hasOmnitrailWith: [OmnitrailWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/in-toto/archivista/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
type Omnitrail implements Node {
  id: ID!
  mappings: [Mapping!]
  attestation: Attestation!
}
"""
OmnitrailWhereInput is used for filtering Omnitrail objects.
Input was generated by ent.
"""
input OmnitrailWhereInput {
  not: OmnitrailWhereInput
  and: [OmnitrailWhereInput!]
  or: [OmnitrailWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  mappings edge predicates
  """
  hasMappings: Boolean
  hasMappingsWith: [MappingWhereInput!]
  """
  attestation edge predicates
  """
  hasAttestation: Boolean
  hasAttestationWith: [AttestationWhereInput!]
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type PayloadDigest implements Node {
  id: ID!
  algorithm: String!
  value: String!
  dsse: Dsse
}
"""
PayloadDigestWhereInput is used for filtering PayloadDigest objects.
Input was generated by ent.
"""
input PayloadDigestWhereInput {
  not: PayloadDigestWhereInput
  and: [PayloadDigestWhereInput!]
  or: [PayloadDigestWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  algorithm field predicates
  """
  algorithm: String
  algorithmNEQ: String
  algorithmIn: [String!]
  algorithmNotIn: [String!]
  algorithmGT: String
  algorithmGTE: String
  algorithmLT: String
  algorithmLTE: String
  algorithmContains: String
  algorithmHasPrefix: String
  algorithmHasSuffix: String
  algorithmEqualFold: String
  algorithmContainsFold: String
  """
  value field predicates
  """
  value: String
  valueNEQ: String
  valueIn: [String!]
  valueNotIn: [String!]
  valueGT: String
  valueGTE: String
  valueLT: String
  valueLTE: String
  valueContains: String
  valueHasPrefix: String
  valueHasSuffix: String
  valueEqualFold: String
  valueContainsFold: String
  """
  dsse edge predicates
  """
  hasDsse: Boolean
  hasDsseWith: [DsseWhereInput!]
}
type Posix implements Node {
  id: ID!
  atime: String!
  ctime: String!
  creationTime: String!
  extendedAttributes: String!
  fileDeviceID: String!
  fileFlags: String!
  fileInode: String!
  fileSystemID: String!
  fileType: String!
  hardLinkCount: String!
  mtime: String!
  metadataCtime: String!
  ownerGid: String!
  ownerUID: String!
  permissions: String!
  size: String!
  mapping: Mapping!
}
"""
PosixWhereInput is used for filtering Posix objects.
Input was generated by ent.
"""
input PosixWhereInput {
  not: PosixWhereInput
  and: [PosixWhereInput!]
  or: [PosixWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  atime field predicates
  """
  atime: String
  atimeNEQ: String
  atimeIn: [String!]
  atimeNotIn: [String!]
  atimeGT: String
  atimeGTE: String
  atimeLT: String
  atimeLTE: String
  atimeContains: String
  atimeHasPrefix: String
  atimeHasSuffix: String
  atimeEqualFold: String
  atimeContainsFold: String
  """
  ctime field predicates
  """
  ctime: String
  ctimeNEQ: String
  ctimeIn: [String!]
  ctimeNotIn: [String!]
  ctimeGT: String
  ctimeGTE: String
  ctimeLT: String
  ctimeLTE: String
  ctimeContains: String
  ctimeHasPrefix: String
  ctimeHasSuffix: String
  ctimeEqualFold: String
  ctimeContainsFold: String
  """
  creation_time field predicates
  """
  creationTime: String
  creationTimeNEQ: String
  creationTimeIn: [String!]
  creationTimeNotIn: [String!]
  creationTimeGT: String
  creationTimeGTE: String
  creationTimeLT: String
  creationTimeLTE: String
  creationTimeContains: String
  creationTimeHasPrefix: String
  creationTimeHasSuffix: String
  creationTimeEqualFold: String
  creationTimeContainsFold: String
  """
  extended_attributes field predicates
  """
  extendedAttributes: String
  extendedAttributesNEQ: String
  extendedAttributesIn: [String!]
  extendedAttributesNotIn: [String!]
  extendedAttributesGT: String
  extendedAttributesGTE: String
  extendedAttributesLT: String
  extendedAttributesLTE: String
  extendedAttributesContains: String
  extendedAttributesHasPrefix: String
  extendedAttributesHasSuffix: String
  extendedAttributesEqualFold: String
  extendedAttributesContainsFold: String
  """
  file_device_id field predicates
  """
  fileDeviceID: String
  fileDeviceIDNEQ: String
  fileDeviceIDIn: [String!]
  fileDeviceIDNotIn: [String!]
  fileDeviceIDGT: String
  fileDeviceIDGTE: String
  fileDeviceIDLT: String
  fileDeviceIDLTE: String
  fileDeviceIDContains: String
  fileDeviceIDHasPrefix: String
  fileDeviceIDHasSuffix: String
  fileDeviceIDEqualFold: String
  fileDeviceIDContainsFold: String
  """
  file_flags field predicates
  """
  fileFlags: String
  fileFlagsNEQ: String
  fileFlagsIn: [String!]
  fileFlagsNotIn: [String!]
  fileFlagsGT: String
  fileFlagsGTE: String
  fileFlagsLT: String
  fileFlagsLTE: String
  fileFlagsContains: String
  fileFlagsHasPrefix: String
  fileFlagsHasSuffix: String
  fileFlagsEqualFold: String
  fileFlagsContainsFold: String
  """
  file_inode field predicates
  """
  fileInode: String
  fileInodeNEQ: String
  fileInodeIn: [String!]
  fileInodeNotIn: [String!]
  fileInodeGT: String
  fileInodeGTE: String
  fileInodeLT: String
  fileInodeLTE: String
  fileInodeContains: String
  fileInodeHasPrefix: String
  fileInodeHasSuffix: String
  fileInodeEqualFold: String
  fileInodeContainsFold: String
  """
  file_system_id field predicates
  """
  fileSystemID: String
  fileSystemIDNEQ: String
  fileSystemIDIn: [String!]
  fileSystemIDNotIn: [String!]
  fileSystemIDGT: String
  fileSystemIDGTE: String
  fileSystemIDLT: String
  fileSystemIDLTE: String
  fileSystemIDContains: String
  fileSystemIDHasPrefix: String
  fileSystemIDHasSuffix: String
  fileSystemIDEqualFold: String
  fileSystemIDContainsFold: String
  """
  file_type field predicates
  """
  fileType: String
  fileTypeNEQ: String
  fileTypeIn: [String!]
  fileTypeNotIn: [String!]
  fileTypeGT: String
  fileTypeGTE: String
  fileTypeLT: String
  fileTypeLTE: String
  fileTypeContains: String
  fileTypeHasPrefix: String
  fileTypeHasSuffix: String
  fileTypeEqualFold: String
  fileTypeContainsFold: String
  """
  hard_link_count field predicates
  """
  hardLinkCount: String
  hardLinkCountNEQ: String
  hardLinkCountIn: [String!]
  hardLinkCountNotIn: [String!]
  hardLinkCountGT: String
  hardLinkCountGTE: String
  hardLinkCountLT: String
  hardLinkCountLTE: String
  hardLinkCountContains: String
  hardLinkCountHasPrefix: String
  hardLinkCountHasSuffix: String
  hardLinkCountEqualFold: String
  hardLinkCountContainsFold: String
  """
  mtime field predicates
  """
  mtime: String
  mtimeNEQ: String
  mtimeIn: [String!]
  mtimeNotIn: [String!]
  mtimeGT: String
  mtimeGTE: String
  mtimeLT: String
  mtimeLTE: String
  mtimeContains: String
  mtimeHasPrefix: String
  mtimeHasSuffix: String
  mtimeEqualFold: String
  mtimeContainsFold: String
  """
  metadata_ctime field predicates
  """
  metadataCtime: String
  metadataCtimeNEQ: String
  metadataCtimeIn: [String!]
  metadataCtimeNotIn: [String!]
  metadataCtimeGT: String
  metadataCtimeGTE: String
  metadataCtimeLT: String
  metadataCtimeLTE: String
  metadataCtimeContains: String
  metadataCtimeHasPrefix: String
  metadataCtimeHasSuffix: String
  metadataCtimeEqualFold: String
  metadataCtimeContainsFold: String
  """
  owner_gid field predicates
  """
  ownerGid: String
  ownerGidNEQ: String
  ownerGidIn: [String!]
  ownerGidNotIn: [String!]
  ownerGidGT: String
  ownerGidGTE: String
  ownerGidLT: String
  ownerGidLTE: String
  ownerGidContains: String
  ownerGidHasPrefix: String
  ownerGidHasSuffix: String
  ownerGidEqualFold: String
  ownerGidContainsFold: String
  """
  owner_uid field predicates
  """
  ownerUID: String
  ownerUIDNEQ: String
  ownerUIDIn: [String!]
  ownerUIDNotIn: [String!]
  ownerUIDGT: String
  ownerUIDGTE: String
  ownerUIDLT: String
  ownerUIDLTE: String
  ownerUIDContains: String
  ownerUIDHasPrefix: String
  ownerUIDHasSuffix: String
  ownerUIDEqualFold: String
  ownerUIDContainsFold: String
  """
  permissions field predicates
  """
  permissions: String
  permissionsNEQ: String
  permissionsIn: [String!]
  permissionsNotIn: [String!]
  permissionsGT: String
  permissionsGTE: String
  permissionsLT: String
  permissionsLTE: String
  permissionsContains: String
  permissionsHasPrefix: String
  permissionsHasSuffix: String
  permissionsEqualFold: String
  permissionsContainsFold: String
  """
  size field predicates
  """
  size: String
  sizeNEQ: String
  sizeIn: [String!]
  sizeNotIn: [String!]
  sizeGT: String
  sizeGTE: String
  sizeLT: String
  sizeLTE: String
  sizeContains: String
  sizeHasPrefix: String
  sizeHasSuffix: String
  sizeEqualFold: String
  sizeContainsFold: String
  """
  mapping edge predicates
  """
  hasMapping: Boolean
  hasMappingWith: [MappingWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  attestationPolicies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for AttestationPolicies returned from the connection.
    """
    where: AttestationPolicyWhereInput
  ): AttestationPolicyConnection!
  dsses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Dsses returned from the connection.
    """
    where: DsseWhereInput
  ): DsseConnection!
  subjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Subjects returned from the connection.
    """
    where: SubjectWhereInput
  ): SubjectConnection!
}
type Signature implements Node {
  id: ID!
  keyID: String!
  signature: String!
  dsse: Dsse
  timestamps: [Timestamp!]
}
"""
SignatureWhereInput is used for filtering Signature objects.
Input was generated by ent.
"""
input SignatureWhereInput {
  not: SignatureWhereInput
  and: [SignatureWhereInput!]
  or: [SignatureWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  key_id field predicates
  """
  keyID: String
  keyIDNEQ: String
  keyIDIn: [String!]
  keyIDNotIn: [String!]
  keyIDGT: String
  keyIDGTE: String
  keyIDLT: String
  keyIDLTE: String
  keyIDContains: String
  keyIDHasPrefix: String
  keyIDHasSuffix: String
  keyIDEqualFold: String
  keyIDContainsFold: String
  """
  signature field predicates
  """
  signature: String
  signatureNEQ: String
  signatureIn: [String!]
  signatureNotIn: [String!]
  signatureGT: String
  signatureGTE: String
  signatureLT: String
  signatureLTE: String
  signatureContains: String
  signatureHasPrefix: String
  signatureHasSuffix: String
  signatureEqualFold: String
  signatureContainsFold: String
  """
  dsse edge predicates
  """
  hasDsse: Boolean
  hasDsseWith: [DsseWhereInput!]
  """
  timestamps edge predicates
  """
  hasTimestamps: Boolean
  hasTimestampsWith: [TimestampWhereInput!]
}
type Statement implements Node {
  id: ID!
  predicate: String!
  subjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Subjects returned from the connection.
    """
    where: SubjectWhereInput
  ): SubjectConnection!
  policy: AttestationPolicy
  attestationCollections: AttestationCollection
  dsse: [Dsse!]
}
"""
StatementWhereInput is used for filtering Statement objects.
Input was generated by ent.
"""
input StatementWhereInput {
  not: StatementWhereInput
  and: [StatementWhereInput!]
  or: [StatementWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  predicate field predicates
  """
  predicate: String
  predicateNEQ: String
  predicateIn: [String!]
  predicateNotIn: [String!]
  predicateGT: String
  predicateGTE: String
  predicateLT: String
  predicateLTE: String
  predicateContains: String
  predicateHasPrefix: String
  predicateHasSuffix: String
  predicateEqualFold: String
  predicateContainsFold: String
  """
  subjects edge predicates
  """
  hasSubjects: Boolean
  hasSubjectsWith: [SubjectWhereInput!]
  """
  policy edge predicates
  """
  hasPolicy: Boolean
  hasPolicyWith: [AttestationPolicyWhereInput!]
  """
  attestation_collections edge predicates
  """
  hasAttestationCollections: Boolean
  hasAttestationCollectionsWith: [AttestationCollectionWhereInput!]
  """
  dsse edge predicates
  """
  hasDsse: Boolean
  hasDsseWith: [DsseWhereInput!]
}
type Subject implements Node {
  id: ID!
  name: String!
  subjectDigests: [SubjectDigest!]
  statement: Statement
}
"""
A connection to a list of items.
"""
type SubjectConnection {
  """
  A list of edges.
  """
  edges: [SubjectEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
type SubjectDigest implements Node {
  id: ID!
  algorithm: String!
  value: String!
  subject: Subject
}
"""
SubjectDigestWhereInput is used for filtering SubjectDigest objects.
Input was generated by ent.
"""
input SubjectDigestWhereInput {
  not: SubjectDigestWhereInput
  and: [SubjectDigestWhereInput!]
  or: [SubjectDigestWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  algorithm field predicates
  """
  algorithm: String
  algorithmNEQ: String
  algorithmIn: [String!]
  algorithmNotIn: [String!]
  algorithmGT: String
  algorithmGTE: String
  algorithmLT: String
  algorithmLTE: String
  algorithmContains: String
  algorithmHasPrefix: String
  algorithmHasSuffix: String
  algorithmEqualFold: String
  algorithmContainsFold: String
  """
  value field predicates
  """
  value: String
  valueNEQ: String
  valueIn: [String!]
  valueNotIn: [String!]
  valueGT: String
  valueGTE: String
  valueLT: String
  valueLTE: String
  valueContains: String
  valueHasPrefix: String
  valueHasSuffix: String
  valueEqualFold: String
  valueContainsFold: String
  """
  subject edge predicates
  """
  hasSubject: Boolean
  hasSubjectWith: [SubjectWhereInput!]
}
"""
An edge in a connection.
"""
type SubjectEdge {
  """
  The item at the end of the edge.
  """
  node: Subject
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
SubjectWhereInput is used for filtering Subject objects.
Input was generated by ent.
"""
input SubjectWhereInput {
  not: SubjectWhereInput
  and: [SubjectWhereInput!]
  or: [SubjectWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  subject_digests edge predicates
  """
  hasSubjectDigests: Boolean
  hasSubjectDigestsWith: [SubjectDigestWhereInput!]
  """
  statement edge predicates
  """
  hasStatement: Boolean
  hasStatementWith: [StatementWhereInput!]
}
type Timestamp implements Node {
  id: ID!
  type: String!
  timestamp: Time!
  signature: Signature
}
"""
TimestampWhereInput is used for filtering Timestamp objects.
Input was generated by ent.
"""
input TimestampWhereInput {
  not: TimestampWhereInput
  and: [TimestampWhereInput!]
  or: [TimestampWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  type field predicates
  """
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """
  timestamp field predicates
  """
  timestamp: Time
  timestampNEQ: Time
  timestampIn: [Time!]
  timestampNotIn: [Time!]
  timestampGT: Time
  timestampGTE: Time
  timestampLT: Time
  timestampLTE: Time
  """
  signature edge predicates
  """
  hasSignature: Boolean
  hasSignatureWith: [SignatureWhereInput!]
}
