// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/testifysec/archivist/ent/predicate"
	"github.com/testifysec/archivist/ent/subject"
	"github.com/testifysec/archivist/ent/subjectdigest"
)

// SubjectDigestUpdate is the builder for updating SubjectDigest entities.
type SubjectDigestUpdate struct {
	config
	hooks    []Hook
	mutation *SubjectDigestMutation
}

// Where appends a list predicates to the SubjectDigestUpdate builder.
func (sdu *SubjectDigestUpdate) Where(ps ...predicate.SubjectDigest) *SubjectDigestUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetAlgorithm sets the "algorithm" field.
func (sdu *SubjectDigestUpdate) SetAlgorithm(s string) *SubjectDigestUpdate {
	sdu.mutation.SetAlgorithm(s)
	return sdu
}

// SetValue sets the "value" field.
func (sdu *SubjectDigestUpdate) SetValue(s string) *SubjectDigestUpdate {
	sdu.mutation.SetValue(s)
	return sdu
}

// SetSubjectID sets the "subject" edge to the Subject entity by ID.
func (sdu *SubjectDigestUpdate) SetSubjectID(id int) *SubjectDigestUpdate {
	sdu.mutation.SetSubjectID(id)
	return sdu
}

// SetNillableSubjectID sets the "subject" edge to the Subject entity by ID if the given value is not nil.
func (sdu *SubjectDigestUpdate) SetNillableSubjectID(id *int) *SubjectDigestUpdate {
	if id != nil {
		sdu = sdu.SetSubjectID(*id)
	}
	return sdu
}

// SetSubject sets the "subject" edge to the Subject entity.
func (sdu *SubjectDigestUpdate) SetSubject(s *Subject) *SubjectDigestUpdate {
	return sdu.SetSubjectID(s.ID)
}

// Mutation returns the SubjectDigestMutation object of the builder.
func (sdu *SubjectDigestUpdate) Mutation() *SubjectDigestMutation {
	return sdu.mutation
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (sdu *SubjectDigestUpdate) ClearSubject() *SubjectDigestUpdate {
	sdu.mutation.ClearSubject()
	return sdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *SubjectDigestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sdu.hooks) == 0 {
		if err = sdu.check(); err != nil {
			return 0, err
		}
		affected, err = sdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectDigestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sdu.check(); err != nil {
				return 0, err
			}
			sdu.mutation = mutation
			affected, err = sdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sdu.hooks) - 1; i >= 0; i-- {
			if sdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *SubjectDigestUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *SubjectDigestUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *SubjectDigestUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdu *SubjectDigestUpdate) check() error {
	if v, ok := sdu.mutation.Algorithm(); ok {
		if err := subjectdigest.AlgorithmValidator(v); err != nil {
			return &ValidationError{Name: "algorithm", err: fmt.Errorf(`ent: validator failed for field "SubjectDigest.algorithm": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.Value(); ok {
		if err := subjectdigest.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "SubjectDigest.value": %w`, err)}
		}
	}
	return nil
}

func (sdu *SubjectDigestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subjectdigest.Table,
			Columns: subjectdigest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subjectdigest.FieldID,
			},
		},
	}
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.Algorithm(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subjectdigest.FieldAlgorithm,
		})
	}
	if value, ok := sdu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subjectdigest.FieldValue,
		})
	}
	if sdu.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectdigest.SubjectTable,
			Columns: []string{subjectdigest.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectdigest.SubjectTable,
			Columns: []string{subjectdigest.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjectdigest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SubjectDigestUpdateOne is the builder for updating a single SubjectDigest entity.
type SubjectDigestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubjectDigestMutation
}

// SetAlgorithm sets the "algorithm" field.
func (sduo *SubjectDigestUpdateOne) SetAlgorithm(s string) *SubjectDigestUpdateOne {
	sduo.mutation.SetAlgorithm(s)
	return sduo
}

// SetValue sets the "value" field.
func (sduo *SubjectDigestUpdateOne) SetValue(s string) *SubjectDigestUpdateOne {
	sduo.mutation.SetValue(s)
	return sduo
}

// SetSubjectID sets the "subject" edge to the Subject entity by ID.
func (sduo *SubjectDigestUpdateOne) SetSubjectID(id int) *SubjectDigestUpdateOne {
	sduo.mutation.SetSubjectID(id)
	return sduo
}

// SetNillableSubjectID sets the "subject" edge to the Subject entity by ID if the given value is not nil.
func (sduo *SubjectDigestUpdateOne) SetNillableSubjectID(id *int) *SubjectDigestUpdateOne {
	if id != nil {
		sduo = sduo.SetSubjectID(*id)
	}
	return sduo
}

// SetSubject sets the "subject" edge to the Subject entity.
func (sduo *SubjectDigestUpdateOne) SetSubject(s *Subject) *SubjectDigestUpdateOne {
	return sduo.SetSubjectID(s.ID)
}

// Mutation returns the SubjectDigestMutation object of the builder.
func (sduo *SubjectDigestUpdateOne) Mutation() *SubjectDigestMutation {
	return sduo.mutation
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (sduo *SubjectDigestUpdateOne) ClearSubject() *SubjectDigestUpdateOne {
	sduo.mutation.ClearSubject()
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *SubjectDigestUpdateOne) Select(field string, fields ...string) *SubjectDigestUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated SubjectDigest entity.
func (sduo *SubjectDigestUpdateOne) Save(ctx context.Context) (*SubjectDigest, error) {
	var (
		err  error
		node *SubjectDigest
	)
	if len(sduo.hooks) == 0 {
		if err = sduo.check(); err != nil {
			return nil, err
		}
		node, err = sduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectDigestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sduo.check(); err != nil {
				return nil, err
			}
			sduo.mutation = mutation
			node, err = sduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sduo.hooks) - 1; i >= 0; i-- {
			if sduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SubjectDigest)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SubjectDigestMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *SubjectDigestUpdateOne) SaveX(ctx context.Context) *SubjectDigest {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *SubjectDigestUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *SubjectDigestUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sduo *SubjectDigestUpdateOne) check() error {
	if v, ok := sduo.mutation.Algorithm(); ok {
		if err := subjectdigest.AlgorithmValidator(v); err != nil {
			return &ValidationError{Name: "algorithm", err: fmt.Errorf(`ent: validator failed for field "SubjectDigest.algorithm": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.Value(); ok {
		if err := subjectdigest.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "SubjectDigest.value": %w`, err)}
		}
	}
	return nil
}

func (sduo *SubjectDigestUpdateOne) sqlSave(ctx context.Context) (_node *SubjectDigest, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subjectdigest.Table,
			Columns: subjectdigest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subjectdigest.FieldID,
			},
		},
	}
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubjectDigest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subjectdigest.FieldID)
		for _, f := range fields {
			if !subjectdigest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subjectdigest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.Algorithm(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subjectdigest.FieldAlgorithm,
		})
	}
	if value, ok := sduo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subjectdigest.FieldValue,
		})
	}
	if sduo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectdigest.SubjectTable,
			Columns: []string{subjectdigest.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectdigest.SubjectTable,
			Columns: []string{subjectdigest.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubjectDigest{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjectdigest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
