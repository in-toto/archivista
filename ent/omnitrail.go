// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/attestation"
	"github.com/in-toto/archivista/ent/omnitrail"
)

// Omnitrail is the model entity for the Omnitrail schema.
type Omnitrail struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OmnitrailQuery when eager-loading is set.
	Edges                 OmnitrailEdges `json:"edges"`
	attestation_omnitrail *uuid.UUID
	selectValues          sql.SelectValues
}

// OmnitrailEdges holds the relations/edges for other nodes in the graph.
type OmnitrailEdges struct {
	// Mappings holds the value of the mappings edge.
	Mappings []*Mapping `json:"mappings,omitempty"`
	// Attestation holds the value of the attestation edge.
	Attestation *Attestation `json:"attestation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedMappings map[string][]*Mapping
}

// MappingsOrErr returns the Mappings value or an error if the edge
// was not loaded in eager-loading.
func (e OmnitrailEdges) MappingsOrErr() ([]*Mapping, error) {
	if e.loadedTypes[0] {
		return e.Mappings, nil
	}
	return nil, &NotLoadedError{edge: "mappings"}
}

// AttestationOrErr returns the Attestation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OmnitrailEdges) AttestationOrErr() (*Attestation, error) {
	if e.Attestation != nil {
		return e.Attestation, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: attestation.Label}
	}
	return nil, &NotLoadedError{edge: "attestation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Omnitrail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case omnitrail.FieldID:
			values[i] = new(uuid.UUID)
		case omnitrail.ForeignKeys[0]: // attestation_omnitrail
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Omnitrail fields.
func (o *Omnitrail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case omnitrail.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case omnitrail.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field attestation_omnitrail", values[i])
			} else if value.Valid {
				o.attestation_omnitrail = new(uuid.UUID)
				*o.attestation_omnitrail = *value.S.(*uuid.UUID)
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Omnitrail.
// This includes values selected through modifiers, order, etc.
func (o *Omnitrail) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryMappings queries the "mappings" edge of the Omnitrail entity.
func (o *Omnitrail) QueryMappings() *MappingQuery {
	return NewOmnitrailClient(o.config).QueryMappings(o)
}

// QueryAttestation queries the "attestation" edge of the Omnitrail entity.
func (o *Omnitrail) QueryAttestation() *AttestationQuery {
	return NewOmnitrailClient(o.config).QueryAttestation(o)
}

// Update returns a builder for updating this Omnitrail.
// Note that you need to call Omnitrail.Unwrap() before calling this method if this Omnitrail
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Omnitrail) Update() *OmnitrailUpdateOne {
	return NewOmnitrailClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Omnitrail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Omnitrail) Unwrap() *Omnitrail {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Omnitrail is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Omnitrail) String() string {
	var builder strings.Builder
	builder.WriteString("Omnitrail(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedMappings returns the Mappings named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Omnitrail) NamedMappings(name string) ([]*Mapping, error) {
	if o.Edges.namedMappings == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedMappings[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Omnitrail) appendNamedMappings(name string, edges ...*Mapping) {
	if o.Edges.namedMappings == nil {
		o.Edges.namedMappings = make(map[string][]*Mapping)
	}
	if len(edges) == 0 {
		o.Edges.namedMappings[name] = []*Mapping{}
	} else {
		o.Edges.namedMappings[name] = append(o.Edges.namedMappings[name], edges...)
	}
}

// Omnitrails is a parsable slice of Omnitrail.
type Omnitrails []*Omnitrail
