// Code generated by ent, DO NOT EDIT.

package subject

const (
	// Label holds the string label denoting the subject type in the database.
	Label = "subject"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeSubjectDigests holds the string denoting the subject_digests edge name in mutations.
	EdgeSubjectDigests = "subject_digests"
	// EdgeStatement holds the string denoting the statement edge name in mutations.
	EdgeStatement = "statement"
	// Table holds the table name of the subject in the database.
	Table = "subjects"
	// SubjectDigestsTable is the table that holds the subject_digests relation/edge.
	SubjectDigestsTable = "subject_digests"
	// SubjectDigestsInverseTable is the table name for the SubjectDigest entity.
	// It exists in this package in order to avoid circular dependency with the "subjectdigest" package.
	SubjectDigestsInverseTable = "subject_digests"
	// SubjectDigestsColumn is the table column denoting the subject_digests relation/edge.
	SubjectDigestsColumn = "subject_subject_digests"
	// StatementTable is the table that holds the statement relation/edge.
	StatementTable = "subjects"
	// StatementInverseTable is the table name for the Statement entity.
	// It exists in this package in order to avoid circular dependency with the "statement" package.
	StatementInverseTable = "statements"
	// StatementColumn is the table column denoting the statement relation/edge.
	StatementColumn = "statement_subjects"
)

// Columns holds all SQL columns for subject fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "subjects"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"statement_subjects",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
