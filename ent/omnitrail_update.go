// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/attestation"
	"github.com/in-toto/archivista/ent/mapping"
	"github.com/in-toto/archivista/ent/omnitrail"
	"github.com/in-toto/archivista/ent/predicate"
)

// OmnitrailUpdate is the builder for updating Omnitrail entities.
type OmnitrailUpdate struct {
	config
	hooks    []Hook
	mutation *OmnitrailMutation
}

// Where appends a list predicates to the OmnitrailUpdate builder.
func (ou *OmnitrailUpdate) Where(ps ...predicate.Omnitrail) *OmnitrailUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// AddMappingIDs adds the "mappings" edge to the Mapping entity by IDs.
func (ou *OmnitrailUpdate) AddMappingIDs(ids ...uuid.UUID) *OmnitrailUpdate {
	ou.mutation.AddMappingIDs(ids...)
	return ou
}

// AddMappings adds the "mappings" edges to the Mapping entity.
func (ou *OmnitrailUpdate) AddMappings(m ...*Mapping) *OmnitrailUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ou.AddMappingIDs(ids...)
}

// SetAttestationID sets the "attestation" edge to the Attestation entity by ID.
func (ou *OmnitrailUpdate) SetAttestationID(id uuid.UUID) *OmnitrailUpdate {
	ou.mutation.SetAttestationID(id)
	return ou
}

// SetAttestation sets the "attestation" edge to the Attestation entity.
func (ou *OmnitrailUpdate) SetAttestation(a *Attestation) *OmnitrailUpdate {
	return ou.SetAttestationID(a.ID)
}

// Mutation returns the OmnitrailMutation object of the builder.
func (ou *OmnitrailUpdate) Mutation() *OmnitrailMutation {
	return ou.mutation
}

// ClearMappings clears all "mappings" edges to the Mapping entity.
func (ou *OmnitrailUpdate) ClearMappings() *OmnitrailUpdate {
	ou.mutation.ClearMappings()
	return ou
}

// RemoveMappingIDs removes the "mappings" edge to Mapping entities by IDs.
func (ou *OmnitrailUpdate) RemoveMappingIDs(ids ...uuid.UUID) *OmnitrailUpdate {
	ou.mutation.RemoveMappingIDs(ids...)
	return ou
}

// RemoveMappings removes "mappings" edges to Mapping entities.
func (ou *OmnitrailUpdate) RemoveMappings(m ...*Mapping) *OmnitrailUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ou.RemoveMappingIDs(ids...)
}

// ClearAttestation clears the "attestation" edge to the Attestation entity.
func (ou *OmnitrailUpdate) ClearAttestation() *OmnitrailUpdate {
	ou.mutation.ClearAttestation()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OmnitrailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OmnitrailUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OmnitrailUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OmnitrailUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OmnitrailUpdate) check() error {
	if _, ok := ou.mutation.AttestationID(); ou.mutation.AttestationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Omnitrail.attestation"`)
	}
	return nil
}

func (ou *OmnitrailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(omnitrail.Table, omnitrail.Columns, sqlgraph.NewFieldSpec(omnitrail.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ou.mutation.MappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   omnitrail.MappingsTable,
			Columns: []string{omnitrail.MappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapping.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedMappingsIDs(); len(nodes) > 0 && !ou.mutation.MappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   omnitrail.MappingsTable,
			Columns: []string{omnitrail.MappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapping.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.MappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   omnitrail.MappingsTable,
			Columns: []string{omnitrail.MappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapping.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.AttestationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   omnitrail.AttestationTable,
			Columns: []string{omnitrail.AttestationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.AttestationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   omnitrail.AttestationTable,
			Columns: []string{omnitrail.AttestationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{omnitrail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OmnitrailUpdateOne is the builder for updating a single Omnitrail entity.
type OmnitrailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OmnitrailMutation
}

// AddMappingIDs adds the "mappings" edge to the Mapping entity by IDs.
func (ouo *OmnitrailUpdateOne) AddMappingIDs(ids ...uuid.UUID) *OmnitrailUpdateOne {
	ouo.mutation.AddMappingIDs(ids...)
	return ouo
}

// AddMappings adds the "mappings" edges to the Mapping entity.
func (ouo *OmnitrailUpdateOne) AddMappings(m ...*Mapping) *OmnitrailUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ouo.AddMappingIDs(ids...)
}

// SetAttestationID sets the "attestation" edge to the Attestation entity by ID.
func (ouo *OmnitrailUpdateOne) SetAttestationID(id uuid.UUID) *OmnitrailUpdateOne {
	ouo.mutation.SetAttestationID(id)
	return ouo
}

// SetAttestation sets the "attestation" edge to the Attestation entity.
func (ouo *OmnitrailUpdateOne) SetAttestation(a *Attestation) *OmnitrailUpdateOne {
	return ouo.SetAttestationID(a.ID)
}

// Mutation returns the OmnitrailMutation object of the builder.
func (ouo *OmnitrailUpdateOne) Mutation() *OmnitrailMutation {
	return ouo.mutation
}

// ClearMappings clears all "mappings" edges to the Mapping entity.
func (ouo *OmnitrailUpdateOne) ClearMappings() *OmnitrailUpdateOne {
	ouo.mutation.ClearMappings()
	return ouo
}

// RemoveMappingIDs removes the "mappings" edge to Mapping entities by IDs.
func (ouo *OmnitrailUpdateOne) RemoveMappingIDs(ids ...uuid.UUID) *OmnitrailUpdateOne {
	ouo.mutation.RemoveMappingIDs(ids...)
	return ouo
}

// RemoveMappings removes "mappings" edges to Mapping entities.
func (ouo *OmnitrailUpdateOne) RemoveMappings(m ...*Mapping) *OmnitrailUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ouo.RemoveMappingIDs(ids...)
}

// ClearAttestation clears the "attestation" edge to the Attestation entity.
func (ouo *OmnitrailUpdateOne) ClearAttestation() *OmnitrailUpdateOne {
	ouo.mutation.ClearAttestation()
	return ouo
}

// Where appends a list predicates to the OmnitrailUpdate builder.
func (ouo *OmnitrailUpdateOne) Where(ps ...predicate.Omnitrail) *OmnitrailUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OmnitrailUpdateOne) Select(field string, fields ...string) *OmnitrailUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Omnitrail entity.
func (ouo *OmnitrailUpdateOne) Save(ctx context.Context) (*Omnitrail, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OmnitrailUpdateOne) SaveX(ctx context.Context) *Omnitrail {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OmnitrailUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OmnitrailUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OmnitrailUpdateOne) check() error {
	if _, ok := ouo.mutation.AttestationID(); ouo.mutation.AttestationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Omnitrail.attestation"`)
	}
	return nil
}

func (ouo *OmnitrailUpdateOne) sqlSave(ctx context.Context) (_node *Omnitrail, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(omnitrail.Table, omnitrail.Columns, sqlgraph.NewFieldSpec(omnitrail.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Omnitrail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, omnitrail.FieldID)
		for _, f := range fields {
			if !omnitrail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != omnitrail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ouo.mutation.MappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   omnitrail.MappingsTable,
			Columns: []string{omnitrail.MappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapping.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedMappingsIDs(); len(nodes) > 0 && !ouo.mutation.MappingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   omnitrail.MappingsTable,
			Columns: []string{omnitrail.MappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapping.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.MappingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   omnitrail.MappingsTable,
			Columns: []string{omnitrail.MappingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapping.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.AttestationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   omnitrail.AttestationTable,
			Columns: []string{omnitrail.AttestationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.AttestationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   omnitrail.AttestationTable,
			Columns: []string{omnitrail.AttestationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Omnitrail{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{omnitrail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
