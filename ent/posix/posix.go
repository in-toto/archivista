// Code generated by ent, DO NOT EDIT.

package posix

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the posix type in the database.
	Label = "posix"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAtime holds the string denoting the atime field in the database.
	FieldAtime = "atime"
	// FieldCtime holds the string denoting the ctime field in the database.
	FieldCtime = "ctime"
	// FieldCreationTime holds the string denoting the creation_time field in the database.
	FieldCreationTime = "creation_time"
	// FieldExtendedAttributes holds the string denoting the extended_attributes field in the database.
	FieldExtendedAttributes = "extended_attributes"
	// FieldFileDeviceID holds the string denoting the file_device_id field in the database.
	FieldFileDeviceID = "file_device_id"
	// FieldFileFlags holds the string denoting the file_flags field in the database.
	FieldFileFlags = "file_flags"
	// FieldFileInode holds the string denoting the file_inode field in the database.
	FieldFileInode = "file_inode"
	// FieldFileSystemID holds the string denoting the file_system_id field in the database.
	FieldFileSystemID = "file_system_id"
	// FieldFileType holds the string denoting the file_type field in the database.
	FieldFileType = "file_type"
	// FieldHardLinkCount holds the string denoting the hard_link_count field in the database.
	FieldHardLinkCount = "hard_link_count"
	// FieldMtime holds the string denoting the mtime field in the database.
	FieldMtime = "mtime"
	// FieldMetadataCtime holds the string denoting the metadata_ctime field in the database.
	FieldMetadataCtime = "metadata_ctime"
	// FieldOwnerGid holds the string denoting the owner_gid field in the database.
	FieldOwnerGid = "owner_gid"
	// FieldOwnerUID holds the string denoting the owner_uid field in the database.
	FieldOwnerUID = "owner_uid"
	// FieldPermissions holds the string denoting the permissions field in the database.
	FieldPermissions = "permissions"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// EdgeMapping holds the string denoting the mapping edge name in mutations.
	EdgeMapping = "mapping"
	// Table holds the table name of the posix in the database.
	Table = "posixes"
	// MappingTable is the table that holds the mapping relation/edge.
	MappingTable = "posixes"
	// MappingInverseTable is the table name for the Mapping entity.
	// It exists in this package in order to avoid circular dependency with the "mapping" package.
	MappingInverseTable = "mappings"
	// MappingColumn is the table column denoting the mapping relation/edge.
	MappingColumn = "mapping_posix"
)

// Columns holds all SQL columns for posix fields.
var Columns = []string{
	FieldID,
	FieldAtime,
	FieldCtime,
	FieldCreationTime,
	FieldExtendedAttributes,
	FieldFileDeviceID,
	FieldFileFlags,
	FieldFileInode,
	FieldFileSystemID,
	FieldFileType,
	FieldHardLinkCount,
	FieldMtime,
	FieldMetadataCtime,
	FieldOwnerGid,
	FieldOwnerUID,
	FieldPermissions,
	FieldSize,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "posixes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"mapping_posix",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Posix queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAtime orders the results by the atime field.
func ByAtime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAtime, opts...).ToFunc()
}

// ByCtime orders the results by the ctime field.
func ByCtime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCtime, opts...).ToFunc()
}

// ByCreationTime orders the results by the creation_time field.
func ByCreationTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreationTime, opts...).ToFunc()
}

// ByExtendedAttributes orders the results by the extended_attributes field.
func ByExtendedAttributes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtendedAttributes, opts...).ToFunc()
}

// ByFileDeviceID orders the results by the file_device_id field.
func ByFileDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileDeviceID, opts...).ToFunc()
}

// ByFileFlags orders the results by the file_flags field.
func ByFileFlags(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileFlags, opts...).ToFunc()
}

// ByFileInode orders the results by the file_inode field.
func ByFileInode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileInode, opts...).ToFunc()
}

// ByFileSystemID orders the results by the file_system_id field.
func ByFileSystemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileSystemID, opts...).ToFunc()
}

// ByFileType orders the results by the file_type field.
func ByFileType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileType, opts...).ToFunc()
}

// ByHardLinkCount orders the results by the hard_link_count field.
func ByHardLinkCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHardLinkCount, opts...).ToFunc()
}

// ByMtime orders the results by the mtime field.
func ByMtime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMtime, opts...).ToFunc()
}

// ByMetadataCtime orders the results by the metadata_ctime field.
func ByMetadataCtime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadataCtime, opts...).ToFunc()
}

// ByOwnerGid orders the results by the owner_gid field.
func ByOwnerGid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerGid, opts...).ToFunc()
}

// ByOwnerUID orders the results by the owner_uid field.
func ByOwnerUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerUID, opts...).ToFunc()
}

// ByPermissions orders the results by the permissions field.
func ByPermissions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermissions, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByMappingField orders the results by mapping field.
func ByMappingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMappingStep(), sql.OrderByField(field, opts...))
	}
}
func newMappingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MappingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MappingTable, MappingColumn),
	)
}
