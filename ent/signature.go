// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/dsse"
	"github.com/in-toto/archivista/ent/signature"
)

// Signature is the model entity for the Signature schema.
type Signature struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// KeyID holds the value of the "key_id" field.
	KeyID string `json:"key_id,omitempty"`
	// Signature holds the value of the "signature" field.
	Signature string `json:"signature,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SignatureQuery when eager-loading is set.
	Edges           SignatureEdges `json:"edges"`
	dsse_signatures *uuid.UUID
	selectValues    sql.SelectValues
}

// SignatureEdges holds the relations/edges for other nodes in the graph.
type SignatureEdges struct {
	// Dsse holds the value of the dsse edge.
	Dsse *Dsse `json:"dsse,omitempty"`
	// Timestamps holds the value of the timestamps edge.
	Timestamps []*Timestamp `json:"timestamps,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedTimestamps map[string][]*Timestamp
}

// DsseOrErr returns the Dsse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SignatureEdges) DsseOrErr() (*Dsse, error) {
	if e.Dsse != nil {
		return e.Dsse, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: dsse.Label}
	}
	return nil, &NotLoadedError{edge: "dsse"}
}

// TimestampsOrErr returns the Timestamps value or an error if the edge
// was not loaded in eager-loading.
func (e SignatureEdges) TimestampsOrErr() ([]*Timestamp, error) {
	if e.loadedTypes[1] {
		return e.Timestamps, nil
	}
	return nil, &NotLoadedError{edge: "timestamps"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Signature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case signature.FieldKeyID, signature.FieldSignature:
			values[i] = new(sql.NullString)
		case signature.FieldID:
			values[i] = new(uuid.UUID)
		case signature.ForeignKeys[0]: // dsse_signatures
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Signature fields.
func (_m *Signature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case signature.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case signature.FieldKeyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key_id", values[i])
			} else if value.Valid {
				_m.KeyID = value.String
			}
		case signature.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field signature", values[i])
			} else if value.Valid {
				_m.Signature = value.String
			}
		case signature.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field dsse_signatures", values[i])
			} else if value.Valid {
				_m.dsse_signatures = new(uuid.UUID)
				*_m.dsse_signatures = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Signature.
// This includes values selected through modifiers, order, etc.
func (_m *Signature) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDsse queries the "dsse" edge of the Signature entity.
func (_m *Signature) QueryDsse() *DsseQuery {
	return NewSignatureClient(_m.config).QueryDsse(_m)
}

// QueryTimestamps queries the "timestamps" edge of the Signature entity.
func (_m *Signature) QueryTimestamps() *TimestampQuery {
	return NewSignatureClient(_m.config).QueryTimestamps(_m)
}

// Update returns a builder for updating this Signature.
// Note that you need to call Signature.Unwrap() before calling this method if this Signature
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Signature) Update() *SignatureUpdateOne {
	return NewSignatureClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Signature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Signature) Unwrap() *Signature {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Signature is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Signature) String() string {
	var builder strings.Builder
	builder.WriteString("Signature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("key_id=")
	builder.WriteString(_m.KeyID)
	builder.WriteString(", ")
	builder.WriteString("signature=")
	builder.WriteString(_m.Signature)
	builder.WriteByte(')')
	return builder.String()
}

// NamedTimestamps returns the Timestamps named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Signature) NamedTimestamps(name string) ([]*Timestamp, error) {
	if _m.Edges.namedTimestamps == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTimestamps[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Signature) appendNamedTimestamps(name string, edges ...*Timestamp) {
	if _m.Edges.namedTimestamps == nil {
		_m.Edges.namedTimestamps = make(map[string][]*Timestamp)
	}
	if len(edges) == 0 {
		_m.Edges.namedTimestamps[name] = []*Timestamp{}
	} else {
		_m.Edges.namedTimestamps[name] = append(_m.Edges.namedTimestamps[name], edges...)
	}
}

// Signatures is a parsable slice of Signature.
type Signatures []*Signature
