// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/in-toto/archivista/ent/attestationpolicy"
	"github.com/in-toto/archivista/ent/predicate"
	"github.com/in-toto/archivista/ent/statement"
)

// AttestationPolicyUpdate is the builder for updating AttestationPolicy entities.
type AttestationPolicyUpdate struct {
	config
	hooks    []Hook
	mutation *AttestationPolicyMutation
}

// Where appends a list predicates to the AttestationPolicyUpdate builder.
func (apu *AttestationPolicyUpdate) Where(ps ...predicate.AttestationPolicy) *AttestationPolicyUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetName sets the "name" field.
func (apu *AttestationPolicyUpdate) SetName(s string) *AttestationPolicyUpdate {
	apu.mutation.SetName(s)
	return apu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (apu *AttestationPolicyUpdate) SetNillableName(s *string) *AttestationPolicyUpdate {
	if s != nil {
		apu.SetName(*s)
	}
	return apu
}

// SetStatementID sets the "statement" edge to the Statement entity by ID.
func (apu *AttestationPolicyUpdate) SetStatementID(id int) *AttestationPolicyUpdate {
	apu.mutation.SetStatementID(id)
	return apu
}

// SetNillableStatementID sets the "statement" edge to the Statement entity by ID if the given value is not nil.
func (apu *AttestationPolicyUpdate) SetNillableStatementID(id *int) *AttestationPolicyUpdate {
	if id != nil {
		apu = apu.SetStatementID(*id)
	}
	return apu
}

// SetStatement sets the "statement" edge to the Statement entity.
func (apu *AttestationPolicyUpdate) SetStatement(s *Statement) *AttestationPolicyUpdate {
	return apu.SetStatementID(s.ID)
}

// Mutation returns the AttestationPolicyMutation object of the builder.
func (apu *AttestationPolicyUpdate) Mutation() *AttestationPolicyMutation {
	return apu.mutation
}

// ClearStatement clears the "statement" edge to the Statement entity.
func (apu *AttestationPolicyUpdate) ClearStatement() *AttestationPolicyUpdate {
	apu.mutation.ClearStatement()
	return apu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AttestationPolicyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, apu.sqlSave, apu.mutation, apu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AttestationPolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AttestationPolicyUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AttestationPolicyUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apu *AttestationPolicyUpdate) check() error {
	if v, ok := apu.mutation.Name(); ok {
		if err := attestationpolicy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AttestationPolicy.name": %w`, err)}
		}
	}
	return nil
}

func (apu *AttestationPolicyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := apu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attestationpolicy.Table, attestationpolicy.Columns, sqlgraph.NewFieldSpec(attestationpolicy.FieldID, field.TypeInt))
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.Name(); ok {
		_spec.SetField(attestationpolicy.FieldName, field.TypeString, value)
	}
	if apu.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   attestationpolicy.StatementTable,
			Columns: []string{attestationpolicy.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   attestationpolicy.StatementTable,
			Columns: []string{attestationpolicy.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attestationpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	apu.mutation.done = true
	return n, nil
}

// AttestationPolicyUpdateOne is the builder for updating a single AttestationPolicy entity.
type AttestationPolicyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttestationPolicyMutation
}

// SetName sets the "name" field.
func (apuo *AttestationPolicyUpdateOne) SetName(s string) *AttestationPolicyUpdateOne {
	apuo.mutation.SetName(s)
	return apuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (apuo *AttestationPolicyUpdateOne) SetNillableName(s *string) *AttestationPolicyUpdateOne {
	if s != nil {
		apuo.SetName(*s)
	}
	return apuo
}

// SetStatementID sets the "statement" edge to the Statement entity by ID.
func (apuo *AttestationPolicyUpdateOne) SetStatementID(id int) *AttestationPolicyUpdateOne {
	apuo.mutation.SetStatementID(id)
	return apuo
}

// SetNillableStatementID sets the "statement" edge to the Statement entity by ID if the given value is not nil.
func (apuo *AttestationPolicyUpdateOne) SetNillableStatementID(id *int) *AttestationPolicyUpdateOne {
	if id != nil {
		apuo = apuo.SetStatementID(*id)
	}
	return apuo
}

// SetStatement sets the "statement" edge to the Statement entity.
func (apuo *AttestationPolicyUpdateOne) SetStatement(s *Statement) *AttestationPolicyUpdateOne {
	return apuo.SetStatementID(s.ID)
}

// Mutation returns the AttestationPolicyMutation object of the builder.
func (apuo *AttestationPolicyUpdateOne) Mutation() *AttestationPolicyMutation {
	return apuo.mutation
}

// ClearStatement clears the "statement" edge to the Statement entity.
func (apuo *AttestationPolicyUpdateOne) ClearStatement() *AttestationPolicyUpdateOne {
	apuo.mutation.ClearStatement()
	return apuo
}

// Where appends a list predicates to the AttestationPolicyUpdate builder.
func (apuo *AttestationPolicyUpdateOne) Where(ps ...predicate.AttestationPolicy) *AttestationPolicyUpdateOne {
	apuo.mutation.Where(ps...)
	return apuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AttestationPolicyUpdateOne) Select(field string, fields ...string) *AttestationPolicyUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AttestationPolicy entity.
func (apuo *AttestationPolicyUpdateOne) Save(ctx context.Context) (*AttestationPolicy, error) {
	return withHooks(ctx, apuo.sqlSave, apuo.mutation, apuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AttestationPolicyUpdateOne) SaveX(ctx context.Context) *AttestationPolicy {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AttestationPolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AttestationPolicyUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apuo *AttestationPolicyUpdateOne) check() error {
	if v, ok := apuo.mutation.Name(); ok {
		if err := attestationpolicy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AttestationPolicy.name": %w`, err)}
		}
	}
	return nil
}

func (apuo *AttestationPolicyUpdateOne) sqlSave(ctx context.Context) (_node *AttestationPolicy, err error) {
	if err := apuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attestationpolicy.Table, attestationpolicy.Columns, sqlgraph.NewFieldSpec(attestationpolicy.FieldID, field.TypeInt))
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttestationPolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attestationpolicy.FieldID)
		for _, f := range fields {
			if !attestationpolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attestationpolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.Name(); ok {
		_spec.SetField(attestationpolicy.FieldName, field.TypeString, value)
	}
	if apuo.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   attestationpolicy.StatementTable,
			Columns: []string{attestationpolicy.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   attestationpolicy.StatementTable,
			Columns: []string{attestationpolicy.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AttestationPolicy{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attestationpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	apuo.mutation.done = true
	return _node, nil
}
