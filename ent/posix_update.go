// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/mapping"
	"github.com/in-toto/archivista/ent/posix"
	"github.com/in-toto/archivista/ent/predicate"
)

// PosixUpdate is the builder for updating Posix entities.
type PosixUpdate struct {
	config
	hooks    []Hook
	mutation *PosixMutation
}

// Where appends a list predicates to the PosixUpdate builder.
func (pu *PosixUpdate) Where(ps ...predicate.Posix) *PosixUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetAtime sets the "atime" field.
func (pu *PosixUpdate) SetAtime(s string) *PosixUpdate {
	pu.mutation.SetAtime(s)
	return pu
}

// SetNillableAtime sets the "atime" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableAtime(s *string) *PosixUpdate {
	if s != nil {
		pu.SetAtime(*s)
	}
	return pu
}

// SetCtime sets the "ctime" field.
func (pu *PosixUpdate) SetCtime(s string) *PosixUpdate {
	pu.mutation.SetCtime(s)
	return pu
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableCtime(s *string) *PosixUpdate {
	if s != nil {
		pu.SetCtime(*s)
	}
	return pu
}

// SetCreationTime sets the "creation_time" field.
func (pu *PosixUpdate) SetCreationTime(s string) *PosixUpdate {
	pu.mutation.SetCreationTime(s)
	return pu
}

// SetNillableCreationTime sets the "creation_time" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableCreationTime(s *string) *PosixUpdate {
	if s != nil {
		pu.SetCreationTime(*s)
	}
	return pu
}

// SetExtendedAttributes sets the "extended_attributes" field.
func (pu *PosixUpdate) SetExtendedAttributes(s string) *PosixUpdate {
	pu.mutation.SetExtendedAttributes(s)
	return pu
}

// SetNillableExtendedAttributes sets the "extended_attributes" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableExtendedAttributes(s *string) *PosixUpdate {
	if s != nil {
		pu.SetExtendedAttributes(*s)
	}
	return pu
}

// SetFileDeviceID sets the "file_device_id" field.
func (pu *PosixUpdate) SetFileDeviceID(s string) *PosixUpdate {
	pu.mutation.SetFileDeviceID(s)
	return pu
}

// SetNillableFileDeviceID sets the "file_device_id" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableFileDeviceID(s *string) *PosixUpdate {
	if s != nil {
		pu.SetFileDeviceID(*s)
	}
	return pu
}

// SetFileFlags sets the "file_flags" field.
func (pu *PosixUpdate) SetFileFlags(s string) *PosixUpdate {
	pu.mutation.SetFileFlags(s)
	return pu
}

// SetNillableFileFlags sets the "file_flags" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableFileFlags(s *string) *PosixUpdate {
	if s != nil {
		pu.SetFileFlags(*s)
	}
	return pu
}

// SetFileInode sets the "file_inode" field.
func (pu *PosixUpdate) SetFileInode(s string) *PosixUpdate {
	pu.mutation.SetFileInode(s)
	return pu
}

// SetNillableFileInode sets the "file_inode" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableFileInode(s *string) *PosixUpdate {
	if s != nil {
		pu.SetFileInode(*s)
	}
	return pu
}

// SetFileSystemID sets the "file_system_id" field.
func (pu *PosixUpdate) SetFileSystemID(s string) *PosixUpdate {
	pu.mutation.SetFileSystemID(s)
	return pu
}

// SetNillableFileSystemID sets the "file_system_id" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableFileSystemID(s *string) *PosixUpdate {
	if s != nil {
		pu.SetFileSystemID(*s)
	}
	return pu
}

// SetFileType sets the "file_type" field.
func (pu *PosixUpdate) SetFileType(s string) *PosixUpdate {
	pu.mutation.SetFileType(s)
	return pu
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableFileType(s *string) *PosixUpdate {
	if s != nil {
		pu.SetFileType(*s)
	}
	return pu
}

// SetHardLinkCount sets the "hard_link_count" field.
func (pu *PosixUpdate) SetHardLinkCount(s string) *PosixUpdate {
	pu.mutation.SetHardLinkCount(s)
	return pu
}

// SetNillableHardLinkCount sets the "hard_link_count" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableHardLinkCount(s *string) *PosixUpdate {
	if s != nil {
		pu.SetHardLinkCount(*s)
	}
	return pu
}

// SetMtime sets the "mtime" field.
func (pu *PosixUpdate) SetMtime(s string) *PosixUpdate {
	pu.mutation.SetMtime(s)
	return pu
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableMtime(s *string) *PosixUpdate {
	if s != nil {
		pu.SetMtime(*s)
	}
	return pu
}

// SetMetadataCtime sets the "metadata_ctime" field.
func (pu *PosixUpdate) SetMetadataCtime(s string) *PosixUpdate {
	pu.mutation.SetMetadataCtime(s)
	return pu
}

// SetNillableMetadataCtime sets the "metadata_ctime" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableMetadataCtime(s *string) *PosixUpdate {
	if s != nil {
		pu.SetMetadataCtime(*s)
	}
	return pu
}

// SetOwnerGid sets the "owner_gid" field.
func (pu *PosixUpdate) SetOwnerGid(s string) *PosixUpdate {
	pu.mutation.SetOwnerGid(s)
	return pu
}

// SetNillableOwnerGid sets the "owner_gid" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableOwnerGid(s *string) *PosixUpdate {
	if s != nil {
		pu.SetOwnerGid(*s)
	}
	return pu
}

// SetOwnerUID sets the "owner_uid" field.
func (pu *PosixUpdate) SetOwnerUID(s string) *PosixUpdate {
	pu.mutation.SetOwnerUID(s)
	return pu
}

// SetNillableOwnerUID sets the "owner_uid" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableOwnerUID(s *string) *PosixUpdate {
	if s != nil {
		pu.SetOwnerUID(*s)
	}
	return pu
}

// SetPermissions sets the "permissions" field.
func (pu *PosixUpdate) SetPermissions(s string) *PosixUpdate {
	pu.mutation.SetPermissions(s)
	return pu
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (pu *PosixUpdate) SetNillablePermissions(s *string) *PosixUpdate {
	if s != nil {
		pu.SetPermissions(*s)
	}
	return pu
}

// SetSize sets the "size" field.
func (pu *PosixUpdate) SetSize(s string) *PosixUpdate {
	pu.mutation.SetSize(s)
	return pu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (pu *PosixUpdate) SetNillableSize(s *string) *PosixUpdate {
	if s != nil {
		pu.SetSize(*s)
	}
	return pu
}

// SetMappingID sets the "mapping" edge to the Mapping entity by ID.
func (pu *PosixUpdate) SetMappingID(id uuid.UUID) *PosixUpdate {
	pu.mutation.SetMappingID(id)
	return pu
}

// SetMapping sets the "mapping" edge to the Mapping entity.
func (pu *PosixUpdate) SetMapping(m *Mapping) *PosixUpdate {
	return pu.SetMappingID(m.ID)
}

// Mutation returns the PosixMutation object of the builder.
func (pu *PosixUpdate) Mutation() *PosixMutation {
	return pu.mutation
}

// ClearMapping clears the "mapping" edge to the Mapping entity.
func (pu *PosixUpdate) ClearMapping() *PosixUpdate {
	pu.mutation.ClearMapping()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PosixUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PosixUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PosixUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PosixUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PosixUpdate) check() error {
	if _, ok := pu.mutation.MappingID(); pu.mutation.MappingCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Posix.mapping"`)
	}
	return nil
}

func (pu *PosixUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(posix.Table, posix.Columns, sqlgraph.NewFieldSpec(posix.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Atime(); ok {
		_spec.SetField(posix.FieldAtime, field.TypeString, value)
	}
	if value, ok := pu.mutation.Ctime(); ok {
		_spec.SetField(posix.FieldCtime, field.TypeString, value)
	}
	if value, ok := pu.mutation.CreationTime(); ok {
		_spec.SetField(posix.FieldCreationTime, field.TypeString, value)
	}
	if value, ok := pu.mutation.ExtendedAttributes(); ok {
		_spec.SetField(posix.FieldExtendedAttributes, field.TypeString, value)
	}
	if value, ok := pu.mutation.FileDeviceID(); ok {
		_spec.SetField(posix.FieldFileDeviceID, field.TypeString, value)
	}
	if value, ok := pu.mutation.FileFlags(); ok {
		_spec.SetField(posix.FieldFileFlags, field.TypeString, value)
	}
	if value, ok := pu.mutation.FileInode(); ok {
		_spec.SetField(posix.FieldFileInode, field.TypeString, value)
	}
	if value, ok := pu.mutation.FileSystemID(); ok {
		_spec.SetField(posix.FieldFileSystemID, field.TypeString, value)
	}
	if value, ok := pu.mutation.FileType(); ok {
		_spec.SetField(posix.FieldFileType, field.TypeString, value)
	}
	if value, ok := pu.mutation.HardLinkCount(); ok {
		_spec.SetField(posix.FieldHardLinkCount, field.TypeString, value)
	}
	if value, ok := pu.mutation.Mtime(); ok {
		_spec.SetField(posix.FieldMtime, field.TypeString, value)
	}
	if value, ok := pu.mutation.MetadataCtime(); ok {
		_spec.SetField(posix.FieldMetadataCtime, field.TypeString, value)
	}
	if value, ok := pu.mutation.OwnerGid(); ok {
		_spec.SetField(posix.FieldOwnerGid, field.TypeString, value)
	}
	if value, ok := pu.mutation.OwnerUID(); ok {
		_spec.SetField(posix.FieldOwnerUID, field.TypeString, value)
	}
	if value, ok := pu.mutation.Permissions(); ok {
		_spec.SetField(posix.FieldPermissions, field.TypeString, value)
	}
	if value, ok := pu.mutation.Size(); ok {
		_spec.SetField(posix.FieldSize, field.TypeString, value)
	}
	if pu.mutation.MappingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posix.MappingTable,
			Columns: []string{posix.MappingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapping.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MappingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posix.MappingTable,
			Columns: []string{posix.MappingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapping.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{posix.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PosixUpdateOne is the builder for updating a single Posix entity.
type PosixUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PosixMutation
}

// SetAtime sets the "atime" field.
func (puo *PosixUpdateOne) SetAtime(s string) *PosixUpdateOne {
	puo.mutation.SetAtime(s)
	return puo
}

// SetNillableAtime sets the "atime" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableAtime(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetAtime(*s)
	}
	return puo
}

// SetCtime sets the "ctime" field.
func (puo *PosixUpdateOne) SetCtime(s string) *PosixUpdateOne {
	puo.mutation.SetCtime(s)
	return puo
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableCtime(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetCtime(*s)
	}
	return puo
}

// SetCreationTime sets the "creation_time" field.
func (puo *PosixUpdateOne) SetCreationTime(s string) *PosixUpdateOne {
	puo.mutation.SetCreationTime(s)
	return puo
}

// SetNillableCreationTime sets the "creation_time" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableCreationTime(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetCreationTime(*s)
	}
	return puo
}

// SetExtendedAttributes sets the "extended_attributes" field.
func (puo *PosixUpdateOne) SetExtendedAttributes(s string) *PosixUpdateOne {
	puo.mutation.SetExtendedAttributes(s)
	return puo
}

// SetNillableExtendedAttributes sets the "extended_attributes" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableExtendedAttributes(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetExtendedAttributes(*s)
	}
	return puo
}

// SetFileDeviceID sets the "file_device_id" field.
func (puo *PosixUpdateOne) SetFileDeviceID(s string) *PosixUpdateOne {
	puo.mutation.SetFileDeviceID(s)
	return puo
}

// SetNillableFileDeviceID sets the "file_device_id" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableFileDeviceID(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetFileDeviceID(*s)
	}
	return puo
}

// SetFileFlags sets the "file_flags" field.
func (puo *PosixUpdateOne) SetFileFlags(s string) *PosixUpdateOne {
	puo.mutation.SetFileFlags(s)
	return puo
}

// SetNillableFileFlags sets the "file_flags" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableFileFlags(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetFileFlags(*s)
	}
	return puo
}

// SetFileInode sets the "file_inode" field.
func (puo *PosixUpdateOne) SetFileInode(s string) *PosixUpdateOne {
	puo.mutation.SetFileInode(s)
	return puo
}

// SetNillableFileInode sets the "file_inode" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableFileInode(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetFileInode(*s)
	}
	return puo
}

// SetFileSystemID sets the "file_system_id" field.
func (puo *PosixUpdateOne) SetFileSystemID(s string) *PosixUpdateOne {
	puo.mutation.SetFileSystemID(s)
	return puo
}

// SetNillableFileSystemID sets the "file_system_id" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableFileSystemID(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetFileSystemID(*s)
	}
	return puo
}

// SetFileType sets the "file_type" field.
func (puo *PosixUpdateOne) SetFileType(s string) *PosixUpdateOne {
	puo.mutation.SetFileType(s)
	return puo
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableFileType(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetFileType(*s)
	}
	return puo
}

// SetHardLinkCount sets the "hard_link_count" field.
func (puo *PosixUpdateOne) SetHardLinkCount(s string) *PosixUpdateOne {
	puo.mutation.SetHardLinkCount(s)
	return puo
}

// SetNillableHardLinkCount sets the "hard_link_count" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableHardLinkCount(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetHardLinkCount(*s)
	}
	return puo
}

// SetMtime sets the "mtime" field.
func (puo *PosixUpdateOne) SetMtime(s string) *PosixUpdateOne {
	puo.mutation.SetMtime(s)
	return puo
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableMtime(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetMtime(*s)
	}
	return puo
}

// SetMetadataCtime sets the "metadata_ctime" field.
func (puo *PosixUpdateOne) SetMetadataCtime(s string) *PosixUpdateOne {
	puo.mutation.SetMetadataCtime(s)
	return puo
}

// SetNillableMetadataCtime sets the "metadata_ctime" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableMetadataCtime(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetMetadataCtime(*s)
	}
	return puo
}

// SetOwnerGid sets the "owner_gid" field.
func (puo *PosixUpdateOne) SetOwnerGid(s string) *PosixUpdateOne {
	puo.mutation.SetOwnerGid(s)
	return puo
}

// SetNillableOwnerGid sets the "owner_gid" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableOwnerGid(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetOwnerGid(*s)
	}
	return puo
}

// SetOwnerUID sets the "owner_uid" field.
func (puo *PosixUpdateOne) SetOwnerUID(s string) *PosixUpdateOne {
	puo.mutation.SetOwnerUID(s)
	return puo
}

// SetNillableOwnerUID sets the "owner_uid" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableOwnerUID(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetOwnerUID(*s)
	}
	return puo
}

// SetPermissions sets the "permissions" field.
func (puo *PosixUpdateOne) SetPermissions(s string) *PosixUpdateOne {
	puo.mutation.SetPermissions(s)
	return puo
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillablePermissions(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetPermissions(*s)
	}
	return puo
}

// SetSize sets the "size" field.
func (puo *PosixUpdateOne) SetSize(s string) *PosixUpdateOne {
	puo.mutation.SetSize(s)
	return puo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (puo *PosixUpdateOne) SetNillableSize(s *string) *PosixUpdateOne {
	if s != nil {
		puo.SetSize(*s)
	}
	return puo
}

// SetMappingID sets the "mapping" edge to the Mapping entity by ID.
func (puo *PosixUpdateOne) SetMappingID(id uuid.UUID) *PosixUpdateOne {
	puo.mutation.SetMappingID(id)
	return puo
}

// SetMapping sets the "mapping" edge to the Mapping entity.
func (puo *PosixUpdateOne) SetMapping(m *Mapping) *PosixUpdateOne {
	return puo.SetMappingID(m.ID)
}

// Mutation returns the PosixMutation object of the builder.
func (puo *PosixUpdateOne) Mutation() *PosixMutation {
	return puo.mutation
}

// ClearMapping clears the "mapping" edge to the Mapping entity.
func (puo *PosixUpdateOne) ClearMapping() *PosixUpdateOne {
	puo.mutation.ClearMapping()
	return puo
}

// Where appends a list predicates to the PosixUpdate builder.
func (puo *PosixUpdateOne) Where(ps ...predicate.Posix) *PosixUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PosixUpdateOne) Select(field string, fields ...string) *PosixUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Posix entity.
func (puo *PosixUpdateOne) Save(ctx context.Context) (*Posix, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PosixUpdateOne) SaveX(ctx context.Context) *Posix {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PosixUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PosixUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PosixUpdateOne) check() error {
	if _, ok := puo.mutation.MappingID(); puo.mutation.MappingCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Posix.mapping"`)
	}
	return nil
}

func (puo *PosixUpdateOne) sqlSave(ctx context.Context) (_node *Posix, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(posix.Table, posix.Columns, sqlgraph.NewFieldSpec(posix.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Posix.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, posix.FieldID)
		for _, f := range fields {
			if !posix.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != posix.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Atime(); ok {
		_spec.SetField(posix.FieldAtime, field.TypeString, value)
	}
	if value, ok := puo.mutation.Ctime(); ok {
		_spec.SetField(posix.FieldCtime, field.TypeString, value)
	}
	if value, ok := puo.mutation.CreationTime(); ok {
		_spec.SetField(posix.FieldCreationTime, field.TypeString, value)
	}
	if value, ok := puo.mutation.ExtendedAttributes(); ok {
		_spec.SetField(posix.FieldExtendedAttributes, field.TypeString, value)
	}
	if value, ok := puo.mutation.FileDeviceID(); ok {
		_spec.SetField(posix.FieldFileDeviceID, field.TypeString, value)
	}
	if value, ok := puo.mutation.FileFlags(); ok {
		_spec.SetField(posix.FieldFileFlags, field.TypeString, value)
	}
	if value, ok := puo.mutation.FileInode(); ok {
		_spec.SetField(posix.FieldFileInode, field.TypeString, value)
	}
	if value, ok := puo.mutation.FileSystemID(); ok {
		_spec.SetField(posix.FieldFileSystemID, field.TypeString, value)
	}
	if value, ok := puo.mutation.FileType(); ok {
		_spec.SetField(posix.FieldFileType, field.TypeString, value)
	}
	if value, ok := puo.mutation.HardLinkCount(); ok {
		_spec.SetField(posix.FieldHardLinkCount, field.TypeString, value)
	}
	if value, ok := puo.mutation.Mtime(); ok {
		_spec.SetField(posix.FieldMtime, field.TypeString, value)
	}
	if value, ok := puo.mutation.MetadataCtime(); ok {
		_spec.SetField(posix.FieldMetadataCtime, field.TypeString, value)
	}
	if value, ok := puo.mutation.OwnerGid(); ok {
		_spec.SetField(posix.FieldOwnerGid, field.TypeString, value)
	}
	if value, ok := puo.mutation.OwnerUID(); ok {
		_spec.SetField(posix.FieldOwnerUID, field.TypeString, value)
	}
	if value, ok := puo.mutation.Permissions(); ok {
		_spec.SetField(posix.FieldPermissions, field.TypeString, value)
	}
	if value, ok := puo.mutation.Size(); ok {
		_spec.SetField(posix.FieldSize, field.TypeString, value)
	}
	if puo.mutation.MappingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posix.MappingTable,
			Columns: []string{posix.MappingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapping.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MappingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posix.MappingTable,
			Columns: []string{posix.MappingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapping.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Posix{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{posix.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
