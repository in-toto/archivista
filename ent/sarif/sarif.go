// Code generated by ent, DO NOT EDIT.

package sarif

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the sarif type in the database.
	Label = "sarif"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldReportFileName holds the string denoting the report_file_name field in the database.
	FieldReportFileName = "report_file_name"
	// EdgeSarifRules holds the string denoting the sarif_rules edge name in mutations.
	EdgeSarifRules = "sarif_rules"
	// EdgeStatement holds the string denoting the statement edge name in mutations.
	EdgeStatement = "statement"
	// Table holds the table name of the sarif in the database.
	Table = "sarifs"
	// SarifRulesTable is the table that holds the sarif_rules relation/edge.
	SarifRulesTable = "sarif_rules"
	// SarifRulesInverseTable is the table name for the SarifRule entity.
	// It exists in this package in order to avoid circular dependency with the "sarifrule" package.
	SarifRulesInverseTable = "sarif_rules"
	// SarifRulesColumn is the table column denoting the sarif_rules relation/edge.
	SarifRulesColumn = "sarif_sarif_rules"
	// StatementTable is the table that holds the statement relation/edge.
	StatementTable = "sarifs"
	// StatementInverseTable is the table name for the Statement entity.
	// It exists in this package in order to avoid circular dependency with the "statement" package.
	StatementInverseTable = "statements"
	// StatementColumn is the table column denoting the statement relation/edge.
	StatementColumn = "statement_sarif"
)

// Columns holds all SQL columns for sarif fields.
var Columns = []string{
	FieldID,
	FieldReportFileName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sarifs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"statement_sarif",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ReportFileNameValidator is a validator for the "report_file_name" field. It is called by the builders before save.
	ReportFileNameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Sarif queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByReportFileName orders the results by the report_file_name field.
func ByReportFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportFileName, opts...).ToFunc()
}

// BySarifRulesField orders the results by sarif_rules field.
func BySarifRulesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSarifRulesStep(), sql.OrderByField(field, opts...))
	}
}

// ByStatementField orders the results by statement field.
func ByStatementField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatementStep(), sql.OrderByField(field, opts...))
	}
}
func newSarifRulesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SarifRulesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SarifRulesTable, SarifRulesColumn),
	)
}
func newStatementStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatementInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, StatementTable, StatementColumn),
	)
}
