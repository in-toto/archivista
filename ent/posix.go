// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/mapping"
	"github.com/in-toto/archivista/ent/posix"
)

// Posix is the model entity for the Posix schema.
type Posix struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Atime holds the value of the "atime" field.
	Atime string `json:"atime,omitempty"`
	// Ctime holds the value of the "ctime" field.
	Ctime string `json:"ctime,omitempty"`
	// CreationTime holds the value of the "creation_time" field.
	CreationTime string `json:"creation_time,omitempty"`
	// ExtendedAttributes holds the value of the "extended_attributes" field.
	ExtendedAttributes string `json:"extended_attributes,omitempty"`
	// FileDeviceID holds the value of the "file_device_id" field.
	FileDeviceID string `json:"file_device_id,omitempty"`
	// FileFlags holds the value of the "file_flags" field.
	FileFlags string `json:"file_flags,omitempty"`
	// FileInode holds the value of the "file_inode" field.
	FileInode string `json:"file_inode,omitempty"`
	// FileSystemID holds the value of the "file_system_id" field.
	FileSystemID string `json:"file_system_id,omitempty"`
	// FileType holds the value of the "file_type" field.
	FileType string `json:"file_type,omitempty"`
	// HardLinkCount holds the value of the "hard_link_count" field.
	HardLinkCount string `json:"hard_link_count,omitempty"`
	// Mtime holds the value of the "mtime" field.
	Mtime string `json:"mtime,omitempty"`
	// MetadataCtime holds the value of the "metadata_ctime" field.
	MetadataCtime string `json:"metadata_ctime,omitempty"`
	// OwnerGid holds the value of the "owner_gid" field.
	OwnerGid string `json:"owner_gid,omitempty"`
	// OwnerUID holds the value of the "owner_uid" field.
	OwnerUID string `json:"owner_uid,omitempty"`
	// Permissions holds the value of the "permissions" field.
	Permissions string `json:"permissions,omitempty"`
	// Size holds the value of the "size" field.
	Size string `json:"size,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PosixQuery when eager-loading is set.
	Edges         PosixEdges `json:"edges"`
	mapping_posix *uuid.UUID
	selectValues  sql.SelectValues
}

// PosixEdges holds the relations/edges for other nodes in the graph.
type PosixEdges struct {
	// Mapping holds the value of the mapping edge.
	Mapping *Mapping `json:"mapping,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// MappingOrErr returns the Mapping value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PosixEdges) MappingOrErr() (*Mapping, error) {
	if e.Mapping != nil {
		return e.Mapping, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: mapping.Label}
	}
	return nil, &NotLoadedError{edge: "mapping"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Posix) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case posix.FieldAtime, posix.FieldCtime, posix.FieldCreationTime, posix.FieldExtendedAttributes, posix.FieldFileDeviceID, posix.FieldFileFlags, posix.FieldFileInode, posix.FieldFileSystemID, posix.FieldFileType, posix.FieldHardLinkCount, posix.FieldMtime, posix.FieldMetadataCtime, posix.FieldOwnerGid, posix.FieldOwnerUID, posix.FieldPermissions, posix.FieldSize:
			values[i] = new(sql.NullString)
		case posix.FieldID:
			values[i] = new(uuid.UUID)
		case posix.ForeignKeys[0]: // mapping_posix
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Posix fields.
func (po *Posix) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case posix.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				po.ID = *value
			}
		case posix.FieldAtime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field atime", values[i])
			} else if value.Valid {
				po.Atime = value.String
			}
		case posix.FieldCtime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ctime", values[i])
			} else if value.Valid {
				po.Ctime = value.String
			}
		case posix.FieldCreationTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creation_time", values[i])
			} else if value.Valid {
				po.CreationTime = value.String
			}
		case posix.FieldExtendedAttributes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extended_attributes", values[i])
			} else if value.Valid {
				po.ExtendedAttributes = value.String
			}
		case posix.FieldFileDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_device_id", values[i])
			} else if value.Valid {
				po.FileDeviceID = value.String
			}
		case posix.FieldFileFlags:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_flags", values[i])
			} else if value.Valid {
				po.FileFlags = value.String
			}
		case posix.FieldFileInode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_inode", values[i])
			} else if value.Valid {
				po.FileInode = value.String
			}
		case posix.FieldFileSystemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_system_id", values[i])
			} else if value.Valid {
				po.FileSystemID = value.String
			}
		case posix.FieldFileType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_type", values[i])
			} else if value.Valid {
				po.FileType = value.String
			}
		case posix.FieldHardLinkCount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hard_link_count", values[i])
			} else if value.Valid {
				po.HardLinkCount = value.String
			}
		case posix.FieldMtime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[i])
			} else if value.Valid {
				po.Mtime = value.String
			}
		case posix.FieldMetadataCtime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata_ctime", values[i])
			} else if value.Valid {
				po.MetadataCtime = value.String
			}
		case posix.FieldOwnerGid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_gid", values[i])
			} else if value.Valid {
				po.OwnerGid = value.String
			}
		case posix.FieldOwnerUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_uid", values[i])
			} else if value.Valid {
				po.OwnerUID = value.String
			}
		case posix.FieldPermissions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permissions", values[i])
			} else if value.Valid {
				po.Permissions = value.String
			}
		case posix.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				po.Size = value.String
			}
		case posix.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_posix", values[i])
			} else if value.Valid {
				po.mapping_posix = new(uuid.UUID)
				*po.mapping_posix = *value.S.(*uuid.UUID)
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Posix.
// This includes values selected through modifiers, order, etc.
func (po *Posix) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryMapping queries the "mapping" edge of the Posix entity.
func (po *Posix) QueryMapping() *MappingQuery {
	return NewPosixClient(po.config).QueryMapping(po)
}

// Update returns a builder for updating this Posix.
// Note that you need to call Posix.Unwrap() before calling this method if this Posix
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Posix) Update() *PosixUpdateOne {
	return NewPosixClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Posix entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Posix) Unwrap() *Posix {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Posix is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Posix) String() string {
	var builder strings.Builder
	builder.WriteString("Posix(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("atime=")
	builder.WriteString(po.Atime)
	builder.WriteString(", ")
	builder.WriteString("ctime=")
	builder.WriteString(po.Ctime)
	builder.WriteString(", ")
	builder.WriteString("creation_time=")
	builder.WriteString(po.CreationTime)
	builder.WriteString(", ")
	builder.WriteString("extended_attributes=")
	builder.WriteString(po.ExtendedAttributes)
	builder.WriteString(", ")
	builder.WriteString("file_device_id=")
	builder.WriteString(po.FileDeviceID)
	builder.WriteString(", ")
	builder.WriteString("file_flags=")
	builder.WriteString(po.FileFlags)
	builder.WriteString(", ")
	builder.WriteString("file_inode=")
	builder.WriteString(po.FileInode)
	builder.WriteString(", ")
	builder.WriteString("file_system_id=")
	builder.WriteString(po.FileSystemID)
	builder.WriteString(", ")
	builder.WriteString("file_type=")
	builder.WriteString(po.FileType)
	builder.WriteString(", ")
	builder.WriteString("hard_link_count=")
	builder.WriteString(po.HardLinkCount)
	builder.WriteString(", ")
	builder.WriteString("mtime=")
	builder.WriteString(po.Mtime)
	builder.WriteString(", ")
	builder.WriteString("metadata_ctime=")
	builder.WriteString(po.MetadataCtime)
	builder.WriteString(", ")
	builder.WriteString("owner_gid=")
	builder.WriteString(po.OwnerGid)
	builder.WriteString(", ")
	builder.WriteString("owner_uid=")
	builder.WriteString(po.OwnerUID)
	builder.WriteString(", ")
	builder.WriteString("permissions=")
	builder.WriteString(po.Permissions)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(po.Size)
	builder.WriteByte(')')
	return builder.String()
}

// Posixes is a parsable slice of Posix.
type Posixes []*Posix
