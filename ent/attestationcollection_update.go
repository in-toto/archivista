// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/attestation"
	"github.com/in-toto/archivista/ent/attestationcollection"
	"github.com/in-toto/archivista/ent/predicate"
	"github.com/in-toto/archivista/ent/statement"
)

// AttestationCollectionUpdate is the builder for updating AttestationCollection entities.
type AttestationCollectionUpdate struct {
	config
	hooks    []Hook
	mutation *AttestationCollectionMutation
}

// Where appends a list predicates to the AttestationCollectionUpdate builder.
func (acu *AttestationCollectionUpdate) Where(ps ...predicate.AttestationCollection) *AttestationCollectionUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetName sets the "name" field.
func (acu *AttestationCollectionUpdate) SetName(s string) *AttestationCollectionUpdate {
	acu.mutation.SetName(s)
	return acu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acu *AttestationCollectionUpdate) SetNillableName(s *string) *AttestationCollectionUpdate {
	if s != nil {
		acu.SetName(*s)
	}
	return acu
}

// AddAttestationIDs adds the "attestations" edge to the Attestation entity by IDs.
func (acu *AttestationCollectionUpdate) AddAttestationIDs(ids ...uuid.UUID) *AttestationCollectionUpdate {
	acu.mutation.AddAttestationIDs(ids...)
	return acu
}

// AddAttestations adds the "attestations" edges to the Attestation entity.
func (acu *AttestationCollectionUpdate) AddAttestations(a ...*Attestation) *AttestationCollectionUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.AddAttestationIDs(ids...)
}

// SetStatementID sets the "statement" edge to the Statement entity by ID.
func (acu *AttestationCollectionUpdate) SetStatementID(id uuid.UUID) *AttestationCollectionUpdate {
	acu.mutation.SetStatementID(id)
	return acu
}

// SetStatement sets the "statement" edge to the Statement entity.
func (acu *AttestationCollectionUpdate) SetStatement(s *Statement) *AttestationCollectionUpdate {
	return acu.SetStatementID(s.ID)
}

// Mutation returns the AttestationCollectionMutation object of the builder.
func (acu *AttestationCollectionUpdate) Mutation() *AttestationCollectionMutation {
	return acu.mutation
}

// ClearAttestations clears all "attestations" edges to the Attestation entity.
func (acu *AttestationCollectionUpdate) ClearAttestations() *AttestationCollectionUpdate {
	acu.mutation.ClearAttestations()
	return acu
}

// RemoveAttestationIDs removes the "attestations" edge to Attestation entities by IDs.
func (acu *AttestationCollectionUpdate) RemoveAttestationIDs(ids ...uuid.UUID) *AttestationCollectionUpdate {
	acu.mutation.RemoveAttestationIDs(ids...)
	return acu
}

// RemoveAttestations removes "attestations" edges to Attestation entities.
func (acu *AttestationCollectionUpdate) RemoveAttestations(a ...*Attestation) *AttestationCollectionUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.RemoveAttestationIDs(ids...)
}

// ClearStatement clears the "statement" edge to the Statement entity.
func (acu *AttestationCollectionUpdate) ClearStatement() *AttestationCollectionUpdate {
	acu.mutation.ClearStatement()
	return acu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AttestationCollectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AttestationCollectionUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AttestationCollectionUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AttestationCollectionUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acu *AttestationCollectionUpdate) check() error {
	if v, ok := acu.mutation.Name(); ok {
		if err := attestationcollection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AttestationCollection.name": %w`, err)}
		}
	}
	if _, ok := acu.mutation.StatementID(); acu.mutation.StatementCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttestationCollection.statement"`)
	}
	return nil
}

func (acu *AttestationCollectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := acu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attestationcollection.Table, attestationcollection.Columns, sqlgraph.NewFieldSpec(attestationcollection.FieldID, field.TypeUUID))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.Name(); ok {
		_spec.SetField(attestationcollection.FieldName, field.TypeString, value)
	}
	if acu.mutation.AttestationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attestationcollection.AttestationsTable,
			Columns: []string{attestationcollection.AttestationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RemovedAttestationsIDs(); len(nodes) > 0 && !acu.mutation.AttestationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attestationcollection.AttestationsTable,
			Columns: []string{attestationcollection.AttestationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.AttestationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attestationcollection.AttestationsTable,
			Columns: []string{attestationcollection.AttestationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   attestationcollection.StatementTable,
			Columns: []string{attestationcollection.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   attestationcollection.StatementTable,
			Columns: []string{attestationcollection.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attestationcollection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AttestationCollectionUpdateOne is the builder for updating a single AttestationCollection entity.
type AttestationCollectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttestationCollectionMutation
}

// SetName sets the "name" field.
func (acuo *AttestationCollectionUpdateOne) SetName(s string) *AttestationCollectionUpdateOne {
	acuo.mutation.SetName(s)
	return acuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acuo *AttestationCollectionUpdateOne) SetNillableName(s *string) *AttestationCollectionUpdateOne {
	if s != nil {
		acuo.SetName(*s)
	}
	return acuo
}

// AddAttestationIDs adds the "attestations" edge to the Attestation entity by IDs.
func (acuo *AttestationCollectionUpdateOne) AddAttestationIDs(ids ...uuid.UUID) *AttestationCollectionUpdateOne {
	acuo.mutation.AddAttestationIDs(ids...)
	return acuo
}

// AddAttestations adds the "attestations" edges to the Attestation entity.
func (acuo *AttestationCollectionUpdateOne) AddAttestations(a ...*Attestation) *AttestationCollectionUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.AddAttestationIDs(ids...)
}

// SetStatementID sets the "statement" edge to the Statement entity by ID.
func (acuo *AttestationCollectionUpdateOne) SetStatementID(id uuid.UUID) *AttestationCollectionUpdateOne {
	acuo.mutation.SetStatementID(id)
	return acuo
}

// SetStatement sets the "statement" edge to the Statement entity.
func (acuo *AttestationCollectionUpdateOne) SetStatement(s *Statement) *AttestationCollectionUpdateOne {
	return acuo.SetStatementID(s.ID)
}

// Mutation returns the AttestationCollectionMutation object of the builder.
func (acuo *AttestationCollectionUpdateOne) Mutation() *AttestationCollectionMutation {
	return acuo.mutation
}

// ClearAttestations clears all "attestations" edges to the Attestation entity.
func (acuo *AttestationCollectionUpdateOne) ClearAttestations() *AttestationCollectionUpdateOne {
	acuo.mutation.ClearAttestations()
	return acuo
}

// RemoveAttestationIDs removes the "attestations" edge to Attestation entities by IDs.
func (acuo *AttestationCollectionUpdateOne) RemoveAttestationIDs(ids ...uuid.UUID) *AttestationCollectionUpdateOne {
	acuo.mutation.RemoveAttestationIDs(ids...)
	return acuo
}

// RemoveAttestations removes "attestations" edges to Attestation entities.
func (acuo *AttestationCollectionUpdateOne) RemoveAttestations(a ...*Attestation) *AttestationCollectionUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.RemoveAttestationIDs(ids...)
}

// ClearStatement clears the "statement" edge to the Statement entity.
func (acuo *AttestationCollectionUpdateOne) ClearStatement() *AttestationCollectionUpdateOne {
	acuo.mutation.ClearStatement()
	return acuo
}

// Where appends a list predicates to the AttestationCollectionUpdate builder.
func (acuo *AttestationCollectionUpdateOne) Where(ps ...predicate.AttestationCollection) *AttestationCollectionUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AttestationCollectionUpdateOne) Select(field string, fields ...string) *AttestationCollectionUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AttestationCollection entity.
func (acuo *AttestationCollectionUpdateOne) Save(ctx context.Context) (*AttestationCollection, error) {
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AttestationCollectionUpdateOne) SaveX(ctx context.Context) *AttestationCollection {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AttestationCollectionUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AttestationCollectionUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acuo *AttestationCollectionUpdateOne) check() error {
	if v, ok := acuo.mutation.Name(); ok {
		if err := attestationcollection.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AttestationCollection.name": %w`, err)}
		}
	}
	if _, ok := acuo.mutation.StatementID(); acuo.mutation.StatementCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AttestationCollection.statement"`)
	}
	return nil
}

func (acuo *AttestationCollectionUpdateOne) sqlSave(ctx context.Context) (_node *AttestationCollection, err error) {
	if err := acuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attestationcollection.Table, attestationcollection.Columns, sqlgraph.NewFieldSpec(attestationcollection.FieldID, field.TypeUUID))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AttestationCollection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attestationcollection.FieldID)
		for _, f := range fields {
			if !attestationcollection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attestationcollection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.Name(); ok {
		_spec.SetField(attestationcollection.FieldName, field.TypeString, value)
	}
	if acuo.mutation.AttestationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attestationcollection.AttestationsTable,
			Columns: []string{attestationcollection.AttestationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RemovedAttestationsIDs(); len(nodes) > 0 && !acuo.mutation.AttestationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attestationcollection.AttestationsTable,
			Columns: []string{attestationcollection.AttestationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.AttestationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   attestationcollection.AttestationsTable,
			Columns: []string{attestationcollection.AttestationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   attestationcollection.StatementTable,
			Columns: []string{attestationcollection.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   attestationcollection.StatementTable,
			Columns: []string{attestationcollection.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AttestationCollection{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attestationcollection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
