// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/attestationpolicy"
	"github.com/in-toto/archivista/ent/statement"
)

// AttestationPolicy is the model entity for the AttestationPolicy schema.
type AttestationPolicy struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttestationPolicyQuery when eager-loading is set.
	Edges            AttestationPolicyEdges `json:"edges"`
	statement_policy *uuid.UUID
	selectValues     sql.SelectValues
}

// AttestationPolicyEdges holds the relations/edges for other nodes in the graph.
type AttestationPolicyEdges struct {
	// Statement holds the value of the statement edge.
	Statement *Statement `json:"statement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// StatementOrErr returns the Statement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttestationPolicyEdges) StatementOrErr() (*Statement, error) {
	if e.Statement != nil {
		return e.Statement, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: statement.Label}
	}
	return nil, &NotLoadedError{edge: "statement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttestationPolicy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attestationpolicy.FieldName:
			values[i] = new(sql.NullString)
		case attestationpolicy.FieldID:
			values[i] = new(uuid.UUID)
		case attestationpolicy.ForeignKeys[0]: // statement_policy
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttestationPolicy fields.
func (ap *AttestationPolicy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attestationpolicy.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ap.ID = *value
			}
		case attestationpolicy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ap.Name = value.String
			}
		case attestationpolicy.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field statement_policy", values[i])
			} else if value.Valid {
				ap.statement_policy = new(uuid.UUID)
				*ap.statement_policy = *value.S.(*uuid.UUID)
			}
		default:
			ap.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AttestationPolicy.
// This includes values selected through modifiers, order, etc.
func (ap *AttestationPolicy) Value(name string) (ent.Value, error) {
	return ap.selectValues.Get(name)
}

// QueryStatement queries the "statement" edge of the AttestationPolicy entity.
func (ap *AttestationPolicy) QueryStatement() *StatementQuery {
	return NewAttestationPolicyClient(ap.config).QueryStatement(ap)
}

// Update returns a builder for updating this AttestationPolicy.
// Note that you need to call AttestationPolicy.Unwrap() before calling this method if this AttestationPolicy
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AttestationPolicy) Update() *AttestationPolicyUpdateOne {
	return NewAttestationPolicyClient(ap.config).UpdateOne(ap)
}

// Unwrap unwraps the AttestationPolicy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AttestationPolicy) Unwrap() *AttestationPolicy {
	_tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttestationPolicy is not a transactional entity")
	}
	ap.config.driver = _tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AttestationPolicy) String() string {
	var builder strings.Builder
	builder.WriteString("AttestationPolicy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ap.ID))
	builder.WriteString("name=")
	builder.WriteString(ap.Name)
	builder.WriteByte(')')
	return builder.String()
}

// AttestationPolicies is a parsable slice of AttestationPolicy.
type AttestationPolicies []*AttestationPolicy
