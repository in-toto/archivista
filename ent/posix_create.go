// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/mapping"
	"github.com/in-toto/archivista/ent/posix"
)

// PosixCreate is the builder for creating a Posix entity.
type PosixCreate struct {
	config
	mutation *PosixMutation
	hooks    []Hook
}

// SetAtime sets the "atime" field.
func (pc *PosixCreate) SetAtime(s string) *PosixCreate {
	pc.mutation.SetAtime(s)
	return pc
}

// SetCtime sets the "ctime" field.
func (pc *PosixCreate) SetCtime(s string) *PosixCreate {
	pc.mutation.SetCtime(s)
	return pc
}

// SetCreationTime sets the "creation_time" field.
func (pc *PosixCreate) SetCreationTime(s string) *PosixCreate {
	pc.mutation.SetCreationTime(s)
	return pc
}

// SetExtendedAttributes sets the "extended_attributes" field.
func (pc *PosixCreate) SetExtendedAttributes(s string) *PosixCreate {
	pc.mutation.SetExtendedAttributes(s)
	return pc
}

// SetFileDeviceID sets the "file_device_id" field.
func (pc *PosixCreate) SetFileDeviceID(s string) *PosixCreate {
	pc.mutation.SetFileDeviceID(s)
	return pc
}

// SetFileFlags sets the "file_flags" field.
func (pc *PosixCreate) SetFileFlags(s string) *PosixCreate {
	pc.mutation.SetFileFlags(s)
	return pc
}

// SetFileInode sets the "file_inode" field.
func (pc *PosixCreate) SetFileInode(s string) *PosixCreate {
	pc.mutation.SetFileInode(s)
	return pc
}

// SetFileSystemID sets the "file_system_id" field.
func (pc *PosixCreate) SetFileSystemID(s string) *PosixCreate {
	pc.mutation.SetFileSystemID(s)
	return pc
}

// SetFileType sets the "file_type" field.
func (pc *PosixCreate) SetFileType(s string) *PosixCreate {
	pc.mutation.SetFileType(s)
	return pc
}

// SetHardLinkCount sets the "hard_link_count" field.
func (pc *PosixCreate) SetHardLinkCount(s string) *PosixCreate {
	pc.mutation.SetHardLinkCount(s)
	return pc
}

// SetMtime sets the "mtime" field.
func (pc *PosixCreate) SetMtime(s string) *PosixCreate {
	pc.mutation.SetMtime(s)
	return pc
}

// SetMetadataCtime sets the "metadata_ctime" field.
func (pc *PosixCreate) SetMetadataCtime(s string) *PosixCreate {
	pc.mutation.SetMetadataCtime(s)
	return pc
}

// SetOwnerGid sets the "owner_gid" field.
func (pc *PosixCreate) SetOwnerGid(s string) *PosixCreate {
	pc.mutation.SetOwnerGid(s)
	return pc
}

// SetOwnerUID sets the "owner_uid" field.
func (pc *PosixCreate) SetOwnerUID(s string) *PosixCreate {
	pc.mutation.SetOwnerUID(s)
	return pc
}

// SetPermissions sets the "permissions" field.
func (pc *PosixCreate) SetPermissions(s string) *PosixCreate {
	pc.mutation.SetPermissions(s)
	return pc
}

// SetSize sets the "size" field.
func (pc *PosixCreate) SetSize(s string) *PosixCreate {
	pc.mutation.SetSize(s)
	return pc
}

// SetID sets the "id" field.
func (pc *PosixCreate) SetID(u uuid.UUID) *PosixCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PosixCreate) SetNillableID(u *uuid.UUID) *PosixCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetMappingID sets the "mapping" edge to the Mapping entity by ID.
func (pc *PosixCreate) SetMappingID(id uuid.UUID) *PosixCreate {
	pc.mutation.SetMappingID(id)
	return pc
}

// SetMapping sets the "mapping" edge to the Mapping entity.
func (pc *PosixCreate) SetMapping(m *Mapping) *PosixCreate {
	return pc.SetMappingID(m.ID)
}

// Mutation returns the PosixMutation object of the builder.
func (pc *PosixCreate) Mutation() *PosixMutation {
	return pc.mutation
}

// Save creates the Posix in the database.
func (pc *PosixCreate) Save(ctx context.Context) (*Posix, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PosixCreate) SaveX(ctx context.Context) *Posix {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PosixCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PosixCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PosixCreate) defaults() {
	if _, ok := pc.mutation.ID(); !ok {
		v := posix.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PosixCreate) check() error {
	if _, ok := pc.mutation.Atime(); !ok {
		return &ValidationError{Name: "atime", err: errors.New(`ent: missing required field "Posix.atime"`)}
	}
	if _, ok := pc.mutation.Ctime(); !ok {
		return &ValidationError{Name: "ctime", err: errors.New(`ent: missing required field "Posix.ctime"`)}
	}
	if _, ok := pc.mutation.CreationTime(); !ok {
		return &ValidationError{Name: "creation_time", err: errors.New(`ent: missing required field "Posix.creation_time"`)}
	}
	if _, ok := pc.mutation.ExtendedAttributes(); !ok {
		return &ValidationError{Name: "extended_attributes", err: errors.New(`ent: missing required field "Posix.extended_attributes"`)}
	}
	if _, ok := pc.mutation.FileDeviceID(); !ok {
		return &ValidationError{Name: "file_device_id", err: errors.New(`ent: missing required field "Posix.file_device_id"`)}
	}
	if _, ok := pc.mutation.FileFlags(); !ok {
		return &ValidationError{Name: "file_flags", err: errors.New(`ent: missing required field "Posix.file_flags"`)}
	}
	if _, ok := pc.mutation.FileInode(); !ok {
		return &ValidationError{Name: "file_inode", err: errors.New(`ent: missing required field "Posix.file_inode"`)}
	}
	if _, ok := pc.mutation.FileSystemID(); !ok {
		return &ValidationError{Name: "file_system_id", err: errors.New(`ent: missing required field "Posix.file_system_id"`)}
	}
	if _, ok := pc.mutation.FileType(); !ok {
		return &ValidationError{Name: "file_type", err: errors.New(`ent: missing required field "Posix.file_type"`)}
	}
	if _, ok := pc.mutation.HardLinkCount(); !ok {
		return &ValidationError{Name: "hard_link_count", err: errors.New(`ent: missing required field "Posix.hard_link_count"`)}
	}
	if _, ok := pc.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New(`ent: missing required field "Posix.mtime"`)}
	}
	if _, ok := pc.mutation.MetadataCtime(); !ok {
		return &ValidationError{Name: "metadata_ctime", err: errors.New(`ent: missing required field "Posix.metadata_ctime"`)}
	}
	if _, ok := pc.mutation.OwnerGid(); !ok {
		return &ValidationError{Name: "owner_gid", err: errors.New(`ent: missing required field "Posix.owner_gid"`)}
	}
	if _, ok := pc.mutation.OwnerUID(); !ok {
		return &ValidationError{Name: "owner_uid", err: errors.New(`ent: missing required field "Posix.owner_uid"`)}
	}
	if _, ok := pc.mutation.Permissions(); !ok {
		return &ValidationError{Name: "permissions", err: errors.New(`ent: missing required field "Posix.permissions"`)}
	}
	if _, ok := pc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Posix.size"`)}
	}
	if _, ok := pc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping", err: errors.New(`ent: missing required edge "Posix.mapping"`)}
	}
	return nil
}

func (pc *PosixCreate) sqlSave(ctx context.Context) (*Posix, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PosixCreate) createSpec() (*Posix, *sqlgraph.CreateSpec) {
	var (
		_node = &Posix{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(posix.Table, sqlgraph.NewFieldSpec(posix.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Atime(); ok {
		_spec.SetField(posix.FieldAtime, field.TypeString, value)
		_node.Atime = value
	}
	if value, ok := pc.mutation.Ctime(); ok {
		_spec.SetField(posix.FieldCtime, field.TypeString, value)
		_node.Ctime = value
	}
	if value, ok := pc.mutation.CreationTime(); ok {
		_spec.SetField(posix.FieldCreationTime, field.TypeString, value)
		_node.CreationTime = value
	}
	if value, ok := pc.mutation.ExtendedAttributes(); ok {
		_spec.SetField(posix.FieldExtendedAttributes, field.TypeString, value)
		_node.ExtendedAttributes = value
	}
	if value, ok := pc.mutation.FileDeviceID(); ok {
		_spec.SetField(posix.FieldFileDeviceID, field.TypeString, value)
		_node.FileDeviceID = value
	}
	if value, ok := pc.mutation.FileFlags(); ok {
		_spec.SetField(posix.FieldFileFlags, field.TypeString, value)
		_node.FileFlags = value
	}
	if value, ok := pc.mutation.FileInode(); ok {
		_spec.SetField(posix.FieldFileInode, field.TypeString, value)
		_node.FileInode = value
	}
	if value, ok := pc.mutation.FileSystemID(); ok {
		_spec.SetField(posix.FieldFileSystemID, field.TypeString, value)
		_node.FileSystemID = value
	}
	if value, ok := pc.mutation.FileType(); ok {
		_spec.SetField(posix.FieldFileType, field.TypeString, value)
		_node.FileType = value
	}
	if value, ok := pc.mutation.HardLinkCount(); ok {
		_spec.SetField(posix.FieldHardLinkCount, field.TypeString, value)
		_node.HardLinkCount = value
	}
	if value, ok := pc.mutation.Mtime(); ok {
		_spec.SetField(posix.FieldMtime, field.TypeString, value)
		_node.Mtime = value
	}
	if value, ok := pc.mutation.MetadataCtime(); ok {
		_spec.SetField(posix.FieldMetadataCtime, field.TypeString, value)
		_node.MetadataCtime = value
	}
	if value, ok := pc.mutation.OwnerGid(); ok {
		_spec.SetField(posix.FieldOwnerGid, field.TypeString, value)
		_node.OwnerGid = value
	}
	if value, ok := pc.mutation.OwnerUID(); ok {
		_spec.SetField(posix.FieldOwnerUID, field.TypeString, value)
		_node.OwnerUID = value
	}
	if value, ok := pc.mutation.Permissions(); ok {
		_spec.SetField(posix.FieldPermissions, field.TypeString, value)
		_node.Permissions = value
	}
	if value, ok := pc.mutation.Size(); ok {
		_spec.SetField(posix.FieldSize, field.TypeString, value)
		_node.Size = value
	}
	if nodes := pc.mutation.MappingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posix.MappingTable,
			Columns: []string{posix.MappingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mapping.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mapping_posix = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PosixCreateBulk is the builder for creating many Posix entities in bulk.
type PosixCreateBulk struct {
	config
	err      error
	builders []*PosixCreate
}

// Save creates the Posix entities in the database.
func (pcb *PosixCreateBulk) Save(ctx context.Context) ([]*Posix, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Posix, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PosixMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PosixCreateBulk) SaveX(ctx context.Context) []*Posix {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PosixCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PosixCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
