// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AttestationsColumns holds the columns for the "attestations" table.
	AttestationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "type", Type: field.TypeString},
		{Name: "attestation_collection_attestations", Type: field.TypeUUID},
	}
	// AttestationsTable holds the schema information for the "attestations" table.
	AttestationsTable = &schema.Table{
		Name:       "attestations",
		Columns:    AttestationsColumns,
		PrimaryKey: []*schema.Column{AttestationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "attestations_attestation_collections_attestations",
				Columns:    []*schema.Column{AttestationsColumns[2]},
				RefColumns: []*schema.Column{AttestationCollectionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "attestation_type",
				Unique:  false,
				Columns: []*schema.Column{AttestationsColumns[1]},
			},
		},
	}
	// AttestationCollectionsColumns holds the columns for the "attestation_collections" table.
	AttestationCollectionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "statement_attestation_collections", Type: field.TypeUUID, Unique: true},
	}
	// AttestationCollectionsTable holds the schema information for the "attestation_collections" table.
	AttestationCollectionsTable = &schema.Table{
		Name:       "attestation_collections",
		Columns:    AttestationCollectionsColumns,
		PrimaryKey: []*schema.Column{AttestationCollectionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "attestation_collections_statements_attestation_collections",
				Columns:    []*schema.Column{AttestationCollectionsColumns[2]},
				RefColumns: []*schema.Column{StatementsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "attestationcollection_name",
				Unique:  false,
				Columns: []*schema.Column{AttestationCollectionsColumns[1]},
			},
		},
	}
	// AttestationPoliciesColumns holds the columns for the "attestation_policies" table.
	AttestationPoliciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "statement_policy", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// AttestationPoliciesTable holds the schema information for the "attestation_policies" table.
	AttestationPoliciesTable = &schema.Table{
		Name:       "attestation_policies",
		Columns:    AttestationPoliciesColumns,
		PrimaryKey: []*schema.Column{AttestationPoliciesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "attestation_policies_statements_policy",
				Columns:    []*schema.Column{AttestationPoliciesColumns[2]},
				RefColumns: []*schema.Column{StatementsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "attestationpolicy_name",
				Unique:  false,
				Columns: []*schema.Column{AttestationPoliciesColumns[1]},
			},
		},
	}
	// DssesColumns holds the columns for the "dsses" table.
	DssesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "gitoid_sha256", Type: field.TypeString, Unique: true},
		{Name: "payload_type", Type: field.TypeString},
		{Name: "dsse_statement", Type: field.TypeUUID, Nullable: true},
	}
	// DssesTable holds the schema information for the "dsses" table.
	DssesTable = &schema.Table{
		Name:       "dsses",
		Columns:    DssesColumns,
		PrimaryKey: []*schema.Column{DssesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dsses_statements_statement",
				Columns:    []*schema.Column{DssesColumns[3]},
				RefColumns: []*schema.Column{StatementsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MappingsColumns holds the columns for the "mappings" table.
	MappingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "path", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "sha1", Type: field.TypeString},
		{Name: "sha256", Type: field.TypeString},
		{Name: "gitoid_sha1", Type: field.TypeString},
		{Name: "gitoid_sha256", Type: field.TypeString},
		{Name: "omnitrail_mappings", Type: field.TypeUUID},
	}
	// MappingsTable holds the schema information for the "mappings" table.
	MappingsTable = &schema.Table{
		Name:       "mappings",
		Columns:    MappingsColumns,
		PrimaryKey: []*schema.Column{MappingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "mappings_omnitrails_mappings",
				Columns:    []*schema.Column{MappingsColumns[7]},
				RefColumns: []*schema.Column{OmnitrailsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OmnitrailsColumns holds the columns for the "omnitrails" table.
	OmnitrailsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "attestation_omnitrail", Type: field.TypeUUID, Unique: true},
	}
	// OmnitrailsTable holds the schema information for the "omnitrails" table.
	OmnitrailsTable = &schema.Table{
		Name:       "omnitrails",
		Columns:    OmnitrailsColumns,
		PrimaryKey: []*schema.Column{OmnitrailsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "omnitrails_attestations_omnitrail",
				Columns:    []*schema.Column{OmnitrailsColumns[1]},
				RefColumns: []*schema.Column{AttestationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PayloadDigestsColumns holds the columns for the "payload_digests" table.
	PayloadDigestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "algorithm", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "dsse_payload_digests", Type: field.TypeUUID, Nullable: true},
	}
	// PayloadDigestsTable holds the schema information for the "payload_digests" table.
	PayloadDigestsTable = &schema.Table{
		Name:       "payload_digests",
		Columns:    PayloadDigestsColumns,
		PrimaryKey: []*schema.Column{PayloadDigestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "payload_digests_dsses_payload_digests",
				Columns:    []*schema.Column{PayloadDigestsColumns[3]},
				RefColumns: []*schema.Column{DssesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "payloaddigest_value",
				Unique:  false,
				Columns: []*schema.Column{PayloadDigestsColumns[2]},
			},
		},
	}
	// PosixesColumns holds the columns for the "posixes" table.
	PosixesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "atime", Type: field.TypeString},
		{Name: "ctime", Type: field.TypeString},
		{Name: "creation_time", Type: field.TypeString},
		{Name: "extended_attributes", Type: field.TypeString},
		{Name: "file_device_id", Type: field.TypeString},
		{Name: "file_flags", Type: field.TypeString},
		{Name: "file_inode", Type: field.TypeString},
		{Name: "file_system_id", Type: field.TypeString},
		{Name: "file_type", Type: field.TypeString},
		{Name: "hard_link_count", Type: field.TypeString},
		{Name: "mtime", Type: field.TypeString},
		{Name: "metadata_ctime", Type: field.TypeString},
		{Name: "owner_gid", Type: field.TypeString},
		{Name: "owner_uid", Type: field.TypeString},
		{Name: "permissions", Type: field.TypeString},
		{Name: "size", Type: field.TypeString},
		{Name: "mapping_posix", Type: field.TypeUUID},
	}
	// PosixesTable holds the schema information for the "posixes" table.
	PosixesTable = &schema.Table{
		Name:       "posixes",
		Columns:    PosixesColumns,
		PrimaryKey: []*schema.Column{PosixesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "posixes_mappings_posix",
				Columns:    []*schema.Column{PosixesColumns[17]},
				RefColumns: []*schema.Column{MappingsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SignaturesColumns holds the columns for the "signatures" table.
	SignaturesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "key_id", Type: field.TypeString},
		{Name: "signature", Type: field.TypeString, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "dsse_signatures", Type: field.TypeUUID, Nullable: true},
	}
	// SignaturesTable holds the schema information for the "signatures" table.
	SignaturesTable = &schema.Table{
		Name:       "signatures",
		Columns:    SignaturesColumns,
		PrimaryKey: []*schema.Column{SignaturesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "signatures_dsses_signatures",
				Columns:    []*schema.Column{SignaturesColumns[3]},
				RefColumns: []*schema.Column{DssesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "signature_key_id",
				Unique:  false,
				Columns: []*schema.Column{SignaturesColumns[1]},
			},
		},
	}
	// StatementsColumns holds the columns for the "statements" table.
	StatementsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "predicate", Type: field.TypeString},
	}
	// StatementsTable holds the schema information for the "statements" table.
	StatementsTable = &schema.Table{
		Name:       "statements",
		Columns:    StatementsColumns,
		PrimaryKey: []*schema.Column{StatementsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "statement_predicate",
				Unique:  false,
				Columns: []*schema.Column{StatementsColumns[1]},
			},
		},
	}
	// SubjectsColumns holds the columns for the "subjects" table.
	SubjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "statement_subjects", Type: field.TypeUUID, Nullable: true},
	}
	// SubjectsTable holds the schema information for the "subjects" table.
	SubjectsTable = &schema.Table{
		Name:       "subjects",
		Columns:    SubjectsColumns,
		PrimaryKey: []*schema.Column{SubjectsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subjects_statements_subjects",
				Columns:    []*schema.Column{SubjectsColumns[2]},
				RefColumns: []*schema.Column{StatementsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "subject_name",
				Unique:  false,
				Columns: []*schema.Column{SubjectsColumns[1]},
			},
		},
	}
	// SubjectDigestsColumns holds the columns for the "subject_digests" table.
	SubjectDigestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "algorithm", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "subject_subject_digests", Type: field.TypeUUID, Nullable: true},
	}
	// SubjectDigestsTable holds the schema information for the "subject_digests" table.
	SubjectDigestsTable = &schema.Table{
		Name:       "subject_digests",
		Columns:    SubjectDigestsColumns,
		PrimaryKey: []*schema.Column{SubjectDigestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subject_digests_subjects_subject_digests",
				Columns:    []*schema.Column{SubjectDigestsColumns[3]},
				RefColumns: []*schema.Column{SubjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "subjectdigest_value",
				Unique:  false,
				Columns: []*schema.Column{SubjectDigestsColumns[2]},
			},
		},
	}
	// TimestampsColumns holds the columns for the "timestamps" table.
	TimestampsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "type", Type: field.TypeString},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "signature_timestamps", Type: field.TypeUUID, Nullable: true},
	}
	// TimestampsTable holds the schema information for the "timestamps" table.
	TimestampsTable = &schema.Table{
		Name:       "timestamps",
		Columns:    TimestampsColumns,
		PrimaryKey: []*schema.Column{TimestampsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "timestamps_signatures_timestamps",
				Columns:    []*schema.Column{TimestampsColumns[3]},
				RefColumns: []*schema.Column{SignaturesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AttestationsTable,
		AttestationCollectionsTable,
		AttestationPoliciesTable,
		DssesTable,
		MappingsTable,
		OmnitrailsTable,
		PayloadDigestsTable,
		PosixesTable,
		SignaturesTable,
		StatementsTable,
		SubjectsTable,
		SubjectDigestsTable,
		TimestampsTable,
	}
)

func init() {
	AttestationsTable.ForeignKeys[0].RefTable = AttestationCollectionsTable
	AttestationCollectionsTable.ForeignKeys[0].RefTable = StatementsTable
	AttestationPoliciesTable.ForeignKeys[0].RefTable = StatementsTable
	DssesTable.ForeignKeys[0].RefTable = StatementsTable
	MappingsTable.ForeignKeys[0].RefTable = OmnitrailsTable
	OmnitrailsTable.ForeignKeys[0].RefTable = AttestationsTable
	PayloadDigestsTable.ForeignKeys[0].RefTable = DssesTable
	PosixesTable.ForeignKeys[0].RefTable = MappingsTable
	SignaturesTable.ForeignKeys[0].RefTable = DssesTable
	SubjectsTable.ForeignKeys[0].RefTable = StatementsTable
	SubjectDigestsTable.ForeignKeys[0].RefTable = SubjectsTable
	TimestampsTable.ForeignKeys[0].RefTable = SignaturesTable
}
