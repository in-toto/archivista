// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/in-toto/archivista/ent/metadata"
)

// Metadata is the model entity for the Metadata schema.
type Metadata struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key value for the metadata item
	Key string `json:"key,omitempty"`
	// Value for the metadata item
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetadataQuery when eager-loading is set.
	Edges        MetadataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MetadataEdges holds the relations/edges for other nodes in the graph.
type MetadataEdges struct {
	// Envelope holds the value of the envelope edge.
	Envelope []*Dsse `json:"envelope,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedEnvelope map[string][]*Dsse
}

// EnvelopeOrErr returns the Envelope value or an error if the edge
// was not loaded in eager-loading.
func (e MetadataEdges) EnvelopeOrErr() ([]*Dsse, error) {
	if e.loadedTypes[0] {
		return e.Envelope, nil
	}
	return nil, &NotLoadedError{edge: "envelope"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Metadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case metadata.FieldID:
			values[i] = new(sql.NullInt64)
		case metadata.FieldKey, metadata.FieldValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Metadata fields.
func (m *Metadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case metadata.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				m.Key = value.String
			}
		case metadata.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				m.Value = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Metadata.
// This includes values selected through modifiers, order, etc.
func (m *Metadata) GetValue(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryEnvelope queries the "envelope" edge of the Metadata entity.
func (m *Metadata) QueryEnvelope() *DsseQuery {
	return NewMetadataClient(m.config).QueryEnvelope(m)
}

// Update returns a builder for updating this Metadata.
// Note that you need to call Metadata.Unwrap() before calling this method if this Metadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Metadata) Update() *MetadataUpdateOne {
	return NewMetadataClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Metadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Metadata) Unwrap() *Metadata {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Metadata is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Metadata) String() string {
	var builder strings.Builder
	builder.WriteString("Metadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("key=")
	builder.WriteString(m.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(m.Value)
	builder.WriteByte(')')
	return builder.String()
}

// NamedEnvelope returns the Envelope named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Metadata) NamedEnvelope(name string) ([]*Dsse, error) {
	if m.Edges.namedEnvelope == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedEnvelope[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Metadata) appendNamedEnvelope(name string, edges ...*Dsse) {
	if m.Edges.namedEnvelope == nil {
		m.Edges.namedEnvelope = make(map[string][]*Dsse)
	}
	if len(edges) == 0 {
		m.Edges.namedEnvelope[name] = []*Dsse{}
	} else {
		m.Edges.namedEnvelope[name] = append(m.Edges.namedEnvelope[name], edges...)
	}
}

// MetadataSlice is a parsable slice of Metadata.
type MetadataSlice []*Metadata
