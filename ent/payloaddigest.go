// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/in-toto/archivista/ent/dsse"
	"github.com/in-toto/archivista/ent/payloaddigest"
)

// PayloadDigest is the model entity for the PayloadDigest schema.
type PayloadDigest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Algorithm holds the value of the "algorithm" field.
	Algorithm string `json:"algorithm,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PayloadDigestQuery when eager-loading is set.
	Edges                PayloadDigestEdges `json:"edges"`
	dsse_payload_digests *int
	selectValues         sql.SelectValues
}

// PayloadDigestEdges holds the relations/edges for other nodes in the graph.
type PayloadDigestEdges struct {
	// Dsse holds the value of the dsse edge.
	Dsse *Dsse `json:"dsse,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// DsseOrErr returns the Dsse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PayloadDigestEdges) DsseOrErr() (*Dsse, error) {
	if e.loadedTypes[0] {
		if e.Dsse == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: dsse.Label}
		}
		return e.Dsse, nil
	}
	return nil, &NotLoadedError{edge: "dsse"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PayloadDigest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case payloaddigest.FieldID:
			values[i] = new(sql.NullInt64)
		case payloaddigest.FieldAlgorithm, payloaddigest.FieldValue:
			values[i] = new(sql.NullString)
		case payloaddigest.ForeignKeys[0]: // dsse_payload_digests
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PayloadDigest fields.
func (pd *PayloadDigest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case payloaddigest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pd.ID = int(value.Int64)
		case payloaddigest.FieldAlgorithm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field algorithm", values[i])
			} else if value.Valid {
				pd.Algorithm = value.String
			}
		case payloaddigest.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				pd.Value = value.String
			}
		case payloaddigest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field dsse_payload_digests", value)
			} else if value.Valid {
				pd.dsse_payload_digests = new(int)
				*pd.dsse_payload_digests = int(value.Int64)
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the PayloadDigest.
// This includes values selected through modifiers, order, etc.
func (pd *PayloadDigest) GetValue(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// QueryDsse queries the "dsse" edge of the PayloadDigest entity.
func (pd *PayloadDigest) QueryDsse() *DsseQuery {
	return NewPayloadDigestClient(pd.config).QueryDsse(pd)
}

// Update returns a builder for updating this PayloadDigest.
// Note that you need to call PayloadDigest.Unwrap() before calling this method if this PayloadDigest
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *PayloadDigest) Update() *PayloadDigestUpdateOne {
	return NewPayloadDigestClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the PayloadDigest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *PayloadDigest) Unwrap() *PayloadDigest {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: PayloadDigest is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *PayloadDigest) String() string {
	var builder strings.Builder
	builder.WriteString("PayloadDigest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("algorithm=")
	builder.WriteString(pd.Algorithm)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(pd.Value)
	builder.WriteByte(')')
	return builder.String()
}

// PayloadDigests is a parsable slice of PayloadDigest.
type PayloadDigests []*PayloadDigest
