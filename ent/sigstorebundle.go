// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/dsse"
	"github.com/in-toto/archivista/ent/sigstorebundle"
)

// SigstoreBundle is the model entity for the SigstoreBundle schema.
type SigstoreBundle struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// GitoidSha256 holds the value of the "gitoid_sha256" field.
	GitoidSha256 string `json:"gitoid_sha256,omitempty"`
	// MediaType holds the value of the "media_type" field.
	MediaType string `json:"media_type,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SigstoreBundleQuery when eager-loading is set.
	Edges        SigstoreBundleEdges `json:"edges"`
	dsse_bundle  *uuid.UUID
	selectValues sql.SelectValues
}

// SigstoreBundleEdges holds the relations/edges for other nodes in the graph.
type SigstoreBundleEdges struct {
	// Dsse holds the value of the dsse edge.
	Dsse *Dsse `json:"dsse,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// DsseOrErr returns the Dsse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SigstoreBundleEdges) DsseOrErr() (*Dsse, error) {
	if e.Dsse != nil {
		return e.Dsse, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: dsse.Label}
	}
	return nil, &NotLoadedError{edge: "dsse"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SigstoreBundle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sigstorebundle.FieldGitoidSha256, sigstorebundle.FieldMediaType, sigstorebundle.FieldVersion:
			values[i] = new(sql.NullString)
		case sigstorebundle.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case sigstorebundle.FieldID:
			values[i] = new(uuid.UUID)
		case sigstorebundle.ForeignKeys[0]: // dsse_bundle
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SigstoreBundle fields.
func (_m *SigstoreBundle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sigstorebundle.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case sigstorebundle.FieldGitoidSha256:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gitoid_sha256", values[i])
			} else if value.Valid {
				_m.GitoidSha256 = value.String
			}
		case sigstorebundle.FieldMediaType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_type", values[i])
			} else if value.Valid {
				_m.MediaType = value.String
			}
		case sigstorebundle.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = value.String
			}
		case sigstorebundle.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case sigstorebundle.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field dsse_bundle", values[i])
			} else if value.Valid {
				_m.dsse_bundle = new(uuid.UUID)
				*_m.dsse_bundle = *value.S.(*uuid.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SigstoreBundle.
// This includes values selected through modifiers, order, etc.
func (_m *SigstoreBundle) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryDsse queries the "dsse" edge of the SigstoreBundle entity.
func (_m *SigstoreBundle) QueryDsse() *DsseQuery {
	return NewSigstoreBundleClient(_m.config).QueryDsse(_m)
}

// Update returns a builder for updating this SigstoreBundle.
// Note that you need to call SigstoreBundle.Unwrap() before calling this method if this SigstoreBundle
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SigstoreBundle) Update() *SigstoreBundleUpdateOne {
	return NewSigstoreBundleClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SigstoreBundle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SigstoreBundle) Unwrap() *SigstoreBundle {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SigstoreBundle is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SigstoreBundle) String() string {
	var builder strings.Builder
	builder.WriteString("SigstoreBundle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("gitoid_sha256=")
	builder.WriteString(_m.GitoidSha256)
	builder.WriteString(", ")
	builder.WriteString("media_type=")
	builder.WriteString(_m.MediaType)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(_m.Version)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SigstoreBundles is a parsable slice of SigstoreBundle.
type SigstoreBundles []*SigstoreBundle
