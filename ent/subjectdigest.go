// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/in-toto/archivista/ent/subject"
	"github.com/in-toto/archivista/ent/subjectdigest"
)

// SubjectDigest is the model entity for the SubjectDigest schema.
type SubjectDigest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Algorithm holds the value of the "algorithm" field.
	Algorithm string `json:"algorithm,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubjectDigestQuery when eager-loading is set.
	Edges                   SubjectDigestEdges `json:"edges"`
	subject_subject_digests *int
	selectValues            sql.SelectValues
}

// SubjectDigestEdges holds the relations/edges for other nodes in the graph.
type SubjectDigestEdges struct {
	// Subject holds the value of the subject edge.
	Subject *Subject `json:"subject,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// SubjectOrErr returns the Subject value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubjectDigestEdges) SubjectOrErr() (*Subject, error) {
	if e.Subject != nil {
		return e.Subject, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: subject.Label}
	}
	return nil, &NotLoadedError{edge: "subject"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubjectDigest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subjectdigest.FieldID:
			values[i] = new(sql.NullInt64)
		case subjectdigest.FieldAlgorithm, subjectdigest.FieldValue:
			values[i] = new(sql.NullString)
		case subjectdigest.ForeignKeys[0]: // subject_subject_digests
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubjectDigest fields.
func (sd *SubjectDigest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subjectdigest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sd.ID = int(value.Int64)
		case subjectdigest.FieldAlgorithm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field algorithm", values[i])
			} else if value.Valid {
				sd.Algorithm = value.String
			}
		case subjectdigest.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				sd.Value = value.String
			}
		case subjectdigest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field subject_subject_digests", value)
			} else if value.Valid {
				sd.subject_subject_digests = new(int)
				*sd.subject_subject_digests = int(value.Int64)
			}
		default:
			sd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the SubjectDigest.
// This includes values selected through modifiers, order, etc.
func (sd *SubjectDigest) GetValue(name string) (ent.Value, error) {
	return sd.selectValues.Get(name)
}

// QuerySubject queries the "subject" edge of the SubjectDigest entity.
func (sd *SubjectDigest) QuerySubject() *SubjectQuery {
	return NewSubjectDigestClient(sd.config).QuerySubject(sd)
}

// Update returns a builder for updating this SubjectDigest.
// Note that you need to call SubjectDigest.Unwrap() before calling this method if this SubjectDigest
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SubjectDigest) Update() *SubjectDigestUpdateOne {
	return NewSubjectDigestClient(sd.config).UpdateOne(sd)
}

// Unwrap unwraps the SubjectDigest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SubjectDigest) Unwrap() *SubjectDigest {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubjectDigest is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SubjectDigest) String() string {
	var builder strings.Builder
	builder.WriteString("SubjectDigest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("algorithm=")
	builder.WriteString(sd.Algorithm)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(sd.Value)
	builder.WriteByte(')')
	return builder.String()
}

// SubjectDigests is a parsable slice of SubjectDigest.
type SubjectDigests []*SubjectDigest
