// Code generated by ent, DO NOT EDIT.

package omnitrail

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the omnitrail type in the database.
	Label = "omnitrail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeMappings holds the string denoting the mappings edge name in mutations.
	EdgeMappings = "mappings"
	// EdgeAttestation holds the string denoting the attestation edge name in mutations.
	EdgeAttestation = "attestation"
	// Table holds the table name of the omnitrail in the database.
	Table = "omnitrails"
	// MappingsTable is the table that holds the mappings relation/edge.
	MappingsTable = "mappings"
	// MappingsInverseTable is the table name for the Mapping entity.
	// It exists in this package in order to avoid circular dependency with the "mapping" package.
	MappingsInverseTable = "mappings"
	// MappingsColumn is the table column denoting the mappings relation/edge.
	MappingsColumn = "omnitrail_mappings"
	// AttestationTable is the table that holds the attestation relation/edge.
	AttestationTable = "omnitrails"
	// AttestationInverseTable is the table name for the Attestation entity.
	// It exists in this package in order to avoid circular dependency with the "attestation" package.
	AttestationInverseTable = "attestations"
	// AttestationColumn is the table column denoting the attestation relation/edge.
	AttestationColumn = "attestation_omnitrail"
)

// Columns holds all SQL columns for omnitrail fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "omnitrails"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"attestation_omnitrail",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Omnitrail queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMappingsCount orders the results by mappings count.
func ByMappingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMappingsStep(), opts...)
	}
}

// ByMappings orders the results by mappings terms.
func ByMappings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMappingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAttestationField orders the results by attestation field.
func ByAttestationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttestationStep(), sql.OrderByField(field, opts...))
	}
}
func newMappingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MappingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MappingsTable, MappingsColumn),
	)
}
func newAttestationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttestationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, AttestationTable, AttestationColumn),
	)
}
