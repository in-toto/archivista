// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/testifysec/archivista/ent/dsse"
	"github.com/testifysec/archivista/ent/payloaddigest"
	"github.com/testifysec/archivista/ent/predicate"
	"github.com/testifysec/archivista/ent/signature"
	"github.com/testifysec/archivista/ent/statement"
)

// DsseUpdate is the builder for updating Dsse entities.
type DsseUpdate struct {
	config
	hooks    []Hook
	mutation *DsseMutation
}

// Where appends a list predicates to the DsseUpdate builder.
func (du *DsseUpdate) Where(ps ...predicate.Dsse) *DsseUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetGitoidSha256 sets the "gitoid_sha256" field.
func (du *DsseUpdate) SetGitoidSha256(s string) *DsseUpdate {
	du.mutation.SetGitoidSha256(s)
	return du
}

// SetPayloadType sets the "payload_type" field.
func (du *DsseUpdate) SetPayloadType(s string) *DsseUpdate {
	du.mutation.SetPayloadType(s)
	return du
}

// SetStatementID sets the "statement" edge to the Statement entity by ID.
func (du *DsseUpdate) SetStatementID(id int) *DsseUpdate {
	du.mutation.SetStatementID(id)
	return du
}

// SetNillableStatementID sets the "statement" edge to the Statement entity by ID if the given value is not nil.
func (du *DsseUpdate) SetNillableStatementID(id *int) *DsseUpdate {
	if id != nil {
		du = du.SetStatementID(*id)
	}
	return du
}

// SetStatement sets the "statement" edge to the Statement entity.
func (du *DsseUpdate) SetStatement(s *Statement) *DsseUpdate {
	return du.SetStatementID(s.ID)
}

// AddSignatureIDs adds the "signatures" edge to the Signature entity by IDs.
func (du *DsseUpdate) AddSignatureIDs(ids ...int) *DsseUpdate {
	du.mutation.AddSignatureIDs(ids...)
	return du
}

// AddSignatures adds the "signatures" edges to the Signature entity.
func (du *DsseUpdate) AddSignatures(s ...*Signature) *DsseUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.AddSignatureIDs(ids...)
}

// AddPayloadDigestIDs adds the "payload_digests" edge to the PayloadDigest entity by IDs.
func (du *DsseUpdate) AddPayloadDigestIDs(ids ...int) *DsseUpdate {
	du.mutation.AddPayloadDigestIDs(ids...)
	return du
}

// AddPayloadDigests adds the "payload_digests" edges to the PayloadDigest entity.
func (du *DsseUpdate) AddPayloadDigests(p ...*PayloadDigest) *DsseUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.AddPayloadDigestIDs(ids...)
}

// Mutation returns the DsseMutation object of the builder.
func (du *DsseUpdate) Mutation() *DsseMutation {
	return du.mutation
}

// ClearStatement clears the "statement" edge to the Statement entity.
func (du *DsseUpdate) ClearStatement() *DsseUpdate {
	du.mutation.ClearStatement()
	return du
}

// ClearSignatures clears all "signatures" edges to the Signature entity.
func (du *DsseUpdate) ClearSignatures() *DsseUpdate {
	du.mutation.ClearSignatures()
	return du
}

// RemoveSignatureIDs removes the "signatures" edge to Signature entities by IDs.
func (du *DsseUpdate) RemoveSignatureIDs(ids ...int) *DsseUpdate {
	du.mutation.RemoveSignatureIDs(ids...)
	return du
}

// RemoveSignatures removes "signatures" edges to Signature entities.
func (du *DsseUpdate) RemoveSignatures(s ...*Signature) *DsseUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.RemoveSignatureIDs(ids...)
}

// ClearPayloadDigests clears all "payload_digests" edges to the PayloadDigest entity.
func (du *DsseUpdate) ClearPayloadDigests() *DsseUpdate {
	du.mutation.ClearPayloadDigests()
	return du
}

// RemovePayloadDigestIDs removes the "payload_digests" edge to PayloadDigest entities by IDs.
func (du *DsseUpdate) RemovePayloadDigestIDs(ids ...int) *DsseUpdate {
	du.mutation.RemovePayloadDigestIDs(ids...)
	return du
}

// RemovePayloadDigests removes "payload_digests" edges to PayloadDigest entities.
func (du *DsseUpdate) RemovePayloadDigests(p ...*PayloadDigest) *DsseUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.RemovePayloadDigestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DsseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DsseUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DsseUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DsseUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DsseUpdate) check() error {
	if v, ok := du.mutation.GitoidSha256(); ok {
		if err := dsse.GitoidSha256Validator(v); err != nil {
			return &ValidationError{Name: "gitoid_sha256", err: fmt.Errorf(`ent: validator failed for field "Dsse.gitoid_sha256": %w`, err)}
		}
	}
	if v, ok := du.mutation.PayloadType(); ok {
		if err := dsse.PayloadTypeValidator(v); err != nil {
			return &ValidationError{Name: "payload_type", err: fmt.Errorf(`ent: validator failed for field "Dsse.payload_type": %w`, err)}
		}
	}
	return nil
}

func (du *DsseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dsse.Table, dsse.Columns, sqlgraph.NewFieldSpec(dsse.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.GitoidSha256(); ok {
		_spec.SetField(dsse.FieldGitoidSha256, field.TypeString, value)
	}
	if value, ok := du.mutation.PayloadType(); ok {
		_spec.SetField(dsse.FieldPayloadType, field.TypeString, value)
	}
	if du.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dsse.StatementTable,
			Columns: []string{dsse.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dsse.StatementTable,
			Columns: []string{dsse.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.SignaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dsse.SignaturesTable,
			Columns: []string{dsse.SignaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedSignaturesIDs(); len(nodes) > 0 && !du.mutation.SignaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dsse.SignaturesTable,
			Columns: []string{dsse.SignaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.SignaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dsse.SignaturesTable,
			Columns: []string{dsse.SignaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.PayloadDigestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dsse.PayloadDigestsTable,
			Columns: []string{dsse.PayloadDigestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payloaddigest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedPayloadDigestsIDs(); len(nodes) > 0 && !du.mutation.PayloadDigestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dsse.PayloadDigestsTable,
			Columns: []string{dsse.PayloadDigestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payloaddigest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.PayloadDigestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dsse.PayloadDigestsTable,
			Columns: []string{dsse.PayloadDigestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payloaddigest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dsse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DsseUpdateOne is the builder for updating a single Dsse entity.
type DsseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DsseMutation
}

// SetGitoidSha256 sets the "gitoid_sha256" field.
func (duo *DsseUpdateOne) SetGitoidSha256(s string) *DsseUpdateOne {
	duo.mutation.SetGitoidSha256(s)
	return duo
}

// SetPayloadType sets the "payload_type" field.
func (duo *DsseUpdateOne) SetPayloadType(s string) *DsseUpdateOne {
	duo.mutation.SetPayloadType(s)
	return duo
}

// SetStatementID sets the "statement" edge to the Statement entity by ID.
func (duo *DsseUpdateOne) SetStatementID(id int) *DsseUpdateOne {
	duo.mutation.SetStatementID(id)
	return duo
}

// SetNillableStatementID sets the "statement" edge to the Statement entity by ID if the given value is not nil.
func (duo *DsseUpdateOne) SetNillableStatementID(id *int) *DsseUpdateOne {
	if id != nil {
		duo = duo.SetStatementID(*id)
	}
	return duo
}

// SetStatement sets the "statement" edge to the Statement entity.
func (duo *DsseUpdateOne) SetStatement(s *Statement) *DsseUpdateOne {
	return duo.SetStatementID(s.ID)
}

// AddSignatureIDs adds the "signatures" edge to the Signature entity by IDs.
func (duo *DsseUpdateOne) AddSignatureIDs(ids ...int) *DsseUpdateOne {
	duo.mutation.AddSignatureIDs(ids...)
	return duo
}

// AddSignatures adds the "signatures" edges to the Signature entity.
func (duo *DsseUpdateOne) AddSignatures(s ...*Signature) *DsseUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.AddSignatureIDs(ids...)
}

// AddPayloadDigestIDs adds the "payload_digests" edge to the PayloadDigest entity by IDs.
func (duo *DsseUpdateOne) AddPayloadDigestIDs(ids ...int) *DsseUpdateOne {
	duo.mutation.AddPayloadDigestIDs(ids...)
	return duo
}

// AddPayloadDigests adds the "payload_digests" edges to the PayloadDigest entity.
func (duo *DsseUpdateOne) AddPayloadDigests(p ...*PayloadDigest) *DsseUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.AddPayloadDigestIDs(ids...)
}

// Mutation returns the DsseMutation object of the builder.
func (duo *DsseUpdateOne) Mutation() *DsseMutation {
	return duo.mutation
}

// ClearStatement clears the "statement" edge to the Statement entity.
func (duo *DsseUpdateOne) ClearStatement() *DsseUpdateOne {
	duo.mutation.ClearStatement()
	return duo
}

// ClearSignatures clears all "signatures" edges to the Signature entity.
func (duo *DsseUpdateOne) ClearSignatures() *DsseUpdateOne {
	duo.mutation.ClearSignatures()
	return duo
}

// RemoveSignatureIDs removes the "signatures" edge to Signature entities by IDs.
func (duo *DsseUpdateOne) RemoveSignatureIDs(ids ...int) *DsseUpdateOne {
	duo.mutation.RemoveSignatureIDs(ids...)
	return duo
}

// RemoveSignatures removes "signatures" edges to Signature entities.
func (duo *DsseUpdateOne) RemoveSignatures(s ...*Signature) *DsseUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.RemoveSignatureIDs(ids...)
}

// ClearPayloadDigests clears all "payload_digests" edges to the PayloadDigest entity.
func (duo *DsseUpdateOne) ClearPayloadDigests() *DsseUpdateOne {
	duo.mutation.ClearPayloadDigests()
	return duo
}

// RemovePayloadDigestIDs removes the "payload_digests" edge to PayloadDigest entities by IDs.
func (duo *DsseUpdateOne) RemovePayloadDigestIDs(ids ...int) *DsseUpdateOne {
	duo.mutation.RemovePayloadDigestIDs(ids...)
	return duo
}

// RemovePayloadDigests removes "payload_digests" edges to PayloadDigest entities.
func (duo *DsseUpdateOne) RemovePayloadDigests(p ...*PayloadDigest) *DsseUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.RemovePayloadDigestIDs(ids...)
}

// Where appends a list predicates to the DsseUpdate builder.
func (duo *DsseUpdateOne) Where(ps ...predicate.Dsse) *DsseUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DsseUpdateOne) Select(field string, fields ...string) *DsseUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dsse entity.
func (duo *DsseUpdateOne) Save(ctx context.Context) (*Dsse, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DsseUpdateOne) SaveX(ctx context.Context) *Dsse {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DsseUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DsseUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DsseUpdateOne) check() error {
	if v, ok := duo.mutation.GitoidSha256(); ok {
		if err := dsse.GitoidSha256Validator(v); err != nil {
			return &ValidationError{Name: "gitoid_sha256", err: fmt.Errorf(`ent: validator failed for field "Dsse.gitoid_sha256": %w`, err)}
		}
	}
	if v, ok := duo.mutation.PayloadType(); ok {
		if err := dsse.PayloadTypeValidator(v); err != nil {
			return &ValidationError{Name: "payload_type", err: fmt.Errorf(`ent: validator failed for field "Dsse.payload_type": %w`, err)}
		}
	}
	return nil
}

func (duo *DsseUpdateOne) sqlSave(ctx context.Context) (_node *Dsse, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dsse.Table, dsse.Columns, sqlgraph.NewFieldSpec(dsse.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dsse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dsse.FieldID)
		for _, f := range fields {
			if !dsse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dsse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.GitoidSha256(); ok {
		_spec.SetField(dsse.FieldGitoidSha256, field.TypeString, value)
	}
	if value, ok := duo.mutation.PayloadType(); ok {
		_spec.SetField(dsse.FieldPayloadType, field.TypeString, value)
	}
	if duo.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dsse.StatementTable,
			Columns: []string{dsse.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dsse.StatementTable,
			Columns: []string{dsse.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.SignaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dsse.SignaturesTable,
			Columns: []string{dsse.SignaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedSignaturesIDs(); len(nodes) > 0 && !duo.mutation.SignaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dsse.SignaturesTable,
			Columns: []string{dsse.SignaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.SignaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dsse.SignaturesTable,
			Columns: []string{dsse.SignaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.PayloadDigestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dsse.PayloadDigestsTable,
			Columns: []string{dsse.PayloadDigestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payloaddigest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedPayloadDigestsIDs(); len(nodes) > 0 && !duo.mutation.PayloadDigestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dsse.PayloadDigestsTable,
			Columns: []string{dsse.PayloadDigestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payloaddigest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.PayloadDigestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dsse.PayloadDigestsTable,
			Columns: []string{dsse.PayloadDigestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payloaddigest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dsse{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dsse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
