// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/sarif"
	"github.com/in-toto/archivista/ent/sarifrule"
	"github.com/in-toto/archivista/ent/statement"
)

// Sarif is the model entity for the Sarif schema.
type Sarif struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ReportFileName holds the value of the "report_file_name" field.
	ReportFileName string `json:"report_file_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SarifQuery when eager-loading is set.
	Edges           SarifEdges `json:"edges"`
	statement_sarif *uuid.UUID
	selectValues    sql.SelectValues
}

// SarifEdges holds the relations/edges for other nodes in the graph.
type SarifEdges struct {
	// SarifRules holds the value of the sarif_rules edge.
	SarifRules *SarifRule `json:"sarif_rules,omitempty"`
	// Statement holds the value of the statement edge.
	Statement *Statement `json:"statement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// SarifRulesOrErr returns the SarifRules value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SarifEdges) SarifRulesOrErr() (*SarifRule, error) {
	if e.SarifRules != nil {
		return e.SarifRules, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sarifrule.Label}
	}
	return nil, &NotLoadedError{edge: "sarif_rules"}
}

// StatementOrErr returns the Statement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SarifEdges) StatementOrErr() (*Statement, error) {
	if e.Statement != nil {
		return e.Statement, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: statement.Label}
	}
	return nil, &NotLoadedError{edge: "statement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sarif) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sarif.FieldReportFileName:
			values[i] = new(sql.NullString)
		case sarif.FieldID:
			values[i] = new(uuid.UUID)
		case sarif.ForeignKeys[0]: // statement_sarif
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sarif fields.
func (s *Sarif) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sarif.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case sarif.FieldReportFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field report_file_name", values[i])
			} else if value.Valid {
				s.ReportFileName = value.String
			}
		case sarif.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field statement_sarif", values[i])
			} else if value.Valid {
				s.statement_sarif = new(uuid.UUID)
				*s.statement_sarif = *value.S.(*uuid.UUID)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sarif.
// This includes values selected through modifiers, order, etc.
func (s *Sarif) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QuerySarifRules queries the "sarif_rules" edge of the Sarif entity.
func (s *Sarif) QuerySarifRules() *SarifRuleQuery {
	return NewSarifClient(s.config).QuerySarifRules(s)
}

// QueryStatement queries the "statement" edge of the Sarif entity.
func (s *Sarif) QueryStatement() *StatementQuery {
	return NewSarifClient(s.config).QueryStatement(s)
}

// Update returns a builder for updating this Sarif.
// Note that you need to call Sarif.Unwrap() before calling this method if this Sarif
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sarif) Update() *SarifUpdateOne {
	return NewSarifClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sarif entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sarif) Unwrap() *Sarif {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sarif is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sarif) String() string {
	var builder strings.Builder
	builder.WriteString("Sarif(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("report_file_name=")
	builder.WriteString(s.ReportFileName)
	builder.WriteByte(')')
	return builder.String()
}

// Sarifs is a parsable slice of Sarif.
type Sarifs []*Sarif
