// Code generated by ent, DO NOT EDIT.

package sarifrule

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the sarifrule type in the database.
	Label = "sarif_rule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRuleID holds the string denoting the rule_id field in the database.
	FieldRuleID = "rule_id"
	// FieldRuleName holds the string denoting the rule_name field in the database.
	FieldRuleName = "rule_name"
	// FieldShortDescription holds the string denoting the short_description field in the database.
	FieldShortDescription = "short_description"
	// EdgeSarif holds the string denoting the sarif edge name in mutations.
	EdgeSarif = "sarif"
	// Table holds the table name of the sarifrule in the database.
	Table = "sarif_rules"
	// SarifTable is the table that holds the sarif relation/edge.
	SarifTable = "sarif_rules"
	// SarifInverseTable is the table name for the Sarif entity.
	// It exists in this package in order to avoid circular dependency with the "sarif" package.
	SarifInverseTable = "sarifs"
	// SarifColumn is the table column denoting the sarif relation/edge.
	SarifColumn = "sarif_sarif_rules"
)

// Columns holds all SQL columns for sarifrule fields.
var Columns = []string{
	FieldID,
	FieldRuleID,
	FieldRuleName,
	FieldShortDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sarif_rules"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"sarif_sarif_rules",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// RuleIDValidator is a validator for the "rule_id" field. It is called by the builders before save.
	RuleIDValidator func(string) error
	// RuleNameValidator is a validator for the "rule_name" field. It is called by the builders before save.
	RuleNameValidator func(string) error
	// ShortDescriptionValidator is a validator for the "short_description" field. It is called by the builders before save.
	ShortDescriptionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the SarifRule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRuleID orders the results by the rule_id field.
func ByRuleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRuleID, opts...).ToFunc()
}

// ByRuleName orders the results by the rule_name field.
func ByRuleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRuleName, opts...).ToFunc()
}

// ByShortDescription orders the results by the short_description field.
func ByShortDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShortDescription, opts...).ToFunc()
}

// BySarifField orders the results by sarif field.
func BySarifField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSarifStep(), sql.OrderByField(field, opts...))
	}
}
func newSarifStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SarifInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, SarifTable, SarifColumn),
	)
}
