// Code generated by ent, DO NOT EDIT.

package sarifrule

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldLTE(FieldID, id))
}

// RuleID applies equality check predicate on the "rule_id" field. It's identical to RuleIDEQ.
func RuleID(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldEQ(FieldRuleID, v))
}

// RuleName applies equality check predicate on the "rule_name" field. It's identical to RuleNameEQ.
func RuleName(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldEQ(FieldRuleName, v))
}

// ShortDescription applies equality check predicate on the "short_description" field. It's identical to ShortDescriptionEQ.
func ShortDescription(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldEQ(FieldShortDescription, v))
}

// RuleIDEQ applies the EQ predicate on the "rule_id" field.
func RuleIDEQ(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldEQ(FieldRuleID, v))
}

// RuleIDNEQ applies the NEQ predicate on the "rule_id" field.
func RuleIDNEQ(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldNEQ(FieldRuleID, v))
}

// RuleIDIn applies the In predicate on the "rule_id" field.
func RuleIDIn(vs ...string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldIn(FieldRuleID, vs...))
}

// RuleIDNotIn applies the NotIn predicate on the "rule_id" field.
func RuleIDNotIn(vs ...string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldNotIn(FieldRuleID, vs...))
}

// RuleIDGT applies the GT predicate on the "rule_id" field.
func RuleIDGT(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldGT(FieldRuleID, v))
}

// RuleIDGTE applies the GTE predicate on the "rule_id" field.
func RuleIDGTE(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldGTE(FieldRuleID, v))
}

// RuleIDLT applies the LT predicate on the "rule_id" field.
func RuleIDLT(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldLT(FieldRuleID, v))
}

// RuleIDLTE applies the LTE predicate on the "rule_id" field.
func RuleIDLTE(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldLTE(FieldRuleID, v))
}

// RuleIDContains applies the Contains predicate on the "rule_id" field.
func RuleIDContains(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldContains(FieldRuleID, v))
}

// RuleIDHasPrefix applies the HasPrefix predicate on the "rule_id" field.
func RuleIDHasPrefix(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldHasPrefix(FieldRuleID, v))
}

// RuleIDHasSuffix applies the HasSuffix predicate on the "rule_id" field.
func RuleIDHasSuffix(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldHasSuffix(FieldRuleID, v))
}

// RuleIDEqualFold applies the EqualFold predicate on the "rule_id" field.
func RuleIDEqualFold(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldEqualFold(FieldRuleID, v))
}

// RuleIDContainsFold applies the ContainsFold predicate on the "rule_id" field.
func RuleIDContainsFold(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldContainsFold(FieldRuleID, v))
}

// RuleNameEQ applies the EQ predicate on the "rule_name" field.
func RuleNameEQ(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldEQ(FieldRuleName, v))
}

// RuleNameNEQ applies the NEQ predicate on the "rule_name" field.
func RuleNameNEQ(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldNEQ(FieldRuleName, v))
}

// RuleNameIn applies the In predicate on the "rule_name" field.
func RuleNameIn(vs ...string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldIn(FieldRuleName, vs...))
}

// RuleNameNotIn applies the NotIn predicate on the "rule_name" field.
func RuleNameNotIn(vs ...string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldNotIn(FieldRuleName, vs...))
}

// RuleNameGT applies the GT predicate on the "rule_name" field.
func RuleNameGT(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldGT(FieldRuleName, v))
}

// RuleNameGTE applies the GTE predicate on the "rule_name" field.
func RuleNameGTE(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldGTE(FieldRuleName, v))
}

// RuleNameLT applies the LT predicate on the "rule_name" field.
func RuleNameLT(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldLT(FieldRuleName, v))
}

// RuleNameLTE applies the LTE predicate on the "rule_name" field.
func RuleNameLTE(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldLTE(FieldRuleName, v))
}

// RuleNameContains applies the Contains predicate on the "rule_name" field.
func RuleNameContains(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldContains(FieldRuleName, v))
}

// RuleNameHasPrefix applies the HasPrefix predicate on the "rule_name" field.
func RuleNameHasPrefix(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldHasPrefix(FieldRuleName, v))
}

// RuleNameHasSuffix applies the HasSuffix predicate on the "rule_name" field.
func RuleNameHasSuffix(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldHasSuffix(FieldRuleName, v))
}

// RuleNameEqualFold applies the EqualFold predicate on the "rule_name" field.
func RuleNameEqualFold(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldEqualFold(FieldRuleName, v))
}

// RuleNameContainsFold applies the ContainsFold predicate on the "rule_name" field.
func RuleNameContainsFold(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldContainsFold(FieldRuleName, v))
}

// ShortDescriptionEQ applies the EQ predicate on the "short_description" field.
func ShortDescriptionEQ(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldEQ(FieldShortDescription, v))
}

// ShortDescriptionNEQ applies the NEQ predicate on the "short_description" field.
func ShortDescriptionNEQ(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldNEQ(FieldShortDescription, v))
}

// ShortDescriptionIn applies the In predicate on the "short_description" field.
func ShortDescriptionIn(vs ...string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldIn(FieldShortDescription, vs...))
}

// ShortDescriptionNotIn applies the NotIn predicate on the "short_description" field.
func ShortDescriptionNotIn(vs ...string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldNotIn(FieldShortDescription, vs...))
}

// ShortDescriptionGT applies the GT predicate on the "short_description" field.
func ShortDescriptionGT(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldGT(FieldShortDescription, v))
}

// ShortDescriptionGTE applies the GTE predicate on the "short_description" field.
func ShortDescriptionGTE(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldGTE(FieldShortDescription, v))
}

// ShortDescriptionLT applies the LT predicate on the "short_description" field.
func ShortDescriptionLT(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldLT(FieldShortDescription, v))
}

// ShortDescriptionLTE applies the LTE predicate on the "short_description" field.
func ShortDescriptionLTE(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldLTE(FieldShortDescription, v))
}

// ShortDescriptionContains applies the Contains predicate on the "short_description" field.
func ShortDescriptionContains(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldContains(FieldShortDescription, v))
}

// ShortDescriptionHasPrefix applies the HasPrefix predicate on the "short_description" field.
func ShortDescriptionHasPrefix(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldHasPrefix(FieldShortDescription, v))
}

// ShortDescriptionHasSuffix applies the HasSuffix predicate on the "short_description" field.
func ShortDescriptionHasSuffix(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldHasSuffix(FieldShortDescription, v))
}

// ShortDescriptionEqualFold applies the EqualFold predicate on the "short_description" field.
func ShortDescriptionEqualFold(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldEqualFold(FieldShortDescription, v))
}

// ShortDescriptionContainsFold applies the ContainsFold predicate on the "short_description" field.
func ShortDescriptionContainsFold(v string) predicate.SarifRule {
	return predicate.SarifRule(sql.FieldContainsFold(FieldShortDescription, v))
}

// HasSarif applies the HasEdge predicate on the "sarif" edge.
func HasSarif() predicate.SarifRule {
	return predicate.SarifRule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SarifTable, SarifColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSarifWith applies the HasEdge predicate on the "sarif" edge with a given conditions (other predicates).
func HasSarifWith(preds ...predicate.Sarif) predicate.SarifRule {
	return predicate.SarifRule(func(s *sql.Selector) {
		step := newSarifStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SarifRule) predicate.SarifRule {
	return predicate.SarifRule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SarifRule) predicate.SarifRule {
	return predicate.SarifRule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SarifRule) predicate.SarifRule {
	return predicate.SarifRule(sql.NotPredicates(p))
}
