// Code generated by ent, DO NOT EDIT.

package gitattestation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the gitattestation type in the database.
	Label = "git_attestation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCommitHash holds the string denoting the commit_hash field in the database.
	FieldCommitHash = "commit_hash"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldAuthorEmail holds the string denoting the author_email field in the database.
	FieldAuthorEmail = "author_email"
	// FieldCommitterName holds the string denoting the committer_name field in the database.
	FieldCommitterName = "committer_name"
	// FieldCommitterEmail holds the string denoting the committer_email field in the database.
	FieldCommitterEmail = "committer_email"
	// FieldCommitDate holds the string denoting the commit_date field in the database.
	FieldCommitDate = "commit_date"
	// FieldCommitMessage holds the string denoting the commit_message field in the database.
	FieldCommitMessage = "commit_message"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCommitType holds the string denoting the commit_type field in the database.
	FieldCommitType = "commit_type"
	// FieldCommitDigest holds the string denoting the commit_digest field in the database.
	FieldCommitDigest = "commit_digest"
	// FieldSignature holds the string denoting the signature field in the database.
	FieldSignature = "signature"
	// FieldParentHashes holds the string denoting the parent_hashes field in the database.
	FieldParentHashes = "parent_hashes"
	// FieldTreeHash holds the string denoting the tree_hash field in the database.
	FieldTreeHash = "tree_hash"
	// FieldRefs holds the string denoting the refs field in the database.
	FieldRefs = "refs"
	// FieldRemotes holds the string denoting the remotes field in the database.
	FieldRemotes = "remotes"
	// EdgeAttestation holds the string denoting the attestation edge name in mutations.
	EdgeAttestation = "attestation"
	// Table holds the table name of the gitattestation in the database.
	Table = "git_attestations"
	// AttestationTable is the table that holds the attestation relation/edge.
	AttestationTable = "git_attestations"
	// AttestationInverseTable is the table name for the Attestation entity.
	// It exists in this package in order to avoid circular dependency with the "attestation" package.
	AttestationInverseTable = "attestations"
	// AttestationColumn is the table column denoting the attestation relation/edge.
	AttestationColumn = "attestation_git_attestation"
)

// Columns holds all SQL columns for gitattestation fields.
var Columns = []string{
	FieldID,
	FieldCommitHash,
	FieldAuthor,
	FieldAuthorEmail,
	FieldCommitterName,
	FieldCommitterEmail,
	FieldCommitDate,
	FieldCommitMessage,
	FieldStatus,
	FieldCommitType,
	FieldCommitDigest,
	FieldSignature,
	FieldParentHashes,
	FieldTreeHash,
	FieldRefs,
	FieldRemotes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "git_attestations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"attestation_git_attestation",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the GitAttestation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCommitHash orders the results by the commit_hash field.
func ByCommitHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitHash, opts...).ToFunc()
}

// ByAuthor orders the results by the author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByAuthorEmail orders the results by the author_email field.
func ByAuthorEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorEmail, opts...).ToFunc()
}

// ByCommitterName orders the results by the committer_name field.
func ByCommitterName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitterName, opts...).ToFunc()
}

// ByCommitterEmail orders the results by the committer_email field.
func ByCommitterEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitterEmail, opts...).ToFunc()
}

// ByCommitDate orders the results by the commit_date field.
func ByCommitDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitDate, opts...).ToFunc()
}

// ByCommitMessage orders the results by the commit_message field.
func ByCommitMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitMessage, opts...).ToFunc()
}

// ByCommitType orders the results by the commit_type field.
func ByCommitType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitType, opts...).ToFunc()
}

// ByCommitDigest orders the results by the commit_digest field.
func ByCommitDigest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitDigest, opts...).ToFunc()
}

// BySignature orders the results by the signature field.
func BySignature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignature, opts...).ToFunc()
}

// ByTreeHash orders the results by the tree_hash field.
func ByTreeHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTreeHash, opts...).ToFunc()
}

// ByAttestationField orders the results by attestation field.
func ByAttestationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttestationStep(), sql.OrderByField(field, opts...))
	}
}
func newAttestationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttestationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, AttestationTable, AttestationColumn),
	)
}
