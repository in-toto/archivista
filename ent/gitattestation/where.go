// Code generated by ent, DO NOT EDIT.

package gitattestation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLTE(FieldID, id))
}

// CommitHash applies equality check predicate on the "commit_hash" field. It's identical to CommitHashEQ.
func CommitHash(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitHash, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldAuthor, v))
}

// AuthorEmail applies equality check predicate on the "author_email" field. It's identical to AuthorEmailEQ.
func AuthorEmail(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldAuthorEmail, v))
}

// CommitterName applies equality check predicate on the "committer_name" field. It's identical to CommitterNameEQ.
func CommitterName(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitterName, v))
}

// CommitterEmail applies equality check predicate on the "committer_email" field. It's identical to CommitterEmailEQ.
func CommitterEmail(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitterEmail, v))
}

// CommitDate applies equality check predicate on the "commit_date" field. It's identical to CommitDateEQ.
func CommitDate(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitDate, v))
}

// CommitMessage applies equality check predicate on the "commit_message" field. It's identical to CommitMessageEQ.
func CommitMessage(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitMessage, v))
}

// CommitType applies equality check predicate on the "commit_type" field. It's identical to CommitTypeEQ.
func CommitType(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitType, v))
}

// CommitDigest applies equality check predicate on the "commit_digest" field. It's identical to CommitDigestEQ.
func CommitDigest(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitDigest, v))
}

// Signature applies equality check predicate on the "signature" field. It's identical to SignatureEQ.
func Signature(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldSignature, v))
}

// TreeHash applies equality check predicate on the "tree_hash" field. It's identical to TreeHashEQ.
func TreeHash(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldTreeHash, v))
}

// CommitHashEQ applies the EQ predicate on the "commit_hash" field.
func CommitHashEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitHash, v))
}

// CommitHashNEQ applies the NEQ predicate on the "commit_hash" field.
func CommitHashNEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNEQ(FieldCommitHash, v))
}

// CommitHashIn applies the In predicate on the "commit_hash" field.
func CommitHashIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldIn(FieldCommitHash, vs...))
}

// CommitHashNotIn applies the NotIn predicate on the "commit_hash" field.
func CommitHashNotIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNotIn(FieldCommitHash, vs...))
}

// CommitHashGT applies the GT predicate on the "commit_hash" field.
func CommitHashGT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGT(FieldCommitHash, v))
}

// CommitHashGTE applies the GTE predicate on the "commit_hash" field.
func CommitHashGTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGTE(FieldCommitHash, v))
}

// CommitHashLT applies the LT predicate on the "commit_hash" field.
func CommitHashLT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLT(FieldCommitHash, v))
}

// CommitHashLTE applies the LTE predicate on the "commit_hash" field.
func CommitHashLTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLTE(FieldCommitHash, v))
}

// CommitHashContains applies the Contains predicate on the "commit_hash" field.
func CommitHashContains(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContains(FieldCommitHash, v))
}

// CommitHashHasPrefix applies the HasPrefix predicate on the "commit_hash" field.
func CommitHashHasPrefix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasPrefix(FieldCommitHash, v))
}

// CommitHashHasSuffix applies the HasSuffix predicate on the "commit_hash" field.
func CommitHashHasSuffix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasSuffix(FieldCommitHash, v))
}

// CommitHashEqualFold applies the EqualFold predicate on the "commit_hash" field.
func CommitHashEqualFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEqualFold(FieldCommitHash, v))
}

// CommitHashContainsFold applies the ContainsFold predicate on the "commit_hash" field.
func CommitHashContainsFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContainsFold(FieldCommitHash, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContainsFold(FieldAuthor, v))
}

// AuthorEmailEQ applies the EQ predicate on the "author_email" field.
func AuthorEmailEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldAuthorEmail, v))
}

// AuthorEmailNEQ applies the NEQ predicate on the "author_email" field.
func AuthorEmailNEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNEQ(FieldAuthorEmail, v))
}

// AuthorEmailIn applies the In predicate on the "author_email" field.
func AuthorEmailIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldIn(FieldAuthorEmail, vs...))
}

// AuthorEmailNotIn applies the NotIn predicate on the "author_email" field.
func AuthorEmailNotIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNotIn(FieldAuthorEmail, vs...))
}

// AuthorEmailGT applies the GT predicate on the "author_email" field.
func AuthorEmailGT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGT(FieldAuthorEmail, v))
}

// AuthorEmailGTE applies the GTE predicate on the "author_email" field.
func AuthorEmailGTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGTE(FieldAuthorEmail, v))
}

// AuthorEmailLT applies the LT predicate on the "author_email" field.
func AuthorEmailLT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLT(FieldAuthorEmail, v))
}

// AuthorEmailLTE applies the LTE predicate on the "author_email" field.
func AuthorEmailLTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLTE(FieldAuthorEmail, v))
}

// AuthorEmailContains applies the Contains predicate on the "author_email" field.
func AuthorEmailContains(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContains(FieldAuthorEmail, v))
}

// AuthorEmailHasPrefix applies the HasPrefix predicate on the "author_email" field.
func AuthorEmailHasPrefix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasPrefix(FieldAuthorEmail, v))
}

// AuthorEmailHasSuffix applies the HasSuffix predicate on the "author_email" field.
func AuthorEmailHasSuffix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasSuffix(FieldAuthorEmail, v))
}

// AuthorEmailEqualFold applies the EqualFold predicate on the "author_email" field.
func AuthorEmailEqualFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEqualFold(FieldAuthorEmail, v))
}

// AuthorEmailContainsFold applies the ContainsFold predicate on the "author_email" field.
func AuthorEmailContainsFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContainsFold(FieldAuthorEmail, v))
}

// CommitterNameEQ applies the EQ predicate on the "committer_name" field.
func CommitterNameEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitterName, v))
}

// CommitterNameNEQ applies the NEQ predicate on the "committer_name" field.
func CommitterNameNEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNEQ(FieldCommitterName, v))
}

// CommitterNameIn applies the In predicate on the "committer_name" field.
func CommitterNameIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldIn(FieldCommitterName, vs...))
}

// CommitterNameNotIn applies the NotIn predicate on the "committer_name" field.
func CommitterNameNotIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNotIn(FieldCommitterName, vs...))
}

// CommitterNameGT applies the GT predicate on the "committer_name" field.
func CommitterNameGT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGT(FieldCommitterName, v))
}

// CommitterNameGTE applies the GTE predicate on the "committer_name" field.
func CommitterNameGTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGTE(FieldCommitterName, v))
}

// CommitterNameLT applies the LT predicate on the "committer_name" field.
func CommitterNameLT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLT(FieldCommitterName, v))
}

// CommitterNameLTE applies the LTE predicate on the "committer_name" field.
func CommitterNameLTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLTE(FieldCommitterName, v))
}

// CommitterNameContains applies the Contains predicate on the "committer_name" field.
func CommitterNameContains(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContains(FieldCommitterName, v))
}

// CommitterNameHasPrefix applies the HasPrefix predicate on the "committer_name" field.
func CommitterNameHasPrefix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasPrefix(FieldCommitterName, v))
}

// CommitterNameHasSuffix applies the HasSuffix predicate on the "committer_name" field.
func CommitterNameHasSuffix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasSuffix(FieldCommitterName, v))
}

// CommitterNameEqualFold applies the EqualFold predicate on the "committer_name" field.
func CommitterNameEqualFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEqualFold(FieldCommitterName, v))
}

// CommitterNameContainsFold applies the ContainsFold predicate on the "committer_name" field.
func CommitterNameContainsFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContainsFold(FieldCommitterName, v))
}

// CommitterEmailEQ applies the EQ predicate on the "committer_email" field.
func CommitterEmailEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitterEmail, v))
}

// CommitterEmailNEQ applies the NEQ predicate on the "committer_email" field.
func CommitterEmailNEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNEQ(FieldCommitterEmail, v))
}

// CommitterEmailIn applies the In predicate on the "committer_email" field.
func CommitterEmailIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldIn(FieldCommitterEmail, vs...))
}

// CommitterEmailNotIn applies the NotIn predicate on the "committer_email" field.
func CommitterEmailNotIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNotIn(FieldCommitterEmail, vs...))
}

// CommitterEmailGT applies the GT predicate on the "committer_email" field.
func CommitterEmailGT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGT(FieldCommitterEmail, v))
}

// CommitterEmailGTE applies the GTE predicate on the "committer_email" field.
func CommitterEmailGTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGTE(FieldCommitterEmail, v))
}

// CommitterEmailLT applies the LT predicate on the "committer_email" field.
func CommitterEmailLT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLT(FieldCommitterEmail, v))
}

// CommitterEmailLTE applies the LTE predicate on the "committer_email" field.
func CommitterEmailLTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLTE(FieldCommitterEmail, v))
}

// CommitterEmailContains applies the Contains predicate on the "committer_email" field.
func CommitterEmailContains(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContains(FieldCommitterEmail, v))
}

// CommitterEmailHasPrefix applies the HasPrefix predicate on the "committer_email" field.
func CommitterEmailHasPrefix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasPrefix(FieldCommitterEmail, v))
}

// CommitterEmailHasSuffix applies the HasSuffix predicate on the "committer_email" field.
func CommitterEmailHasSuffix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasSuffix(FieldCommitterEmail, v))
}

// CommitterEmailEqualFold applies the EqualFold predicate on the "committer_email" field.
func CommitterEmailEqualFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEqualFold(FieldCommitterEmail, v))
}

// CommitterEmailContainsFold applies the ContainsFold predicate on the "committer_email" field.
func CommitterEmailContainsFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContainsFold(FieldCommitterEmail, v))
}

// CommitDateEQ applies the EQ predicate on the "commit_date" field.
func CommitDateEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitDate, v))
}

// CommitDateNEQ applies the NEQ predicate on the "commit_date" field.
func CommitDateNEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNEQ(FieldCommitDate, v))
}

// CommitDateIn applies the In predicate on the "commit_date" field.
func CommitDateIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldIn(FieldCommitDate, vs...))
}

// CommitDateNotIn applies the NotIn predicate on the "commit_date" field.
func CommitDateNotIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNotIn(FieldCommitDate, vs...))
}

// CommitDateGT applies the GT predicate on the "commit_date" field.
func CommitDateGT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGT(FieldCommitDate, v))
}

// CommitDateGTE applies the GTE predicate on the "commit_date" field.
func CommitDateGTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGTE(FieldCommitDate, v))
}

// CommitDateLT applies the LT predicate on the "commit_date" field.
func CommitDateLT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLT(FieldCommitDate, v))
}

// CommitDateLTE applies the LTE predicate on the "commit_date" field.
func CommitDateLTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLTE(FieldCommitDate, v))
}

// CommitDateContains applies the Contains predicate on the "commit_date" field.
func CommitDateContains(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContains(FieldCommitDate, v))
}

// CommitDateHasPrefix applies the HasPrefix predicate on the "commit_date" field.
func CommitDateHasPrefix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasPrefix(FieldCommitDate, v))
}

// CommitDateHasSuffix applies the HasSuffix predicate on the "commit_date" field.
func CommitDateHasSuffix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasSuffix(FieldCommitDate, v))
}

// CommitDateEqualFold applies the EqualFold predicate on the "commit_date" field.
func CommitDateEqualFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEqualFold(FieldCommitDate, v))
}

// CommitDateContainsFold applies the ContainsFold predicate on the "commit_date" field.
func CommitDateContainsFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContainsFold(FieldCommitDate, v))
}

// CommitMessageEQ applies the EQ predicate on the "commit_message" field.
func CommitMessageEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitMessage, v))
}

// CommitMessageNEQ applies the NEQ predicate on the "commit_message" field.
func CommitMessageNEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNEQ(FieldCommitMessage, v))
}

// CommitMessageIn applies the In predicate on the "commit_message" field.
func CommitMessageIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldIn(FieldCommitMessage, vs...))
}

// CommitMessageNotIn applies the NotIn predicate on the "commit_message" field.
func CommitMessageNotIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNotIn(FieldCommitMessage, vs...))
}

// CommitMessageGT applies the GT predicate on the "commit_message" field.
func CommitMessageGT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGT(FieldCommitMessage, v))
}

// CommitMessageGTE applies the GTE predicate on the "commit_message" field.
func CommitMessageGTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGTE(FieldCommitMessage, v))
}

// CommitMessageLT applies the LT predicate on the "commit_message" field.
func CommitMessageLT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLT(FieldCommitMessage, v))
}

// CommitMessageLTE applies the LTE predicate on the "commit_message" field.
func CommitMessageLTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLTE(FieldCommitMessage, v))
}

// CommitMessageContains applies the Contains predicate on the "commit_message" field.
func CommitMessageContains(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContains(FieldCommitMessage, v))
}

// CommitMessageHasPrefix applies the HasPrefix predicate on the "commit_message" field.
func CommitMessageHasPrefix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasPrefix(FieldCommitMessage, v))
}

// CommitMessageHasSuffix applies the HasSuffix predicate on the "commit_message" field.
func CommitMessageHasSuffix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasSuffix(FieldCommitMessage, v))
}

// CommitMessageEqualFold applies the EqualFold predicate on the "commit_message" field.
func CommitMessageEqualFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEqualFold(FieldCommitMessage, v))
}

// CommitMessageContainsFold applies the ContainsFold predicate on the "commit_message" field.
func CommitMessageContainsFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContainsFold(FieldCommitMessage, v))
}

// CommitTypeEQ applies the EQ predicate on the "commit_type" field.
func CommitTypeEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitType, v))
}

// CommitTypeNEQ applies the NEQ predicate on the "commit_type" field.
func CommitTypeNEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNEQ(FieldCommitType, v))
}

// CommitTypeIn applies the In predicate on the "commit_type" field.
func CommitTypeIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldIn(FieldCommitType, vs...))
}

// CommitTypeNotIn applies the NotIn predicate on the "commit_type" field.
func CommitTypeNotIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNotIn(FieldCommitType, vs...))
}

// CommitTypeGT applies the GT predicate on the "commit_type" field.
func CommitTypeGT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGT(FieldCommitType, v))
}

// CommitTypeGTE applies the GTE predicate on the "commit_type" field.
func CommitTypeGTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGTE(FieldCommitType, v))
}

// CommitTypeLT applies the LT predicate on the "commit_type" field.
func CommitTypeLT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLT(FieldCommitType, v))
}

// CommitTypeLTE applies the LTE predicate on the "commit_type" field.
func CommitTypeLTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLTE(FieldCommitType, v))
}

// CommitTypeContains applies the Contains predicate on the "commit_type" field.
func CommitTypeContains(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContains(FieldCommitType, v))
}

// CommitTypeHasPrefix applies the HasPrefix predicate on the "commit_type" field.
func CommitTypeHasPrefix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasPrefix(FieldCommitType, v))
}

// CommitTypeHasSuffix applies the HasSuffix predicate on the "commit_type" field.
func CommitTypeHasSuffix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasSuffix(FieldCommitType, v))
}

// CommitTypeEqualFold applies the EqualFold predicate on the "commit_type" field.
func CommitTypeEqualFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEqualFold(FieldCommitType, v))
}

// CommitTypeContainsFold applies the ContainsFold predicate on the "commit_type" field.
func CommitTypeContainsFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContainsFold(FieldCommitType, v))
}

// CommitDigestEQ applies the EQ predicate on the "commit_digest" field.
func CommitDigestEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldCommitDigest, v))
}

// CommitDigestNEQ applies the NEQ predicate on the "commit_digest" field.
func CommitDigestNEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNEQ(FieldCommitDigest, v))
}

// CommitDigestIn applies the In predicate on the "commit_digest" field.
func CommitDigestIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldIn(FieldCommitDigest, vs...))
}

// CommitDigestNotIn applies the NotIn predicate on the "commit_digest" field.
func CommitDigestNotIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNotIn(FieldCommitDigest, vs...))
}

// CommitDigestGT applies the GT predicate on the "commit_digest" field.
func CommitDigestGT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGT(FieldCommitDigest, v))
}

// CommitDigestGTE applies the GTE predicate on the "commit_digest" field.
func CommitDigestGTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGTE(FieldCommitDigest, v))
}

// CommitDigestLT applies the LT predicate on the "commit_digest" field.
func CommitDigestLT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLT(FieldCommitDigest, v))
}

// CommitDigestLTE applies the LTE predicate on the "commit_digest" field.
func CommitDigestLTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLTE(FieldCommitDigest, v))
}

// CommitDigestContains applies the Contains predicate on the "commit_digest" field.
func CommitDigestContains(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContains(FieldCommitDigest, v))
}

// CommitDigestHasPrefix applies the HasPrefix predicate on the "commit_digest" field.
func CommitDigestHasPrefix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasPrefix(FieldCommitDigest, v))
}

// CommitDigestHasSuffix applies the HasSuffix predicate on the "commit_digest" field.
func CommitDigestHasSuffix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasSuffix(FieldCommitDigest, v))
}

// CommitDigestEqualFold applies the EqualFold predicate on the "commit_digest" field.
func CommitDigestEqualFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEqualFold(FieldCommitDigest, v))
}

// CommitDigestContainsFold applies the ContainsFold predicate on the "commit_digest" field.
func CommitDigestContainsFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContainsFold(FieldCommitDigest, v))
}

// SignatureEQ applies the EQ predicate on the "signature" field.
func SignatureEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldSignature, v))
}

// SignatureNEQ applies the NEQ predicate on the "signature" field.
func SignatureNEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNEQ(FieldSignature, v))
}

// SignatureIn applies the In predicate on the "signature" field.
func SignatureIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldIn(FieldSignature, vs...))
}

// SignatureNotIn applies the NotIn predicate on the "signature" field.
func SignatureNotIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNotIn(FieldSignature, vs...))
}

// SignatureGT applies the GT predicate on the "signature" field.
func SignatureGT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGT(FieldSignature, v))
}

// SignatureGTE applies the GTE predicate on the "signature" field.
func SignatureGTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGTE(FieldSignature, v))
}

// SignatureLT applies the LT predicate on the "signature" field.
func SignatureLT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLT(FieldSignature, v))
}

// SignatureLTE applies the LTE predicate on the "signature" field.
func SignatureLTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLTE(FieldSignature, v))
}

// SignatureContains applies the Contains predicate on the "signature" field.
func SignatureContains(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContains(FieldSignature, v))
}

// SignatureHasPrefix applies the HasPrefix predicate on the "signature" field.
func SignatureHasPrefix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasPrefix(FieldSignature, v))
}

// SignatureHasSuffix applies the HasSuffix predicate on the "signature" field.
func SignatureHasSuffix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasSuffix(FieldSignature, v))
}

// SignatureEqualFold applies the EqualFold predicate on the "signature" field.
func SignatureEqualFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEqualFold(FieldSignature, v))
}

// SignatureContainsFold applies the ContainsFold predicate on the "signature" field.
func SignatureContainsFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContainsFold(FieldSignature, v))
}

// TreeHashEQ applies the EQ predicate on the "tree_hash" field.
func TreeHashEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEQ(FieldTreeHash, v))
}

// TreeHashNEQ applies the NEQ predicate on the "tree_hash" field.
func TreeHashNEQ(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNEQ(FieldTreeHash, v))
}

// TreeHashIn applies the In predicate on the "tree_hash" field.
func TreeHashIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldIn(FieldTreeHash, vs...))
}

// TreeHashNotIn applies the NotIn predicate on the "tree_hash" field.
func TreeHashNotIn(vs ...string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldNotIn(FieldTreeHash, vs...))
}

// TreeHashGT applies the GT predicate on the "tree_hash" field.
func TreeHashGT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGT(FieldTreeHash, v))
}

// TreeHashGTE applies the GTE predicate on the "tree_hash" field.
func TreeHashGTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldGTE(FieldTreeHash, v))
}

// TreeHashLT applies the LT predicate on the "tree_hash" field.
func TreeHashLT(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLT(FieldTreeHash, v))
}

// TreeHashLTE applies the LTE predicate on the "tree_hash" field.
func TreeHashLTE(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldLTE(FieldTreeHash, v))
}

// TreeHashContains applies the Contains predicate on the "tree_hash" field.
func TreeHashContains(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContains(FieldTreeHash, v))
}

// TreeHashHasPrefix applies the HasPrefix predicate on the "tree_hash" field.
func TreeHashHasPrefix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasPrefix(FieldTreeHash, v))
}

// TreeHashHasSuffix applies the HasSuffix predicate on the "tree_hash" field.
func TreeHashHasSuffix(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldHasSuffix(FieldTreeHash, v))
}

// TreeHashEqualFold applies the EqualFold predicate on the "tree_hash" field.
func TreeHashEqualFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldEqualFold(FieldTreeHash, v))
}

// TreeHashContainsFold applies the ContainsFold predicate on the "tree_hash" field.
func TreeHashContainsFold(v string) predicate.GitAttestation {
	return predicate.GitAttestation(sql.FieldContainsFold(FieldTreeHash, v))
}

// HasAttestation applies the HasEdge predicate on the "attestation" edge.
func HasAttestation() predicate.GitAttestation {
	return predicate.GitAttestation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, AttestationTable, AttestationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttestationWith applies the HasEdge predicate on the "attestation" edge with a given conditions (other predicates).
func HasAttestationWith(preds ...predicate.Attestation) predicate.GitAttestation {
	return predicate.GitAttestation(func(s *sql.Selector) {
		step := newAttestationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GitAttestation) predicate.GitAttestation {
	return predicate.GitAttestation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GitAttestation) predicate.GitAttestation {
	return predicate.GitAttestation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GitAttestation) predicate.GitAttestation {
	return predicate.GitAttestation(sql.NotPredicates(p))
}
