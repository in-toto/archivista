// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/predicate"
	"github.com/in-toto/archivista/ent/sarif"
	"github.com/in-toto/archivista/ent/sarifrule"
)

// SarifRuleUpdate is the builder for updating SarifRule entities.
type SarifRuleUpdate struct {
	config
	hooks    []Hook
	mutation *SarifRuleMutation
}

// Where appends a list predicates to the SarifRuleUpdate builder.
func (sru *SarifRuleUpdate) Where(ps ...predicate.SarifRule) *SarifRuleUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetRuleID sets the "rule_id" field.
func (sru *SarifRuleUpdate) SetRuleID(s string) *SarifRuleUpdate {
	sru.mutation.SetRuleID(s)
	return sru
}

// SetNillableRuleID sets the "rule_id" field if the given value is not nil.
func (sru *SarifRuleUpdate) SetNillableRuleID(s *string) *SarifRuleUpdate {
	if s != nil {
		sru.SetRuleID(*s)
	}
	return sru
}

// SetRuleName sets the "rule_name" field.
func (sru *SarifRuleUpdate) SetRuleName(s string) *SarifRuleUpdate {
	sru.mutation.SetRuleName(s)
	return sru
}

// SetNillableRuleName sets the "rule_name" field if the given value is not nil.
func (sru *SarifRuleUpdate) SetNillableRuleName(s *string) *SarifRuleUpdate {
	if s != nil {
		sru.SetRuleName(*s)
	}
	return sru
}

// SetShortDescription sets the "short_description" field.
func (sru *SarifRuleUpdate) SetShortDescription(s string) *SarifRuleUpdate {
	sru.mutation.SetShortDescription(s)
	return sru
}

// SetNillableShortDescription sets the "short_description" field if the given value is not nil.
func (sru *SarifRuleUpdate) SetNillableShortDescription(s *string) *SarifRuleUpdate {
	if s != nil {
		sru.SetShortDescription(*s)
	}
	return sru
}

// SetSarifID sets the "sarif" edge to the Sarif entity by ID.
func (sru *SarifRuleUpdate) SetSarifID(id uuid.UUID) *SarifRuleUpdate {
	sru.mutation.SetSarifID(id)
	return sru
}

// SetNillableSarifID sets the "sarif" edge to the Sarif entity by ID if the given value is not nil.
func (sru *SarifRuleUpdate) SetNillableSarifID(id *uuid.UUID) *SarifRuleUpdate {
	if id != nil {
		sru = sru.SetSarifID(*id)
	}
	return sru
}

// SetSarif sets the "sarif" edge to the Sarif entity.
func (sru *SarifRuleUpdate) SetSarif(s *Sarif) *SarifRuleUpdate {
	return sru.SetSarifID(s.ID)
}

// Mutation returns the SarifRuleMutation object of the builder.
func (sru *SarifRuleUpdate) Mutation() *SarifRuleMutation {
	return sru.mutation
}

// ClearSarif clears the "sarif" edge to the Sarif entity.
func (sru *SarifRuleUpdate) ClearSarif() *SarifRuleUpdate {
	sru.mutation.ClearSarif()
	return sru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *SarifRuleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *SarifRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *SarifRuleUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *SarifRuleUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sru *SarifRuleUpdate) check() error {
	if v, ok := sru.mutation.RuleID(); ok {
		if err := sarifrule.RuleIDValidator(v); err != nil {
			return &ValidationError{Name: "rule_id", err: fmt.Errorf(`ent: validator failed for field "SarifRule.rule_id": %w`, err)}
		}
	}
	if v, ok := sru.mutation.RuleName(); ok {
		if err := sarifrule.RuleNameValidator(v); err != nil {
			return &ValidationError{Name: "rule_name", err: fmt.Errorf(`ent: validator failed for field "SarifRule.rule_name": %w`, err)}
		}
	}
	if v, ok := sru.mutation.ShortDescription(); ok {
		if err := sarifrule.ShortDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "short_description", err: fmt.Errorf(`ent: validator failed for field "SarifRule.short_description": %w`, err)}
		}
	}
	return nil
}

func (sru *SarifRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sarifrule.Table, sarifrule.Columns, sqlgraph.NewFieldSpec(sarifrule.FieldID, field.TypeUUID))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.RuleID(); ok {
		_spec.SetField(sarifrule.FieldRuleID, field.TypeString, value)
	}
	if value, ok := sru.mutation.RuleName(); ok {
		_spec.SetField(sarifrule.FieldRuleName, field.TypeString, value)
	}
	if value, ok := sru.mutation.ShortDescription(); ok {
		_spec.SetField(sarifrule.FieldShortDescription, field.TypeString, value)
	}
	if sru.mutation.SarifCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sarifrule.SarifTable,
			Columns: []string{sarifrule.SarifColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sarif.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.SarifIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sarifrule.SarifTable,
			Columns: []string{sarifrule.SarifColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sarif.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sarifrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// SarifRuleUpdateOne is the builder for updating a single SarifRule entity.
type SarifRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SarifRuleMutation
}

// SetRuleID sets the "rule_id" field.
func (sruo *SarifRuleUpdateOne) SetRuleID(s string) *SarifRuleUpdateOne {
	sruo.mutation.SetRuleID(s)
	return sruo
}

// SetNillableRuleID sets the "rule_id" field if the given value is not nil.
func (sruo *SarifRuleUpdateOne) SetNillableRuleID(s *string) *SarifRuleUpdateOne {
	if s != nil {
		sruo.SetRuleID(*s)
	}
	return sruo
}

// SetRuleName sets the "rule_name" field.
func (sruo *SarifRuleUpdateOne) SetRuleName(s string) *SarifRuleUpdateOne {
	sruo.mutation.SetRuleName(s)
	return sruo
}

// SetNillableRuleName sets the "rule_name" field if the given value is not nil.
func (sruo *SarifRuleUpdateOne) SetNillableRuleName(s *string) *SarifRuleUpdateOne {
	if s != nil {
		sruo.SetRuleName(*s)
	}
	return sruo
}

// SetShortDescription sets the "short_description" field.
func (sruo *SarifRuleUpdateOne) SetShortDescription(s string) *SarifRuleUpdateOne {
	sruo.mutation.SetShortDescription(s)
	return sruo
}

// SetNillableShortDescription sets the "short_description" field if the given value is not nil.
func (sruo *SarifRuleUpdateOne) SetNillableShortDescription(s *string) *SarifRuleUpdateOne {
	if s != nil {
		sruo.SetShortDescription(*s)
	}
	return sruo
}

// SetSarifID sets the "sarif" edge to the Sarif entity by ID.
func (sruo *SarifRuleUpdateOne) SetSarifID(id uuid.UUID) *SarifRuleUpdateOne {
	sruo.mutation.SetSarifID(id)
	return sruo
}

// SetNillableSarifID sets the "sarif" edge to the Sarif entity by ID if the given value is not nil.
func (sruo *SarifRuleUpdateOne) SetNillableSarifID(id *uuid.UUID) *SarifRuleUpdateOne {
	if id != nil {
		sruo = sruo.SetSarifID(*id)
	}
	return sruo
}

// SetSarif sets the "sarif" edge to the Sarif entity.
func (sruo *SarifRuleUpdateOne) SetSarif(s *Sarif) *SarifRuleUpdateOne {
	return sruo.SetSarifID(s.ID)
}

// Mutation returns the SarifRuleMutation object of the builder.
func (sruo *SarifRuleUpdateOne) Mutation() *SarifRuleMutation {
	return sruo.mutation
}

// ClearSarif clears the "sarif" edge to the Sarif entity.
func (sruo *SarifRuleUpdateOne) ClearSarif() *SarifRuleUpdateOne {
	sruo.mutation.ClearSarif()
	return sruo
}

// Where appends a list predicates to the SarifRuleUpdate builder.
func (sruo *SarifRuleUpdateOne) Where(ps ...predicate.SarifRule) *SarifRuleUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *SarifRuleUpdateOne) Select(field string, fields ...string) *SarifRuleUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated SarifRule entity.
func (sruo *SarifRuleUpdateOne) Save(ctx context.Context) (*SarifRule, error) {
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *SarifRuleUpdateOne) SaveX(ctx context.Context) *SarifRule {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *SarifRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *SarifRuleUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sruo *SarifRuleUpdateOne) check() error {
	if v, ok := sruo.mutation.RuleID(); ok {
		if err := sarifrule.RuleIDValidator(v); err != nil {
			return &ValidationError{Name: "rule_id", err: fmt.Errorf(`ent: validator failed for field "SarifRule.rule_id": %w`, err)}
		}
	}
	if v, ok := sruo.mutation.RuleName(); ok {
		if err := sarifrule.RuleNameValidator(v); err != nil {
			return &ValidationError{Name: "rule_name", err: fmt.Errorf(`ent: validator failed for field "SarifRule.rule_name": %w`, err)}
		}
	}
	if v, ok := sruo.mutation.ShortDescription(); ok {
		if err := sarifrule.ShortDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "short_description", err: fmt.Errorf(`ent: validator failed for field "SarifRule.short_description": %w`, err)}
		}
	}
	return nil
}

func (sruo *SarifRuleUpdateOne) sqlSave(ctx context.Context) (_node *SarifRule, err error) {
	if err := sruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sarifrule.Table, sarifrule.Columns, sqlgraph.NewFieldSpec(sarifrule.FieldID, field.TypeUUID))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SarifRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sarifrule.FieldID)
		for _, f := range fields {
			if !sarifrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sarifrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.RuleID(); ok {
		_spec.SetField(sarifrule.FieldRuleID, field.TypeString, value)
	}
	if value, ok := sruo.mutation.RuleName(); ok {
		_spec.SetField(sarifrule.FieldRuleName, field.TypeString, value)
	}
	if value, ok := sruo.mutation.ShortDescription(); ok {
		_spec.SetField(sarifrule.FieldShortDescription, field.TypeString, value)
	}
	if sruo.mutation.SarifCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sarifrule.SarifTable,
			Columns: []string{sarifrule.SarifColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sarif.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.SarifIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sarifrule.SarifTable,
			Columns: []string{sarifrule.SarifColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sarif.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SarifRule{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sarifrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
