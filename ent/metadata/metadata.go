// Code generated by ent, DO NOT EDIT.

package metadata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the metadata type in the database.
	Label = "metadata"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeEnvelope holds the string denoting the envelope edge name in mutations.
	EdgeEnvelope = "envelope"
	// Table holds the table name of the metadata in the database.
	Table = "metadata"
	// EnvelopeTable is the table that holds the envelope relation/edge. The primary key declared below.
	EnvelopeTable = "dsse_metadata"
	// EnvelopeInverseTable is the table name for the Dsse entity.
	// It exists in this package in order to avoid circular dependency with the "dsse" package.
	EnvelopeInverseTable = "dsses"
)

// Columns holds all SQL columns for metadata fields.
var Columns = []string{
	FieldID,
	FieldKey,
	FieldValue,
}

var (
	// EnvelopePrimaryKey and EnvelopeColumn2 are the table columns denoting the
	// primary key for the envelope relation (M2M).
	EnvelopePrimaryKey = []string{"dsse_id", "metadata_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// ValueValidator is a validator for the "value" field. It is called by the builders before save.
	ValueValidator func(string) error
)

// OrderOption defines the ordering options for the Metadata queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByEnvelopeCount orders the results by envelope count.
func ByEnvelopeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEnvelopeStep(), opts...)
	}
}

// ByEnvelope orders the results by envelope terms.
func ByEnvelope(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnvelopeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEnvelopeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnvelopeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EnvelopeTable, EnvelopePrimaryKey...),
	)
}
