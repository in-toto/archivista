// Code generated by ent, DO NOT EDIT.

package signature

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/testifysec/archivist/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// KeyID applies equality check predicate on the "key_id" field. It's identical to KeyIDEQ.
func KeyID(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeyID), v))
	})
}

// Signature applies equality check predicate on the "signature" field. It's identical to SignatureEQ.
func Signature(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSignature), v))
	})
}

// KeyIDEQ applies the EQ predicate on the "key_id" field.
func KeyIDEQ(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeyID), v))
	})
}

// KeyIDNEQ applies the NEQ predicate on the "key_id" field.
func KeyIDNEQ(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKeyID), v))
	})
}

// KeyIDIn applies the In predicate on the "key_id" field.
func KeyIDIn(vs ...string) predicate.Signature {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldKeyID), v...))
	})
}

// KeyIDNotIn applies the NotIn predicate on the "key_id" field.
func KeyIDNotIn(vs ...string) predicate.Signature {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldKeyID), v...))
	})
}

// KeyIDGT applies the GT predicate on the "key_id" field.
func KeyIDGT(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKeyID), v))
	})
}

// KeyIDGTE applies the GTE predicate on the "key_id" field.
func KeyIDGTE(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKeyID), v))
	})
}

// KeyIDLT applies the LT predicate on the "key_id" field.
func KeyIDLT(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKeyID), v))
	})
}

// KeyIDLTE applies the LTE predicate on the "key_id" field.
func KeyIDLTE(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKeyID), v))
	})
}

// KeyIDContains applies the Contains predicate on the "key_id" field.
func KeyIDContains(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKeyID), v))
	})
}

// KeyIDHasPrefix applies the HasPrefix predicate on the "key_id" field.
func KeyIDHasPrefix(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKeyID), v))
	})
}

// KeyIDHasSuffix applies the HasSuffix predicate on the "key_id" field.
func KeyIDHasSuffix(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKeyID), v))
	})
}

// KeyIDEqualFold applies the EqualFold predicate on the "key_id" field.
func KeyIDEqualFold(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKeyID), v))
	})
}

// KeyIDContainsFold applies the ContainsFold predicate on the "key_id" field.
func KeyIDContainsFold(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKeyID), v))
	})
}

// SignatureEQ applies the EQ predicate on the "signature" field.
func SignatureEQ(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSignature), v))
	})
}

// SignatureNEQ applies the NEQ predicate on the "signature" field.
func SignatureNEQ(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSignature), v))
	})
}

// SignatureIn applies the In predicate on the "signature" field.
func SignatureIn(vs ...string) predicate.Signature {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSignature), v...))
	})
}

// SignatureNotIn applies the NotIn predicate on the "signature" field.
func SignatureNotIn(vs ...string) predicate.Signature {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSignature), v...))
	})
}

// SignatureGT applies the GT predicate on the "signature" field.
func SignatureGT(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSignature), v))
	})
}

// SignatureGTE applies the GTE predicate on the "signature" field.
func SignatureGTE(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSignature), v))
	})
}

// SignatureLT applies the LT predicate on the "signature" field.
func SignatureLT(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSignature), v))
	})
}

// SignatureLTE applies the LTE predicate on the "signature" field.
func SignatureLTE(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSignature), v))
	})
}

// SignatureContains applies the Contains predicate on the "signature" field.
func SignatureContains(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSignature), v))
	})
}

// SignatureHasPrefix applies the HasPrefix predicate on the "signature" field.
func SignatureHasPrefix(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSignature), v))
	})
}

// SignatureHasSuffix applies the HasSuffix predicate on the "signature" field.
func SignatureHasSuffix(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSignature), v))
	})
}

// SignatureEqualFold applies the EqualFold predicate on the "signature" field.
func SignatureEqualFold(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSignature), v))
	})
}

// SignatureContainsFold applies the ContainsFold predicate on the "signature" field.
func SignatureContainsFold(v string) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSignature), v))
	})
}

// HasDsse applies the HasEdge predicate on the "dsse" edge.
func HasDsse() predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DsseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DsseTable, DsseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDsseWith applies the HasEdge predicate on the "dsse" edge with a given conditions (other predicates).
func HasDsseWith(preds ...predicate.Dsse) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DsseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DsseTable, DsseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTimestamps applies the HasEdge predicate on the "timestamps" edge.
func HasTimestamps() predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TimestampsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TimestampsTable, TimestampsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTimestampsWith applies the HasEdge predicate on the "timestamps" edge with a given conditions (other predicates).
func HasTimestampsWith(preds ...predicate.Timestamp) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TimestampsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TimestampsTable, TimestampsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Signature) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Signature) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Signature) predicate.Signature {
	return predicate.Signature(func(s *sql.Selector) {
		p(s.Not())
	})
}
