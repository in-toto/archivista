// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/sarif"
	"github.com/in-toto/archivista/ent/sarifrule"
)

// SarifRuleCreate is the builder for creating a SarifRule entity.
type SarifRuleCreate struct {
	config
	mutation *SarifRuleMutation
	hooks    []Hook
}

// SetRuleID sets the "rule_id" field.
func (src *SarifRuleCreate) SetRuleID(s string) *SarifRuleCreate {
	src.mutation.SetRuleID(s)
	return src
}

// SetRuleName sets the "rule_name" field.
func (src *SarifRuleCreate) SetRuleName(s string) *SarifRuleCreate {
	src.mutation.SetRuleName(s)
	return src
}

// SetShortDescription sets the "short_description" field.
func (src *SarifRuleCreate) SetShortDescription(s string) *SarifRuleCreate {
	src.mutation.SetShortDescription(s)
	return src
}

// SetID sets the "id" field.
func (src *SarifRuleCreate) SetID(u uuid.UUID) *SarifRuleCreate {
	src.mutation.SetID(u)
	return src
}

// SetNillableID sets the "id" field if the given value is not nil.
func (src *SarifRuleCreate) SetNillableID(u *uuid.UUID) *SarifRuleCreate {
	if u != nil {
		src.SetID(*u)
	}
	return src
}

// SetSarifID sets the "sarif" edge to the Sarif entity by ID.
func (src *SarifRuleCreate) SetSarifID(id uuid.UUID) *SarifRuleCreate {
	src.mutation.SetSarifID(id)
	return src
}

// SetNillableSarifID sets the "sarif" edge to the Sarif entity by ID if the given value is not nil.
func (src *SarifRuleCreate) SetNillableSarifID(id *uuid.UUID) *SarifRuleCreate {
	if id != nil {
		src = src.SetSarifID(*id)
	}
	return src
}

// SetSarif sets the "sarif" edge to the Sarif entity.
func (src *SarifRuleCreate) SetSarif(s *Sarif) *SarifRuleCreate {
	return src.SetSarifID(s.ID)
}

// Mutation returns the SarifRuleMutation object of the builder.
func (src *SarifRuleCreate) Mutation() *SarifRuleMutation {
	return src.mutation
}

// Save creates the SarifRule in the database.
func (src *SarifRuleCreate) Save(ctx context.Context) (*SarifRule, error) {
	src.defaults()
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *SarifRuleCreate) SaveX(ctx context.Context) *SarifRule {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *SarifRuleCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *SarifRuleCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *SarifRuleCreate) defaults() {
	if _, ok := src.mutation.ID(); !ok {
		v := sarifrule.DefaultID()
		src.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *SarifRuleCreate) check() error {
	if _, ok := src.mutation.RuleID(); !ok {
		return &ValidationError{Name: "rule_id", err: errors.New(`ent: missing required field "SarifRule.rule_id"`)}
	}
	if v, ok := src.mutation.RuleID(); ok {
		if err := sarifrule.RuleIDValidator(v); err != nil {
			return &ValidationError{Name: "rule_id", err: fmt.Errorf(`ent: validator failed for field "SarifRule.rule_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.RuleName(); !ok {
		return &ValidationError{Name: "rule_name", err: errors.New(`ent: missing required field "SarifRule.rule_name"`)}
	}
	if v, ok := src.mutation.RuleName(); ok {
		if err := sarifrule.RuleNameValidator(v); err != nil {
			return &ValidationError{Name: "rule_name", err: fmt.Errorf(`ent: validator failed for field "SarifRule.rule_name": %w`, err)}
		}
	}
	if _, ok := src.mutation.ShortDescription(); !ok {
		return &ValidationError{Name: "short_description", err: errors.New(`ent: missing required field "SarifRule.short_description"`)}
	}
	if v, ok := src.mutation.ShortDescription(); ok {
		if err := sarifrule.ShortDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "short_description", err: fmt.Errorf(`ent: validator failed for field "SarifRule.short_description": %w`, err)}
		}
	}
	return nil
}

func (src *SarifRuleCreate) sqlSave(ctx context.Context) (*SarifRule, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *SarifRuleCreate) createSpec() (*SarifRule, *sqlgraph.CreateSpec) {
	var (
		_node = &SarifRule{config: src.config}
		_spec = sqlgraph.NewCreateSpec(sarifrule.Table, sqlgraph.NewFieldSpec(sarifrule.FieldID, field.TypeUUID))
	)
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := src.mutation.RuleID(); ok {
		_spec.SetField(sarifrule.FieldRuleID, field.TypeString, value)
		_node.RuleID = value
	}
	if value, ok := src.mutation.RuleName(); ok {
		_spec.SetField(sarifrule.FieldRuleName, field.TypeString, value)
		_node.RuleName = value
	}
	if value, ok := src.mutation.ShortDescription(); ok {
		_spec.SetField(sarifrule.FieldShortDescription, field.TypeString, value)
		_node.ShortDescription = value
	}
	if nodes := src.mutation.SarifIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   sarifrule.SarifTable,
			Columns: []string{sarifrule.SarifColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sarif.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sarif_sarif_rules = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SarifRuleCreateBulk is the builder for creating many SarifRule entities in bulk.
type SarifRuleCreateBulk struct {
	config
	err      error
	builders []*SarifRuleCreate
}

// Save creates the SarifRule entities in the database.
func (srcb *SarifRuleCreateBulk) Save(ctx context.Context) ([]*SarifRule, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*SarifRule, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SarifRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *SarifRuleCreateBulk) SaveX(ctx context.Context) []*SarifRule {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *SarifRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *SarifRuleCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
