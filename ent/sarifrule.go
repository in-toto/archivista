// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/sarif"
	"github.com/in-toto/archivista/ent/sarifrule"
)

// SarifRule is the model entity for the SarifRule schema.
type SarifRule struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RuleID holds the value of the "rule_id" field.
	RuleID string `json:"rule_id,omitempty"`
	// RuleName holds the value of the "rule_name" field.
	RuleName string `json:"rule_name,omitempty"`
	// ShortDescription holds the value of the "short_description" field.
	ShortDescription string `json:"short_description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SarifRuleQuery when eager-loading is set.
	Edges             SarifRuleEdges `json:"edges"`
	sarif_sarif_rules *uuid.UUID
	selectValues      sql.SelectValues
}

// SarifRuleEdges holds the relations/edges for other nodes in the graph.
type SarifRuleEdges struct {
	// Sarif holds the value of the sarif edge.
	Sarif *Sarif `json:"sarif,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// SarifOrErr returns the Sarif value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SarifRuleEdges) SarifOrErr() (*Sarif, error) {
	if e.Sarif != nil {
		return e.Sarif, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sarif.Label}
	}
	return nil, &NotLoadedError{edge: "sarif"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SarifRule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sarifrule.FieldRuleID, sarifrule.FieldRuleName, sarifrule.FieldShortDescription:
			values[i] = new(sql.NullString)
		case sarifrule.FieldID:
			values[i] = new(uuid.UUID)
		case sarifrule.ForeignKeys[0]: // sarif_sarif_rules
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SarifRule fields.
func (sr *SarifRule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sarifrule.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sr.ID = *value
			}
		case sarifrule.FieldRuleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rule_id", values[i])
			} else if value.Valid {
				sr.RuleID = value.String
			}
		case sarifrule.FieldRuleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rule_name", values[i])
			} else if value.Valid {
				sr.RuleName = value.String
			}
		case sarifrule.FieldShortDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_description", values[i])
			} else if value.Valid {
				sr.ShortDescription = value.String
			}
		case sarifrule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field sarif_sarif_rules", values[i])
			} else if value.Valid {
				sr.sarif_sarif_rules = new(uuid.UUID)
				*sr.sarif_sarif_rules = *value.S.(*uuid.UUID)
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SarifRule.
// This includes values selected through modifiers, order, etc.
func (sr *SarifRule) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// QuerySarif queries the "sarif" edge of the SarifRule entity.
func (sr *SarifRule) QuerySarif() *SarifQuery {
	return NewSarifRuleClient(sr.config).QuerySarif(sr)
}

// Update returns a builder for updating this SarifRule.
// Note that you need to call SarifRule.Unwrap() before calling this method if this SarifRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *SarifRule) Update() *SarifRuleUpdateOne {
	return NewSarifRuleClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the SarifRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *SarifRule) Unwrap() *SarifRule {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SarifRule is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *SarifRule) String() string {
	var builder strings.Builder
	builder.WriteString("SarifRule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("rule_id=")
	builder.WriteString(sr.RuleID)
	builder.WriteString(", ")
	builder.WriteString("rule_name=")
	builder.WriteString(sr.RuleName)
	builder.WriteString(", ")
	builder.WriteString("short_description=")
	builder.WriteString(sr.ShortDescription)
	builder.WriteByte(')')
	return builder.String()
}

// SarifRules is a parsable slice of SarifRule.
type SarifRules []*SarifRule
