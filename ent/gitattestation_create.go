// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/attestation"
	"github.com/in-toto/archivista/ent/gitattestation"
)

// GitAttestationCreate is the builder for creating a GitAttestation entity.
type GitAttestationCreate struct {
	config
	mutation *GitAttestationMutation
	hooks    []Hook
}

// SetCommitHash sets the "commit_hash" field.
func (gac *GitAttestationCreate) SetCommitHash(s string) *GitAttestationCreate {
	gac.mutation.SetCommitHash(s)
	return gac
}

// SetAuthor sets the "author" field.
func (gac *GitAttestationCreate) SetAuthor(s string) *GitAttestationCreate {
	gac.mutation.SetAuthor(s)
	return gac
}

// SetAuthorEmail sets the "author_email" field.
func (gac *GitAttestationCreate) SetAuthorEmail(s string) *GitAttestationCreate {
	gac.mutation.SetAuthorEmail(s)
	return gac
}

// SetCommitterName sets the "committer_name" field.
func (gac *GitAttestationCreate) SetCommitterName(s string) *GitAttestationCreate {
	gac.mutation.SetCommitterName(s)
	return gac
}

// SetCommitterEmail sets the "committer_email" field.
func (gac *GitAttestationCreate) SetCommitterEmail(s string) *GitAttestationCreate {
	gac.mutation.SetCommitterEmail(s)
	return gac
}

// SetCommitDate sets the "commit_date" field.
func (gac *GitAttestationCreate) SetCommitDate(s string) *GitAttestationCreate {
	gac.mutation.SetCommitDate(s)
	return gac
}

// SetCommitMessage sets the "commit_message" field.
func (gac *GitAttestationCreate) SetCommitMessage(s string) *GitAttestationCreate {
	gac.mutation.SetCommitMessage(s)
	return gac
}

// SetStatus sets the "status" field.
func (gac *GitAttestationCreate) SetStatus(s []string) *GitAttestationCreate {
	gac.mutation.SetStatus(s)
	return gac
}

// SetCommitType sets the "commit_type" field.
func (gac *GitAttestationCreate) SetCommitType(s string) *GitAttestationCreate {
	gac.mutation.SetCommitType(s)
	return gac
}

// SetCommitDigest sets the "commit_digest" field.
func (gac *GitAttestationCreate) SetCommitDigest(s string) *GitAttestationCreate {
	gac.mutation.SetCommitDigest(s)
	return gac
}

// SetSignature sets the "signature" field.
func (gac *GitAttestationCreate) SetSignature(s string) *GitAttestationCreate {
	gac.mutation.SetSignature(s)
	return gac
}

// SetParentHashes sets the "parent_hashes" field.
func (gac *GitAttestationCreate) SetParentHashes(s []string) *GitAttestationCreate {
	gac.mutation.SetParentHashes(s)
	return gac
}

// SetTreeHash sets the "tree_hash" field.
func (gac *GitAttestationCreate) SetTreeHash(s string) *GitAttestationCreate {
	gac.mutation.SetTreeHash(s)
	return gac
}

// SetRefs sets the "refs" field.
func (gac *GitAttestationCreate) SetRefs(s []string) *GitAttestationCreate {
	gac.mutation.SetRefs(s)
	return gac
}

// SetRemotes sets the "remotes" field.
func (gac *GitAttestationCreate) SetRemotes(s []string) *GitAttestationCreate {
	gac.mutation.SetRemotes(s)
	return gac
}

// SetID sets the "id" field.
func (gac *GitAttestationCreate) SetID(u uuid.UUID) *GitAttestationCreate {
	gac.mutation.SetID(u)
	return gac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gac *GitAttestationCreate) SetNillableID(u *uuid.UUID) *GitAttestationCreate {
	if u != nil {
		gac.SetID(*u)
	}
	return gac
}

// SetAttestationID sets the "attestation" edge to the Attestation entity by ID.
func (gac *GitAttestationCreate) SetAttestationID(id uuid.UUID) *GitAttestationCreate {
	gac.mutation.SetAttestationID(id)
	return gac
}

// SetAttestation sets the "attestation" edge to the Attestation entity.
func (gac *GitAttestationCreate) SetAttestation(a *Attestation) *GitAttestationCreate {
	return gac.SetAttestationID(a.ID)
}

// Mutation returns the GitAttestationMutation object of the builder.
func (gac *GitAttestationCreate) Mutation() *GitAttestationMutation {
	return gac.mutation
}

// Save creates the GitAttestation in the database.
func (gac *GitAttestationCreate) Save(ctx context.Context) (*GitAttestation, error) {
	gac.defaults()
	return withHooks(ctx, gac.sqlSave, gac.mutation, gac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gac *GitAttestationCreate) SaveX(ctx context.Context) *GitAttestation {
	v, err := gac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gac *GitAttestationCreate) Exec(ctx context.Context) error {
	_, err := gac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gac *GitAttestationCreate) ExecX(ctx context.Context) {
	if err := gac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gac *GitAttestationCreate) defaults() {
	if _, ok := gac.mutation.ID(); !ok {
		v := gitattestation.DefaultID()
		gac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gac *GitAttestationCreate) check() error {
	if _, ok := gac.mutation.CommitHash(); !ok {
		return &ValidationError{Name: "commit_hash", err: errors.New(`ent: missing required field "GitAttestation.commit_hash"`)}
	}
	if _, ok := gac.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "GitAttestation.author"`)}
	}
	if _, ok := gac.mutation.AuthorEmail(); !ok {
		return &ValidationError{Name: "author_email", err: errors.New(`ent: missing required field "GitAttestation.author_email"`)}
	}
	if _, ok := gac.mutation.CommitterName(); !ok {
		return &ValidationError{Name: "committer_name", err: errors.New(`ent: missing required field "GitAttestation.committer_name"`)}
	}
	if _, ok := gac.mutation.CommitterEmail(); !ok {
		return &ValidationError{Name: "committer_email", err: errors.New(`ent: missing required field "GitAttestation.committer_email"`)}
	}
	if _, ok := gac.mutation.CommitDate(); !ok {
		return &ValidationError{Name: "commit_date", err: errors.New(`ent: missing required field "GitAttestation.commit_date"`)}
	}
	if _, ok := gac.mutation.CommitMessage(); !ok {
		return &ValidationError{Name: "commit_message", err: errors.New(`ent: missing required field "GitAttestation.commit_message"`)}
	}
	if _, ok := gac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "GitAttestation.status"`)}
	}
	if _, ok := gac.mutation.CommitType(); !ok {
		return &ValidationError{Name: "commit_type", err: errors.New(`ent: missing required field "GitAttestation.commit_type"`)}
	}
	if _, ok := gac.mutation.CommitDigest(); !ok {
		return &ValidationError{Name: "commit_digest", err: errors.New(`ent: missing required field "GitAttestation.commit_digest"`)}
	}
	if _, ok := gac.mutation.Signature(); !ok {
		return &ValidationError{Name: "signature", err: errors.New(`ent: missing required field "GitAttestation.signature"`)}
	}
	if _, ok := gac.mutation.ParentHashes(); !ok {
		return &ValidationError{Name: "parent_hashes", err: errors.New(`ent: missing required field "GitAttestation.parent_hashes"`)}
	}
	if _, ok := gac.mutation.TreeHash(); !ok {
		return &ValidationError{Name: "tree_hash", err: errors.New(`ent: missing required field "GitAttestation.tree_hash"`)}
	}
	if _, ok := gac.mutation.Refs(); !ok {
		return &ValidationError{Name: "refs", err: errors.New(`ent: missing required field "GitAttestation.refs"`)}
	}
	if _, ok := gac.mutation.Remotes(); !ok {
		return &ValidationError{Name: "remotes", err: errors.New(`ent: missing required field "GitAttestation.remotes"`)}
	}
	if _, ok := gac.mutation.AttestationID(); !ok {
		return &ValidationError{Name: "attestation", err: errors.New(`ent: missing required edge "GitAttestation.attestation"`)}
	}
	return nil
}

func (gac *GitAttestationCreate) sqlSave(ctx context.Context) (*GitAttestation, error) {
	if err := gac.check(); err != nil {
		return nil, err
	}
	_node, _spec := gac.createSpec()
	if err := sqlgraph.CreateNode(ctx, gac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	gac.mutation.id = &_node.ID
	gac.mutation.done = true
	return _node, nil
}

func (gac *GitAttestationCreate) createSpec() (*GitAttestation, *sqlgraph.CreateSpec) {
	var (
		_node = &GitAttestation{config: gac.config}
		_spec = sqlgraph.NewCreateSpec(gitattestation.Table, sqlgraph.NewFieldSpec(gitattestation.FieldID, field.TypeUUID))
	)
	if id, ok := gac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gac.mutation.CommitHash(); ok {
		_spec.SetField(gitattestation.FieldCommitHash, field.TypeString, value)
		_node.CommitHash = value
	}
	if value, ok := gac.mutation.Author(); ok {
		_spec.SetField(gitattestation.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := gac.mutation.AuthorEmail(); ok {
		_spec.SetField(gitattestation.FieldAuthorEmail, field.TypeString, value)
		_node.AuthorEmail = value
	}
	if value, ok := gac.mutation.CommitterName(); ok {
		_spec.SetField(gitattestation.FieldCommitterName, field.TypeString, value)
		_node.CommitterName = value
	}
	if value, ok := gac.mutation.CommitterEmail(); ok {
		_spec.SetField(gitattestation.FieldCommitterEmail, field.TypeString, value)
		_node.CommitterEmail = value
	}
	if value, ok := gac.mutation.CommitDate(); ok {
		_spec.SetField(gitattestation.FieldCommitDate, field.TypeString, value)
		_node.CommitDate = value
	}
	if value, ok := gac.mutation.CommitMessage(); ok {
		_spec.SetField(gitattestation.FieldCommitMessage, field.TypeString, value)
		_node.CommitMessage = value
	}
	if value, ok := gac.mutation.Status(); ok {
		_spec.SetField(gitattestation.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if value, ok := gac.mutation.CommitType(); ok {
		_spec.SetField(gitattestation.FieldCommitType, field.TypeString, value)
		_node.CommitType = value
	}
	if value, ok := gac.mutation.CommitDigest(); ok {
		_spec.SetField(gitattestation.FieldCommitDigest, field.TypeString, value)
		_node.CommitDigest = value
	}
	if value, ok := gac.mutation.Signature(); ok {
		_spec.SetField(gitattestation.FieldSignature, field.TypeString, value)
		_node.Signature = value
	}
	if value, ok := gac.mutation.ParentHashes(); ok {
		_spec.SetField(gitattestation.FieldParentHashes, field.TypeJSON, value)
		_node.ParentHashes = value
	}
	if value, ok := gac.mutation.TreeHash(); ok {
		_spec.SetField(gitattestation.FieldTreeHash, field.TypeString, value)
		_node.TreeHash = value
	}
	if value, ok := gac.mutation.Refs(); ok {
		_spec.SetField(gitattestation.FieldRefs, field.TypeJSON, value)
		_node.Refs = value
	}
	if value, ok := gac.mutation.Remotes(); ok {
		_spec.SetField(gitattestation.FieldRemotes, field.TypeJSON, value)
		_node.Remotes = value
	}
	if nodes := gac.mutation.AttestationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gitattestation.AttestationTable,
			Columns: []string{gitattestation.AttestationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attestation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.attestation_git_attestation = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GitAttestationCreateBulk is the builder for creating many GitAttestation entities in bulk.
type GitAttestationCreateBulk struct {
	config
	err      error
	builders []*GitAttestationCreate
}

// Save creates the GitAttestation entities in the database.
func (gacb *GitAttestationCreateBulk) Save(ctx context.Context) ([]*GitAttestation, error) {
	if gacb.err != nil {
		return nil, gacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gacb.builders))
	nodes := make([]*GitAttestation, len(gacb.builders))
	mutators := make([]Mutator, len(gacb.builders))
	for i := range gacb.builders {
		func(i int, root context.Context) {
			builder := gacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GitAttestationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gacb *GitAttestationCreateBulk) SaveX(ctx context.Context) []*GitAttestation {
	v, err := gacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gacb *GitAttestationCreateBulk) Exec(ctx context.Context) error {
	_, err := gacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gacb *GitAttestationCreateBulk) ExecX(ctx context.Context) {
	if err := gacb.Exec(ctx); err != nil {
		panic(err)
	}
}
