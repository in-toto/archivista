// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/mapping"
	"github.com/in-toto/archivista/ent/omnitrail"
	"github.com/in-toto/archivista/ent/posix"
)

// MappingCreate is the builder for creating a Mapping entity.
type MappingCreate struct {
	config
	mutation *MappingMutation
	hooks    []Hook
}

// SetPath sets the "path" field.
func (mc *MappingCreate) SetPath(s string) *MappingCreate {
	mc.mutation.SetPath(s)
	return mc
}

// SetType sets the "type" field.
func (mc *MappingCreate) SetType(s string) *MappingCreate {
	mc.mutation.SetType(s)
	return mc
}

// SetSha1 sets the "sha1" field.
func (mc *MappingCreate) SetSha1(s string) *MappingCreate {
	mc.mutation.SetSha1(s)
	return mc
}

// SetSha256 sets the "sha256" field.
func (mc *MappingCreate) SetSha256(s string) *MappingCreate {
	mc.mutation.SetSha256(s)
	return mc
}

// SetGitoidSha1 sets the "gitoidSha1" field.
func (mc *MappingCreate) SetGitoidSha1(s string) *MappingCreate {
	mc.mutation.SetGitoidSha1(s)
	return mc
}

// SetGitoidSha256 sets the "gitoidSha256" field.
func (mc *MappingCreate) SetGitoidSha256(s string) *MappingCreate {
	mc.mutation.SetGitoidSha256(s)
	return mc
}

// SetID sets the "id" field.
func (mc *MappingCreate) SetID(u uuid.UUID) *MappingCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MappingCreate) SetNillableID(u *uuid.UUID) *MappingCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// AddPosixIDs adds the "posix" edge to the Posix entity by IDs.
func (mc *MappingCreate) AddPosixIDs(ids ...uuid.UUID) *MappingCreate {
	mc.mutation.AddPosixIDs(ids...)
	return mc
}

// AddPosix adds the "posix" edges to the Posix entity.
func (mc *MappingCreate) AddPosix(p ...*Posix) *MappingCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mc.AddPosixIDs(ids...)
}

// SetOmnitrailID sets the "omnitrail" edge to the Omnitrail entity by ID.
func (mc *MappingCreate) SetOmnitrailID(id uuid.UUID) *MappingCreate {
	mc.mutation.SetOmnitrailID(id)
	return mc
}

// SetOmnitrail sets the "omnitrail" edge to the Omnitrail entity.
func (mc *MappingCreate) SetOmnitrail(o *Omnitrail) *MappingCreate {
	return mc.SetOmnitrailID(o.ID)
}

// Mutation returns the MappingMutation object of the builder.
func (mc *MappingCreate) Mutation() *MappingMutation {
	return mc.mutation
}

// Save creates the Mapping in the database.
func (mc *MappingCreate) Save(ctx context.Context) (*Mapping, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MappingCreate) SaveX(ctx context.Context) *Mapping {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MappingCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MappingCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MappingCreate) defaults() {
	if _, ok := mc.mutation.ID(); !ok {
		v := mapping.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MappingCreate) check() error {
	if _, ok := mc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Mapping.path"`)}
	}
	if v, ok := mc.mutation.Path(); ok {
		if err := mapping.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Mapping.path": %w`, err)}
		}
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Mapping.type"`)}
	}
	if v, ok := mc.mutation.GetType(); ok {
		if err := mapping.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Mapping.type": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Sha1(); !ok {
		return &ValidationError{Name: "sha1", err: errors.New(`ent: missing required field "Mapping.sha1"`)}
	}
	if _, ok := mc.mutation.Sha256(); !ok {
		return &ValidationError{Name: "sha256", err: errors.New(`ent: missing required field "Mapping.sha256"`)}
	}
	if _, ok := mc.mutation.GitoidSha1(); !ok {
		return &ValidationError{Name: "gitoidSha1", err: errors.New(`ent: missing required field "Mapping.gitoidSha1"`)}
	}
	if v, ok := mc.mutation.GitoidSha1(); ok {
		if err := mapping.GitoidSha1Validator(v); err != nil {
			return &ValidationError{Name: "gitoidSha1", err: fmt.Errorf(`ent: validator failed for field "Mapping.gitoidSha1": %w`, err)}
		}
	}
	if _, ok := mc.mutation.GitoidSha256(); !ok {
		return &ValidationError{Name: "gitoidSha256", err: errors.New(`ent: missing required field "Mapping.gitoidSha256"`)}
	}
	if v, ok := mc.mutation.GitoidSha256(); ok {
		if err := mapping.GitoidSha256Validator(v); err != nil {
			return &ValidationError{Name: "gitoidSha256", err: fmt.Errorf(`ent: validator failed for field "Mapping.gitoidSha256": %w`, err)}
		}
	}
	if _, ok := mc.mutation.OmnitrailID(); !ok {
		return &ValidationError{Name: "omnitrail", err: errors.New(`ent: missing required edge "Mapping.omnitrail"`)}
	}
	return nil
}

func (mc *MappingCreate) sqlSave(ctx context.Context) (*Mapping, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MappingCreate) createSpec() (*Mapping, *sqlgraph.CreateSpec) {
	var (
		_node = &Mapping{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(mapping.Table, sqlgraph.NewFieldSpec(mapping.FieldID, field.TypeUUID))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.Path(); ok {
		_spec.SetField(mapping.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.SetField(mapping.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := mc.mutation.Sha1(); ok {
		_spec.SetField(mapping.FieldSha1, field.TypeString, value)
		_node.Sha1 = value
	}
	if value, ok := mc.mutation.Sha256(); ok {
		_spec.SetField(mapping.FieldSha256, field.TypeString, value)
		_node.Sha256 = value
	}
	if value, ok := mc.mutation.GitoidSha1(); ok {
		_spec.SetField(mapping.FieldGitoidSha1, field.TypeString, value)
		_node.GitoidSha1 = value
	}
	if value, ok := mc.mutation.GitoidSha256(); ok {
		_spec.SetField(mapping.FieldGitoidSha256, field.TypeString, value)
		_node.GitoidSha256 = value
	}
	if nodes := mc.mutation.PosixIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mapping.PosixTable,
			Columns: []string{mapping.PosixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(posix.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.OmnitrailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mapping.OmnitrailTable,
			Columns: []string{mapping.OmnitrailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(omnitrail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.omnitrail_mappings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MappingCreateBulk is the builder for creating many Mapping entities in bulk.
type MappingCreateBulk struct {
	config
	err      error
	builders []*MappingCreate
}

// Save creates the Mapping entities in the database.
func (mcb *MappingCreateBulk) Save(ctx context.Context) ([]*Mapping, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mapping, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MappingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MappingCreateBulk) SaveX(ctx context.Context) []*Mapping {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MappingCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MappingCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
