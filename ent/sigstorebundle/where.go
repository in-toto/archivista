// Code generated by ent, DO NOT EDIT.

package sigstorebundle

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/in-toto/archivista/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldLTE(FieldID, id))
}

// GitoidSha256 applies equality check predicate on the "gitoid_sha256" field. It's identical to GitoidSha256EQ.
func GitoidSha256(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldEQ(FieldGitoidSha256, v))
}

// MediaType applies equality check predicate on the "media_type" field. It's identical to MediaTypeEQ.
func MediaType(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldEQ(FieldMediaType, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldEQ(FieldVersion, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldEQ(FieldCreatedAt, v))
}

// GitoidSha256EQ applies the EQ predicate on the "gitoid_sha256" field.
func GitoidSha256EQ(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldEQ(FieldGitoidSha256, v))
}

// GitoidSha256NEQ applies the NEQ predicate on the "gitoid_sha256" field.
func GitoidSha256NEQ(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldNEQ(FieldGitoidSha256, v))
}

// GitoidSha256In applies the In predicate on the "gitoid_sha256" field.
func GitoidSha256In(vs ...string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldIn(FieldGitoidSha256, vs...))
}

// GitoidSha256NotIn applies the NotIn predicate on the "gitoid_sha256" field.
func GitoidSha256NotIn(vs ...string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldNotIn(FieldGitoidSha256, vs...))
}

// GitoidSha256GT applies the GT predicate on the "gitoid_sha256" field.
func GitoidSha256GT(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldGT(FieldGitoidSha256, v))
}

// GitoidSha256GTE applies the GTE predicate on the "gitoid_sha256" field.
func GitoidSha256GTE(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldGTE(FieldGitoidSha256, v))
}

// GitoidSha256LT applies the LT predicate on the "gitoid_sha256" field.
func GitoidSha256LT(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldLT(FieldGitoidSha256, v))
}

// GitoidSha256LTE applies the LTE predicate on the "gitoid_sha256" field.
func GitoidSha256LTE(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldLTE(FieldGitoidSha256, v))
}

// GitoidSha256Contains applies the Contains predicate on the "gitoid_sha256" field.
func GitoidSha256Contains(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldContains(FieldGitoidSha256, v))
}

// GitoidSha256HasPrefix applies the HasPrefix predicate on the "gitoid_sha256" field.
func GitoidSha256HasPrefix(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldHasPrefix(FieldGitoidSha256, v))
}

// GitoidSha256HasSuffix applies the HasSuffix predicate on the "gitoid_sha256" field.
func GitoidSha256HasSuffix(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldHasSuffix(FieldGitoidSha256, v))
}

// GitoidSha256EqualFold applies the EqualFold predicate on the "gitoid_sha256" field.
func GitoidSha256EqualFold(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldEqualFold(FieldGitoidSha256, v))
}

// GitoidSha256ContainsFold applies the ContainsFold predicate on the "gitoid_sha256" field.
func GitoidSha256ContainsFold(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldContainsFold(FieldGitoidSha256, v))
}

// MediaTypeEQ applies the EQ predicate on the "media_type" field.
func MediaTypeEQ(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldEQ(FieldMediaType, v))
}

// MediaTypeNEQ applies the NEQ predicate on the "media_type" field.
func MediaTypeNEQ(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldNEQ(FieldMediaType, v))
}

// MediaTypeIn applies the In predicate on the "media_type" field.
func MediaTypeIn(vs ...string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldIn(FieldMediaType, vs...))
}

// MediaTypeNotIn applies the NotIn predicate on the "media_type" field.
func MediaTypeNotIn(vs ...string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldNotIn(FieldMediaType, vs...))
}

// MediaTypeGT applies the GT predicate on the "media_type" field.
func MediaTypeGT(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldGT(FieldMediaType, v))
}

// MediaTypeGTE applies the GTE predicate on the "media_type" field.
func MediaTypeGTE(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldGTE(FieldMediaType, v))
}

// MediaTypeLT applies the LT predicate on the "media_type" field.
func MediaTypeLT(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldLT(FieldMediaType, v))
}

// MediaTypeLTE applies the LTE predicate on the "media_type" field.
func MediaTypeLTE(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldLTE(FieldMediaType, v))
}

// MediaTypeContains applies the Contains predicate on the "media_type" field.
func MediaTypeContains(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldContains(FieldMediaType, v))
}

// MediaTypeHasPrefix applies the HasPrefix predicate on the "media_type" field.
func MediaTypeHasPrefix(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldHasPrefix(FieldMediaType, v))
}

// MediaTypeHasSuffix applies the HasSuffix predicate on the "media_type" field.
func MediaTypeHasSuffix(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldHasSuffix(FieldMediaType, v))
}

// MediaTypeEqualFold applies the EqualFold predicate on the "media_type" field.
func MediaTypeEqualFold(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldEqualFold(FieldMediaType, v))
}

// MediaTypeContainsFold applies the ContainsFold predicate on the "media_type" field.
func MediaTypeContainsFold(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldContainsFold(FieldMediaType, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldContainsFold(FieldVersion, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.FieldLTE(FieldCreatedAt, v))
}

// HasDsse applies the HasEdge predicate on the "dsse" edge.
func HasDsse() predicate.SigstoreBundle {
	return predicate.SigstoreBundle(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, DsseTable, DsseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDsseWith applies the HasEdge predicate on the "dsse" edge with a given conditions (other predicates).
func HasDsseWith(preds ...predicate.Dsse) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(func(s *sql.Selector) {
		step := newDsseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SigstoreBundle) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SigstoreBundle) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SigstoreBundle) predicate.SigstoreBundle {
	return predicate.SigstoreBundle(sql.NotPredicates(p))
}
