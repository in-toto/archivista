// Code generated by ent, DO NOT EDIT.

package sigstorebundle

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the sigstorebundle type in the database.
	Label = "sigstore_bundle"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGitoidSha256 holds the string denoting the gitoid_sha256 field in the database.
	FieldGitoidSha256 = "gitoid_sha256"
	// FieldMediaType holds the string denoting the media_type field in the database.
	FieldMediaType = "media_type"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeDsse holds the string denoting the dsse edge name in mutations.
	EdgeDsse = "dsse"
	// Table holds the table name of the sigstorebundle in the database.
	Table = "sigstore_bundles"
	// DsseTable is the table that holds the dsse relation/edge.
	DsseTable = "sigstore_bundles"
	// DsseInverseTable is the table name for the Dsse entity.
	// It exists in this package in order to avoid circular dependency with the "dsse" package.
	DsseInverseTable = "dsses"
	// DsseColumn is the table column denoting the dsse relation/edge.
	DsseColumn = "dsse_bundle"
)

// Columns holds all SQL columns for sigstorebundle fields.
var Columns = []string{
	FieldID,
	FieldGitoidSha256,
	FieldMediaType,
	FieldVersion,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sigstore_bundles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"dsse_bundle",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the SigstoreBundle queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGitoidSha256 orders the results by the gitoid_sha256 field.
func ByGitoidSha256(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitoidSha256, opts...).ToFunc()
}

// ByMediaType orders the results by the media_type field.
func ByMediaType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMediaType, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDsseField orders the results by dsse field.
func ByDsseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDsseStep(), sql.OrderByField(field, opts...))
	}
}
func newDsseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DsseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, DsseTable, DsseColumn),
	)
}
